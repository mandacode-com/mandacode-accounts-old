// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/event/v1/user_event.proto

package usereventv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _user_event_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on UserDeletedEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserDeletedEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDeletedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDeletedEventMultiError, or nil if none found.
func (m *UserDeletedEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDeletedEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = UserDeletedEventValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSyncCode()) < 1 {
		err := UserDeletedEventValidationError{
			field:  "SyncCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEventTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserDeletedEventValidationError{
					field:  "EventTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserDeletedEventValidationError{
					field:  "EventTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserDeletedEventValidationError{
				field:  "EventTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserDeletedEventMultiError(errors)
	}

	return nil
}

func (m *UserDeletedEvent) _validateUuid(uuid string) error {
	if matched := _user_event_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UserDeletedEventMultiError is an error wrapping multiple validation errors
// returned by UserDeletedEvent.ValidateAll() if the designated constraints
// aren't met.
type UserDeletedEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDeletedEventMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDeletedEventMultiError) AllErrors() []error { return m }

// UserDeletedEventValidationError is the validation error returned by
// UserDeletedEvent.Validate if the designated constraints aren't met.
type UserDeletedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDeletedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDeletedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDeletedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDeletedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDeletedEventValidationError) ErrorName() string { return "UserDeletedEventValidationError" }

// Error satisfies the builtin error interface
func (e UserDeletedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDeletedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDeletedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDeletedEventValidationError{}

// Validate checks the field values on UserArchivedEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserArchivedEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserArchivedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserArchivedEventMultiError, or nil if none found.
func (m *UserArchivedEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *UserArchivedEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = UserArchivedEventValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSyncCode()) < 1 {
		err := UserArchivedEventValidationError{
			field:  "SyncCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEventTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserArchivedEventValidationError{
					field:  "EventTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserArchivedEventValidationError{
					field:  "EventTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserArchivedEventValidationError{
				field:  "EventTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserArchivedEventMultiError(errors)
	}

	return nil
}

func (m *UserArchivedEvent) _validateUuid(uuid string) error {
	if matched := _user_event_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UserArchivedEventMultiError is an error wrapping multiple validation errors
// returned by UserArchivedEvent.ValidateAll() if the designated constraints
// aren't met.
type UserArchivedEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserArchivedEventMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserArchivedEventMultiError) AllErrors() []error { return m }

// UserArchivedEventValidationError is the validation error returned by
// UserArchivedEvent.Validate if the designated constraints aren't met.
type UserArchivedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserArchivedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserArchivedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserArchivedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserArchivedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserArchivedEventValidationError) ErrorName() string {
	return "UserArchivedEventValidationError"
}

// Error satisfies the builtin error interface
func (e UserArchivedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserArchivedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserArchivedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserArchivedEventValidationError{}

// Validate checks the field values on UserCreationFailedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserCreationFailedEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCreationFailedEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCreationFailedEventMultiError, or nil if none found.
func (m *UserCreationFailedEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCreationFailedEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = UserCreationFailedEventValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEventTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserCreationFailedEventValidationError{
					field:  "EventTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserCreationFailedEventValidationError{
					field:  "EventTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserCreationFailedEventValidationError{
				field:  "EventTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserCreationFailedEventMultiError(errors)
	}

	return nil
}

func (m *UserCreationFailedEvent) _validateUuid(uuid string) error {
	if matched := _user_event_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UserCreationFailedEventMultiError is an error wrapping multiple validation
// errors returned by UserCreationFailedEvent.ValidateAll() if the designated
// constraints aren't met.
type UserCreationFailedEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCreationFailedEventMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCreationFailedEventMultiError) AllErrors() []error { return m }

// UserCreationFailedEventValidationError is the validation error returned by
// UserCreationFailedEvent.Validate if the designated constraints aren't met.
type UserCreationFailedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreationFailedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreationFailedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreationFailedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreationFailedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreationFailedEventValidationError) ErrorName() string {
	return "UserCreationFailedEventValidationError"
}

// Error satisfies the builtin error interface
func (e UserCreationFailedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreationFailedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreationFailedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreationFailedEventValidationError{}
