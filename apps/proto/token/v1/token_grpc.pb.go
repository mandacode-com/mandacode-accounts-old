// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: token/v1/token.proto

package tokenv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TokenService_GenerateAccessToken_FullMethodName            = "/token.v1.TokenService/GenerateAccessToken"
	TokenService_VerifyAccessToken_FullMethodName              = "/token.v1.TokenService/VerifyAccessToken"
	TokenService_GenerateRefreshToken_FullMethodName           = "/token.v1.TokenService/GenerateRefreshToken"
	TokenService_VerifyRefreshToken_FullMethodName             = "/token.v1.TokenService/VerifyRefreshToken"
	TokenService_GenerateEmailVerificationToken_FullMethodName = "/token.v1.TokenService/GenerateEmailVerificationToken"
	TokenService_VerifyEmailVerificationToken_FullMethodName   = "/token.v1.TokenService/VerifyEmailVerificationToken"
)

// TokenServiceClient is the client API for TokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenServiceClient interface {
	// Generates an access token for a user
	GenerateAccessToken(ctx context.Context, in *GenerateAccessTokenRequest, opts ...grpc.CallOption) (*GenerateAccessTokenResponse, error)
	// Verifies an access token
	VerifyAccessToken(ctx context.Context, in *VerifyAccessTokenRequest, opts ...grpc.CallOption) (*VerifyAccessTokenResponse, error)
	// Generates a refresh token for a user
	GenerateRefreshToken(ctx context.Context, in *GenerateRefreshTokenRequest, opts ...grpc.CallOption) (*GenerateRefreshTokenResponse, error)
	// Verifies a refresh token
	VerifyRefreshToken(ctx context.Context, in *VerifyRefreshTokenRequest, opts ...grpc.CallOption) (*VerifyRefreshTokenResponse, error)
	// Generates an email verification token
	GenerateEmailVerificationToken(ctx context.Context, in *GenerateEmailVerificationTokenRequest, opts ...grpc.CallOption) (*GenerateEmailVerificationTokenResponse, error)
	// Verifies an email verification token
	VerifyEmailVerificationToken(ctx context.Context, in *VerifyEmailVerificationTokenRequest, opts ...grpc.CallOption) (*VerifyEmailVerificationTokenResponse, error)
}

type tokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenServiceClient(cc grpc.ClientConnInterface) TokenServiceClient {
	return &tokenServiceClient{cc}
}

func (c *tokenServiceClient) GenerateAccessToken(ctx context.Context, in *GenerateAccessTokenRequest, opts ...grpc.CallOption) (*GenerateAccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateAccessTokenResponse)
	err := c.cc.Invoke(ctx, TokenService_GenerateAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) VerifyAccessToken(ctx context.Context, in *VerifyAccessTokenRequest, opts ...grpc.CallOption) (*VerifyAccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyAccessTokenResponse)
	err := c.cc.Invoke(ctx, TokenService_VerifyAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) GenerateRefreshToken(ctx context.Context, in *GenerateRefreshTokenRequest, opts ...grpc.CallOption) (*GenerateRefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateRefreshTokenResponse)
	err := c.cc.Invoke(ctx, TokenService_GenerateRefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) VerifyRefreshToken(ctx context.Context, in *VerifyRefreshTokenRequest, opts ...grpc.CallOption) (*VerifyRefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyRefreshTokenResponse)
	err := c.cc.Invoke(ctx, TokenService_VerifyRefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) GenerateEmailVerificationToken(ctx context.Context, in *GenerateEmailVerificationTokenRequest, opts ...grpc.CallOption) (*GenerateEmailVerificationTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateEmailVerificationTokenResponse)
	err := c.cc.Invoke(ctx, TokenService_GenerateEmailVerificationToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) VerifyEmailVerificationToken(ctx context.Context, in *VerifyEmailVerificationTokenRequest, opts ...grpc.CallOption) (*VerifyEmailVerificationTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyEmailVerificationTokenResponse)
	err := c.cc.Invoke(ctx, TokenService_VerifyEmailVerificationToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServiceServer is the server API for TokenService service.
// All implementations must embed UnimplementedTokenServiceServer
// for forward compatibility.
type TokenServiceServer interface {
	// Generates an access token for a user
	GenerateAccessToken(context.Context, *GenerateAccessTokenRequest) (*GenerateAccessTokenResponse, error)
	// Verifies an access token
	VerifyAccessToken(context.Context, *VerifyAccessTokenRequest) (*VerifyAccessTokenResponse, error)
	// Generates a refresh token for a user
	GenerateRefreshToken(context.Context, *GenerateRefreshTokenRequest) (*GenerateRefreshTokenResponse, error)
	// Verifies a refresh token
	VerifyRefreshToken(context.Context, *VerifyRefreshTokenRequest) (*VerifyRefreshTokenResponse, error)
	// Generates an email verification token
	GenerateEmailVerificationToken(context.Context, *GenerateEmailVerificationTokenRequest) (*GenerateEmailVerificationTokenResponse, error)
	// Verifies an email verification token
	VerifyEmailVerificationToken(context.Context, *VerifyEmailVerificationTokenRequest) (*VerifyEmailVerificationTokenResponse, error)
	mustEmbedUnimplementedTokenServiceServer()
}

// UnimplementedTokenServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTokenServiceServer struct{}

func (UnimplementedTokenServiceServer) GenerateAccessToken(context.Context, *GenerateAccessTokenRequest) (*GenerateAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAccessToken not implemented")
}
func (UnimplementedTokenServiceServer) VerifyAccessToken(context.Context, *VerifyAccessTokenRequest) (*VerifyAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccessToken not implemented")
}
func (UnimplementedTokenServiceServer) GenerateRefreshToken(context.Context, *GenerateRefreshTokenRequest) (*GenerateRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRefreshToken not implemented")
}
func (UnimplementedTokenServiceServer) VerifyRefreshToken(context.Context, *VerifyRefreshTokenRequest) (*VerifyRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyRefreshToken not implemented")
}
func (UnimplementedTokenServiceServer) GenerateEmailVerificationToken(context.Context, *GenerateEmailVerificationTokenRequest) (*GenerateEmailVerificationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateEmailVerificationToken not implemented")
}
func (UnimplementedTokenServiceServer) VerifyEmailVerificationToken(context.Context, *VerifyEmailVerificationTokenRequest) (*VerifyEmailVerificationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmailVerificationToken not implemented")
}
func (UnimplementedTokenServiceServer) mustEmbedUnimplementedTokenServiceServer() {}
func (UnimplementedTokenServiceServer) testEmbeddedByValue()                      {}

// UnsafeTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenServiceServer will
// result in compilation errors.
type UnsafeTokenServiceServer interface {
	mustEmbedUnimplementedTokenServiceServer()
}

func RegisterTokenServiceServer(s grpc.ServiceRegistrar, srv TokenServiceServer) {
	// If the following call pancis, it indicates UnimplementedTokenServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TokenService_ServiceDesc, srv)
}

func _TokenService_GenerateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).GenerateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenService_GenerateAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).GenerateAccessToken(ctx, req.(*GenerateAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_VerifyAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).VerifyAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenService_VerifyAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).VerifyAccessToken(ctx, req.(*VerifyAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_GenerateRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).GenerateRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenService_GenerateRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).GenerateRefreshToken(ctx, req.(*GenerateRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_VerifyRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).VerifyRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenService_VerifyRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).VerifyRefreshToken(ctx, req.(*VerifyRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_GenerateEmailVerificationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateEmailVerificationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).GenerateEmailVerificationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenService_GenerateEmailVerificationToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).GenerateEmailVerificationToken(ctx, req.(*GenerateEmailVerificationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_VerifyEmailVerificationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailVerificationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).VerifyEmailVerificationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenService_VerifyEmailVerificationToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).VerifyEmailVerificationToken(ctx, req.(*VerifyEmailVerificationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenService_ServiceDesc is the grpc.ServiceDesc for TokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "token.v1.TokenService",
	HandlerType: (*TokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateAccessToken",
			Handler:    _TokenService_GenerateAccessToken_Handler,
		},
		{
			MethodName: "VerifyAccessToken",
			Handler:    _TokenService_VerifyAccessToken_Handler,
		},
		{
			MethodName: "GenerateRefreshToken",
			Handler:    _TokenService_GenerateRefreshToken_Handler,
		},
		{
			MethodName: "VerifyRefreshToken",
			Handler:    _TokenService_VerifyRefreshToken_Handler,
		},
		{
			MethodName: "GenerateEmailVerificationToken",
			Handler:    _TokenService_GenerateEmailVerificationToken_Handler,
		},
		{
			MethodName: "VerifyEmailVerificationToken",
			Handler:    _TokenService_VerifyEmailVerificationToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token/v1/token.proto",
}
