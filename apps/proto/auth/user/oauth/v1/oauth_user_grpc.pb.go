// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: auth/user/oauth/v1/oauth_user.proto

package oauthuserv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OAuthUserService_GetUser_FullMethodName              = "/auth.user.oauth.v1.OAuthUserService/GetUser"
	OAuthUserService_EnrollUser_FullMethodName           = "/auth.user.oauth.v1.OAuthUserService/EnrollUser"
	OAuthUserService_DeleteUser_FullMethodName           = "/auth.user.oauth.v1.OAuthUserService/DeleteUser"
	OAuthUserService_DeleteAllProviders_FullMethodName   = "/auth.user.oauth.v1.OAuthUserService/DeleteAllProviders"
	OAuthUserService_SyncUser_FullMethodName             = "/auth.user.oauth.v1.OAuthUserService/SyncUser"
	OAuthUserService_UpdateActiveStatus_FullMethodName   = "/auth.user.oauth.v1.OAuthUserService/UpdateActiveStatus"
	OAuthUserService_UpdateVerifiedStatus_FullMethodName = "/auth.user.oauth.v1.OAuthUserService/UpdateVerifiedStatus"
)

// OAuthUserServiceClient is the client API for OAuthUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OAuthUserServiceClient interface {
	// Gets a user by user ID and OAuth provider
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Enrolls a user with OAuth provider
	EnrollUser(ctx context.Context, in *EnrollUserRequest, opts ...grpc.CallOption) (*EnrollUserResponse, error)
	// Deletes a user by user ID
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// Deletes all OAuth providers for a user
	DeleteAllProviders(ctx context.Context, in *DeleteAllProvidersRequest, opts ...grpc.CallOption) (*DeleteAllProvidersResponse, error)
	// Syncs a user with OAuth provider
	SyncUser(ctx context.Context, in *SyncUserRequest, opts ...grpc.CallOption) (*SyncUserResponse, error)
	// Updates a user's active status
	UpdateActiveStatus(ctx context.Context, in *UpdateActiveStatusRequest, opts ...grpc.CallOption) (*UpdateActiveStatusResponse, error)
	// Updates a user's verified status
	UpdateVerifiedStatus(ctx context.Context, in *UpdateVerifiedStatusRequest, opts ...grpc.CallOption) (*UpdateVerifiedStatusResponse, error)
}

type oAuthUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOAuthUserServiceClient(cc grpc.ClientConnInterface) OAuthUserServiceClient {
	return &oAuthUserServiceClient{cc}
}

func (c *oAuthUserServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, OAuthUserService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthUserServiceClient) EnrollUser(ctx context.Context, in *EnrollUserRequest, opts ...grpc.CallOption) (*EnrollUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnrollUserResponse)
	err := c.cc.Invoke(ctx, OAuthUserService_EnrollUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthUserServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, OAuthUserService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthUserServiceClient) DeleteAllProviders(ctx context.Context, in *DeleteAllProvidersRequest, opts ...grpc.CallOption) (*DeleteAllProvidersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAllProvidersResponse)
	err := c.cc.Invoke(ctx, OAuthUserService_DeleteAllProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthUserServiceClient) SyncUser(ctx context.Context, in *SyncUserRequest, opts ...grpc.CallOption) (*SyncUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncUserResponse)
	err := c.cc.Invoke(ctx, OAuthUserService_SyncUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthUserServiceClient) UpdateActiveStatus(ctx context.Context, in *UpdateActiveStatusRequest, opts ...grpc.CallOption) (*UpdateActiveStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateActiveStatusResponse)
	err := c.cc.Invoke(ctx, OAuthUserService_UpdateActiveStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthUserServiceClient) UpdateVerifiedStatus(ctx context.Context, in *UpdateVerifiedStatusRequest, opts ...grpc.CallOption) (*UpdateVerifiedStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVerifiedStatusResponse)
	err := c.cc.Invoke(ctx, OAuthUserService_UpdateVerifiedStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAuthUserServiceServer is the server API for OAuthUserService service.
// All implementations must embed UnimplementedOAuthUserServiceServer
// for forward compatibility.
type OAuthUserServiceServer interface {
	// Gets a user by user ID and OAuth provider
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Enrolls a user with OAuth provider
	EnrollUser(context.Context, *EnrollUserRequest) (*EnrollUserResponse, error)
	// Deletes a user by user ID
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// Deletes all OAuth providers for a user
	DeleteAllProviders(context.Context, *DeleteAllProvidersRequest) (*DeleteAllProvidersResponse, error)
	// Syncs a user with OAuth provider
	SyncUser(context.Context, *SyncUserRequest) (*SyncUserResponse, error)
	// Updates a user's active status
	UpdateActiveStatus(context.Context, *UpdateActiveStatusRequest) (*UpdateActiveStatusResponse, error)
	// Updates a user's verified status
	UpdateVerifiedStatus(context.Context, *UpdateVerifiedStatusRequest) (*UpdateVerifiedStatusResponse, error)
	mustEmbedUnimplementedOAuthUserServiceServer()
}

// UnimplementedOAuthUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOAuthUserServiceServer struct{}

func (UnimplementedOAuthUserServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedOAuthUserServiceServer) EnrollUser(context.Context, *EnrollUserRequest) (*EnrollUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollUser not implemented")
}
func (UnimplementedOAuthUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedOAuthUserServiceServer) DeleteAllProviders(context.Context, *DeleteAllProvidersRequest) (*DeleteAllProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllProviders not implemented")
}
func (UnimplementedOAuthUserServiceServer) SyncUser(context.Context, *SyncUserRequest) (*SyncUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncUser not implemented")
}
func (UnimplementedOAuthUserServiceServer) UpdateActiveStatus(context.Context, *UpdateActiveStatusRequest) (*UpdateActiveStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActiveStatus not implemented")
}
func (UnimplementedOAuthUserServiceServer) UpdateVerifiedStatus(context.Context, *UpdateVerifiedStatusRequest) (*UpdateVerifiedStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVerifiedStatus not implemented")
}
func (UnimplementedOAuthUserServiceServer) mustEmbedUnimplementedOAuthUserServiceServer() {}
func (UnimplementedOAuthUserServiceServer) testEmbeddedByValue()                          {}

// UnsafeOAuthUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OAuthUserServiceServer will
// result in compilation errors.
type UnsafeOAuthUserServiceServer interface {
	mustEmbedUnimplementedOAuthUserServiceServer()
}

func RegisterOAuthUserServiceServer(s grpc.ServiceRegistrar, srv OAuthUserServiceServer) {
	// If the following call pancis, it indicates UnimplementedOAuthUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OAuthUserService_ServiceDesc, srv)
}

func _OAuthUserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthUserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthUserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthUserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthUserService_EnrollUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthUserServiceServer).EnrollUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthUserService_EnrollUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthUserServiceServer).EnrollUser(ctx, req.(*EnrollUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthUserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthUserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthUserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthUserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthUserService_DeleteAllProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthUserServiceServer).DeleteAllProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthUserService_DeleteAllProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthUserServiceServer).DeleteAllProviders(ctx, req.(*DeleteAllProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthUserService_SyncUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthUserServiceServer).SyncUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthUserService_SyncUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthUserServiceServer).SyncUser(ctx, req.(*SyncUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthUserService_UpdateActiveStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActiveStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthUserServiceServer).UpdateActiveStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthUserService_UpdateActiveStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthUserServiceServer).UpdateActiveStatus(ctx, req.(*UpdateActiveStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthUserService_UpdateVerifiedStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVerifiedStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthUserServiceServer).UpdateVerifiedStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthUserService_UpdateVerifiedStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthUserServiceServer).UpdateVerifiedStatus(ctx, req.(*UpdateVerifiedStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OAuthUserService_ServiceDesc is the grpc.ServiceDesc for OAuthUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OAuthUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.user.oauth.v1.OAuthUserService",
	HandlerType: (*OAuthUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _OAuthUserService_GetUser_Handler,
		},
		{
			MethodName: "EnrollUser",
			Handler:    _OAuthUserService_EnrollUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _OAuthUserService_DeleteUser_Handler,
		},
		{
			MethodName: "DeleteAllProviders",
			Handler:    _OAuthUserService_DeleteAllProviders_Handler,
		},
		{
			MethodName: "SyncUser",
			Handler:    _OAuthUserService_SyncUser_Handler,
		},
		{
			MethodName: "UpdateActiveStatus",
			Handler:    _OAuthUserService_UpdateActiveStatus_Handler,
		},
		{
			MethodName: "UpdateVerifiedStatus",
			Handler:    _OAuthUserService_UpdateVerifiedStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/user/oauth/v1/oauth_user.proto",
}
