// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth/user/oauth/v1/oauth_user.proto

package oauthuserv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	providerv1 "mandacode.com/accounts/proto/common/provider/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = providerv1.OAuthProvider(0)
)

// define the regex for a UUID once up-front
var _oauth_user_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on OAuthUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OAuthUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OAuthUserMultiError, or nil
// if none found.
func (m *OAuthUser) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = OAuthUserValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	if utf8.RuneCountInString(m.GetProviderId()) < 1 {
		err := OAuthUserValidationError{
			field:  "ProviderId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = OAuthUserValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsActive

	// no validation rules for IsVerified

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OAuthUserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OAuthUserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuthUserValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OAuthUserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OAuthUserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OAuthUserValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OAuthUserMultiError(errors)
	}

	return nil
}

func (m *OAuthUser) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *OAuthUser) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

func (m *OAuthUser) _validateUuid(uuid string) error {
	if matched := _oauth_user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OAuthUserMultiError is an error wrapping multiple validation errors returned
// by OAuthUser.ValidateAll() if the designated constraints aren't met.
type OAuthUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthUserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthUserMultiError) AllErrors() []error { return m }

// OAuthUserValidationError is the validation error returned by
// OAuthUser.Validate if the designated constraints aren't met.
type OAuthUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthUserValidationError) ErrorName() string { return "OAuthUserValidationError" }

// Error satisfies the builtin error interface
func (e OAuthUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthUserValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GetUserRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

func (m *GetUserRequest) _validateUuid(uuid string) error {
	if matched := _oauth_user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on EnrollUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EnrollUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnrollUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnrollUserRequestMultiError, or nil if none found.
func (m *EnrollUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnrollUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = EnrollUserRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := EnrollUserRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	if m.IsActive != nil {
		// no validation rules for IsActive
	}

	if m.IsVerified != nil {
		// no validation rules for IsVerified
	}

	if len(errors) > 0 {
		return EnrollUserRequestMultiError(errors)
	}

	return nil
}

func (m *EnrollUserRequest) _validateUuid(uuid string) error {
	if matched := _oauth_user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// EnrollUserRequestMultiError is an error wrapping multiple validation errors
// returned by EnrollUserRequest.ValidateAll() if the designated constraints
// aren't met.
type EnrollUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnrollUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnrollUserRequestMultiError) AllErrors() []error { return m }

// EnrollUserRequestValidationError is the validation error returned by
// EnrollUserRequest.Validate if the designated constraints aren't met.
type EnrollUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrollUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrollUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrollUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrollUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrollUserRequestValidationError) ErrorName() string {
	return "EnrollUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnrollUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrollUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrollUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrollUserRequestValidationError{}

// Validate checks the field values on EnrollUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnrollUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnrollUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnrollUserResponseMultiError, or nil if none found.
func (m *EnrollUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnrollUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EnrollUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EnrollUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnrollUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EnrollUserResponseMultiError(errors)
	}

	return nil
}

// EnrollUserResponseMultiError is an error wrapping multiple validation errors
// returned by EnrollUserResponse.ValidateAll() if the designated constraints
// aren't met.
type EnrollUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnrollUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnrollUserResponseMultiError) AllErrors() []error { return m }

// EnrollUserResponseValidationError is the validation error returned by
// EnrollUserResponse.Validate if the designated constraints aren't met.
type EnrollUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrollUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrollUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrollUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrollUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrollUserResponseValidationError) ErrorName() string {
	return "EnrollUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnrollUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrollUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrollUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrollUserResponseValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteUserRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteUserRequest) _validateUuid(uuid string) error {
	if matched := _oauth_user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserResponseMultiError, or nil if none found.
func (m *DeleteUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteUserResponseValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteUserResponseValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteUserResponseValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteUserResponseValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteUserResponseMultiError(errors)
	}

	return nil
}

func (m *DeleteUserResponse) _validateUuid(uuid string) error {
	if matched := _oauth_user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteUserResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteUserResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserResponseMultiError) AllErrors() []error { return m }

// DeleteUserResponseValidationError is the validation error returned by
// DeleteUserResponse.Validate if the designated constraints aren't met.
type DeleteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserResponseValidationError) ErrorName() string {
	return "DeleteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserResponseValidationError{}

// Validate checks the field values on DeleteAllProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAllProvidersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAllProvidersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAllProvidersRequestMultiError, or nil if none found.
func (m *DeleteAllProvidersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAllProvidersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteAllProvidersRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAllProvidersRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteAllProvidersRequest) _validateUuid(uuid string) error {
	if matched := _oauth_user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteAllProvidersRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAllProvidersRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteAllProvidersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAllProvidersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAllProvidersRequestMultiError) AllErrors() []error { return m }

// DeleteAllProvidersRequestValidationError is the validation error returned by
// DeleteAllProvidersRequest.Validate if the designated constraints aren't met.
type DeleteAllProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAllProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAllProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAllProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAllProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAllProvidersRequestValidationError) ErrorName() string {
	return "DeleteAllProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAllProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAllProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAllProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAllProvidersRequestValidationError{}

// Validate checks the field values on DeleteAllProvidersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAllProvidersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAllProvidersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAllProvidersResponseMultiError, or nil if none found.
func (m *DeleteAllProvidersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAllProvidersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteAllProvidersResponseValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteAllProvidersResponseValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteAllProvidersResponseValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAllProvidersResponseValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteAllProvidersResponseMultiError(errors)
	}

	return nil
}

func (m *DeleteAllProvidersResponse) _validateUuid(uuid string) error {
	if matched := _oauth_user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteAllProvidersResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteAllProvidersResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteAllProvidersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAllProvidersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAllProvidersResponseMultiError) AllErrors() []error { return m }

// DeleteAllProvidersResponseValidationError is the validation error returned
// by DeleteAllProvidersResponse.Validate if the designated constraints aren't met.
type DeleteAllProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAllProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAllProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAllProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAllProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAllProvidersResponseValidationError) ErrorName() string {
	return "DeleteAllProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAllProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAllProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAllProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAllProvidersResponseValidationError{}

// Validate checks the field values on SyncUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SyncUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncUserRequestMultiError, or nil if none found.
func (m *SyncUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = SyncUserRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := SyncUserRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SyncUserRequestMultiError(errors)
	}

	return nil
}

func (m *SyncUserRequest) _validateUuid(uuid string) error {
	if matched := _oauth_user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SyncUserRequestMultiError is an error wrapping multiple validation errors
// returned by SyncUserRequest.ValidateAll() if the designated constraints
// aren't met.
type SyncUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncUserRequestMultiError) AllErrors() []error { return m }

// SyncUserRequestValidationError is the validation error returned by
// SyncUserRequest.Validate if the designated constraints aren't met.
type SyncUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncUserRequestValidationError) ErrorName() string { return "SyncUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e SyncUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncUserRequestValidationError{}

// Validate checks the field values on SyncUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SyncUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncUserResponseMultiError, or nil if none found.
func (m *SyncUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SyncUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SyncUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SyncUserResponseMultiError(errors)
	}

	return nil
}

// SyncUserResponseMultiError is an error wrapping multiple validation errors
// returned by SyncUserResponse.ValidateAll() if the designated constraints
// aren't met.
type SyncUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncUserResponseMultiError) AllErrors() []error { return m }

// SyncUserResponseValidationError is the validation error returned by
// SyncUserResponse.Validate if the designated constraints aren't met.
type SyncUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncUserResponseValidationError) ErrorName() string { return "SyncUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e SyncUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncUserResponseValidationError{}

// Validate checks the field values on UpdateActiveStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateActiveStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateActiveStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateActiveStatusRequestMultiError, or nil if none found.
func (m *UpdateActiveStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateActiveStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = UpdateActiveStatusRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	// no validation rules for IsActive

	if len(errors) > 0 {
		return UpdateActiveStatusRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateActiveStatusRequest) _validateUuid(uuid string) error {
	if matched := _oauth_user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateActiveStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateActiveStatusRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateActiveStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateActiveStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateActiveStatusRequestMultiError) AllErrors() []error { return m }

// UpdateActiveStatusRequestValidationError is the validation error returned by
// UpdateActiveStatusRequest.Validate if the designated constraints aren't met.
type UpdateActiveStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateActiveStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateActiveStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateActiveStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateActiveStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateActiveStatusRequestValidationError) ErrorName() string {
	return "UpdateActiveStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateActiveStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateActiveStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateActiveStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateActiveStatusRequestValidationError{}

// Validate checks the field values on UpdateActiveStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateActiveStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateActiveStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateActiveStatusResponseMultiError, or nil if none found.
func (m *UpdateActiveStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateActiveStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateActiveStatusResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateActiveStatusResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateActiveStatusResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateActiveStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateActiveStatusResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateActiveStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateActiveStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateActiveStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateActiveStatusResponseMultiError) AllErrors() []error { return m }

// UpdateActiveStatusResponseValidationError is the validation error returned
// by UpdateActiveStatusResponse.Validate if the designated constraints aren't met.
type UpdateActiveStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateActiveStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateActiveStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateActiveStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateActiveStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateActiveStatusResponseValidationError) ErrorName() string {
	return "UpdateActiveStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateActiveStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateActiveStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateActiveStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateActiveStatusResponseValidationError{}

// Validate checks the field values on UpdateVerifiedStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVerifiedStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVerifiedStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVerifiedStatusRequestMultiError, or nil if none found.
func (m *UpdateVerifiedStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVerifiedStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = UpdateVerifiedStatusRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	// no validation rules for IsVerified

	if len(errors) > 0 {
		return UpdateVerifiedStatusRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateVerifiedStatusRequest) _validateUuid(uuid string) error {
	if matched := _oauth_user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateVerifiedStatusRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateVerifiedStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateVerifiedStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVerifiedStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVerifiedStatusRequestMultiError) AllErrors() []error { return m }

// UpdateVerifiedStatusRequestValidationError is the validation error returned
// by UpdateVerifiedStatusRequest.Validate if the designated constraints
// aren't met.
type UpdateVerifiedStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVerifiedStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVerifiedStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVerifiedStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVerifiedStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVerifiedStatusRequestValidationError) ErrorName() string {
	return "UpdateVerifiedStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVerifiedStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVerifiedStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVerifiedStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVerifiedStatusRequestValidationError{}

// Validate checks the field values on UpdateVerifiedStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVerifiedStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVerifiedStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVerifiedStatusResponseMultiError, or nil if none found.
func (m *UpdateVerifiedStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVerifiedStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVerifiedStatusResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVerifiedStatusResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVerifiedStatusResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateVerifiedStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateVerifiedStatusResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateVerifiedStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateVerifiedStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVerifiedStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVerifiedStatusResponseMultiError) AllErrors() []error { return m }

// UpdateVerifiedStatusResponseValidationError is the validation error returned
// by UpdateVerifiedStatusResponse.Validate if the designated constraints
// aren't met.
type UpdateVerifiedStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVerifiedStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVerifiedStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVerifiedStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVerifiedStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVerifiedStatusResponseValidationError) ErrorName() string {
	return "UpdateVerifiedStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVerifiedStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVerifiedStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVerifiedStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVerifiedStatusResponseValidationError{}
