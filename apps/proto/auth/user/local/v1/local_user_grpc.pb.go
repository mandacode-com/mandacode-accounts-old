// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: auth/user/local/v1/local_user.proto

package localuserv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LocalUserService_GetUser_FullMethodName              = "/auth.user.local.v1.LocalUserService/GetUser"
	LocalUserService_EnrollUser_FullMethodName           = "/auth.user.local.v1.LocalUserService/EnrollUser"
	LocalUserService_DeleteUser_FullMethodName           = "/auth.user.local.v1.LocalUserService/DeleteUser"
	LocalUserService_UpdateEmail_FullMethodName          = "/auth.user.local.v1.LocalUserService/UpdateEmail"
	LocalUserService_UpdatePassword_FullMethodName       = "/auth.user.local.v1.LocalUserService/UpdatePassword"
	LocalUserService_UpdateActiveStatus_FullMethodName   = "/auth.user.local.v1.LocalUserService/UpdateActiveStatus"
	LocalUserService_UpdateVerifiedStatus_FullMethodName = "/auth.user.local.v1.LocalUserService/UpdateVerifiedStatus"
)

// LocalUserServiceClient is the client API for LocalUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalUserServiceClient interface {
	// Gets a local user by user ID
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Enrolls a local user with email and password
	EnrollUser(ctx context.Context, in *EnrollUserRequest, opts ...grpc.CallOption) (*EnrollUserResponse, error)
	// Deletes a local user by user ID
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// Updates a local user's email
	UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*UpdateEmailResponse, error)
	// Updates a local user's password
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error)
	// Updates a local user's active status
	UpdateActiveStatus(ctx context.Context, in *UpdateActiveStatusRequest, opts ...grpc.CallOption) (*UpdateActiveStatusResponse, error)
	// Updates a local user's verified status
	UpdateVerifiedStatus(ctx context.Context, in *UpdateVerifiedStatusRequest, opts ...grpc.CallOption) (*UpdateVerifiedStatusResponse, error)
}

type localUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalUserServiceClient(cc grpc.ClientConnInterface) LocalUserServiceClient {
	return &localUserServiceClient{cc}
}

func (c *localUserServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, LocalUserService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localUserServiceClient) EnrollUser(ctx context.Context, in *EnrollUserRequest, opts ...grpc.CallOption) (*EnrollUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnrollUserResponse)
	err := c.cc.Invoke(ctx, LocalUserService_EnrollUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localUserServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, LocalUserService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localUserServiceClient) UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*UpdateEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEmailResponse)
	err := c.cc.Invoke(ctx, LocalUserService_UpdateEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localUserServiceClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePasswordResponse)
	err := c.cc.Invoke(ctx, LocalUserService_UpdatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localUserServiceClient) UpdateActiveStatus(ctx context.Context, in *UpdateActiveStatusRequest, opts ...grpc.CallOption) (*UpdateActiveStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateActiveStatusResponse)
	err := c.cc.Invoke(ctx, LocalUserService_UpdateActiveStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localUserServiceClient) UpdateVerifiedStatus(ctx context.Context, in *UpdateVerifiedStatusRequest, opts ...grpc.CallOption) (*UpdateVerifiedStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVerifiedStatusResponse)
	err := c.cc.Invoke(ctx, LocalUserService_UpdateVerifiedStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalUserServiceServer is the server API for LocalUserService service.
// All implementations must embed UnimplementedLocalUserServiceServer
// for forward compatibility.
type LocalUserServiceServer interface {
	// Gets a local user by user ID
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Enrolls a local user with email and password
	EnrollUser(context.Context, *EnrollUserRequest) (*EnrollUserResponse, error)
	// Deletes a local user by user ID
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// Updates a local user's email
	UpdateEmail(context.Context, *UpdateEmailRequest) (*UpdateEmailResponse, error)
	// Updates a local user's password
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error)
	// Updates a local user's active status
	UpdateActiveStatus(context.Context, *UpdateActiveStatusRequest) (*UpdateActiveStatusResponse, error)
	// Updates a local user's verified status
	UpdateVerifiedStatus(context.Context, *UpdateVerifiedStatusRequest) (*UpdateVerifiedStatusResponse, error)
	mustEmbedUnimplementedLocalUserServiceServer()
}

// UnimplementedLocalUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLocalUserServiceServer struct{}

func (UnimplementedLocalUserServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedLocalUserServiceServer) EnrollUser(context.Context, *EnrollUserRequest) (*EnrollUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollUser not implemented")
}
func (UnimplementedLocalUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedLocalUserServiceServer) UpdateEmail(context.Context, *UpdateEmailRequest) (*UpdateEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmail not implemented")
}
func (UnimplementedLocalUserServiceServer) UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedLocalUserServiceServer) UpdateActiveStatus(context.Context, *UpdateActiveStatusRequest) (*UpdateActiveStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActiveStatus not implemented")
}
func (UnimplementedLocalUserServiceServer) UpdateVerifiedStatus(context.Context, *UpdateVerifiedStatusRequest) (*UpdateVerifiedStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVerifiedStatus not implemented")
}
func (UnimplementedLocalUserServiceServer) mustEmbedUnimplementedLocalUserServiceServer() {}
func (UnimplementedLocalUserServiceServer) testEmbeddedByValue()                          {}

// UnsafeLocalUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalUserServiceServer will
// result in compilation errors.
type UnsafeLocalUserServiceServer interface {
	mustEmbedUnimplementedLocalUserServiceServer()
}

func RegisterLocalUserServiceServer(s grpc.ServiceRegistrar, srv LocalUserServiceServer) {
	// If the following call pancis, it indicates UnimplementedLocalUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LocalUserService_ServiceDesc, srv)
}

func _LocalUserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalUserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalUserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalUserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalUserService_EnrollUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalUserServiceServer).EnrollUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalUserService_EnrollUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalUserServiceServer).EnrollUser(ctx, req.(*EnrollUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalUserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalUserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalUserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalUserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalUserService_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalUserServiceServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalUserService_UpdateEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalUserServiceServer).UpdateEmail(ctx, req.(*UpdateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalUserService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalUserServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalUserService_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalUserServiceServer).UpdatePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalUserService_UpdateActiveStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActiveStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalUserServiceServer).UpdateActiveStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalUserService_UpdateActiveStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalUserServiceServer).UpdateActiveStatus(ctx, req.(*UpdateActiveStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalUserService_UpdateVerifiedStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVerifiedStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalUserServiceServer).UpdateVerifiedStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalUserService_UpdateVerifiedStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalUserServiceServer).UpdateVerifiedStatus(ctx, req.(*UpdateVerifiedStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalUserService_ServiceDesc is the grpc.ServiceDesc for LocalUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.user.local.v1.LocalUserService",
	HandlerType: (*LocalUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _LocalUserService_GetUser_Handler,
		},
		{
			MethodName: "EnrollUser",
			Handler:    _LocalUserService_EnrollUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _LocalUserService_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _LocalUserService_UpdateEmail_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _LocalUserService_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateActiveStatus",
			Handler:    _LocalUserService_UpdateActiveStatus_Handler,
		},
		{
			MethodName: "UpdateVerifiedStatus",
			Handler:    _LocalUserService_UpdateVerifiedStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/user/local/v1/local_user.proto",
}
