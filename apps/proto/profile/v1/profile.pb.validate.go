// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: profile/v1/profile.proto

package profilev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _profile_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Profile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Profile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Profile with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProfileMultiError, or nil if none found.
func (m *Profile) ValidateAll() error {
	return m.validate(true)
}

func (m *Profile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ProfileValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Email != nil {

		if utf8.RuneCountInString(m.GetEmail()) < 1 {
			err := ProfileValidationError{
				field:  "Email",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DisplayName != nil {

		if utf8.RuneCountInString(m.GetDisplayName()) < 1 {
			err := ProfileValidationError{
				field:  "DisplayName",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Bio != nil {

		if utf8.RuneCountInString(m.GetBio()) < 0 {
			err := ProfileValidationError{
				field:  "Bio",
				reason: "value length must be at least 0 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.AvatarUrl != nil {

		if utf8.RuneCountInString(m.GetAvatarUrl()) < 0 {
			err := ProfileValidationError{
				field:  "AvatarUrl",
				reason: "value length must be at least 0 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ProfileMultiError(errors)
	}

	return nil
}

func (m *Profile) _validateUuid(uuid string) error {
	if matched := _profile_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ProfileMultiError is an error wrapping multiple validation errors returned
// by Profile.ValidateAll() if the designated constraints aren't met.
type ProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileMultiError) AllErrors() []error { return m }

// ProfileValidationError is the validation error returned by Profile.Validate
// if the designated constraints aren't met.
type ProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileValidationError) ErrorName() string { return "ProfileValidationError" }

// Error satisfies the builtin error interface
func (e ProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileValidationError{}

// Validate checks the field values on CreateProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProfileRequestMultiError, or nil if none found.
func (m *CreateProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = CreateProfileRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Email != nil {

		if err := m._validateEmail(m.GetEmail()); err != nil {
			err = CreateProfileRequestValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DisplayName != nil {

		if utf8.RuneCountInString(m.GetDisplayName()) < 1 {
			err := CreateProfileRequestValidationError{
				field:  "DisplayName",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Bio != nil {

		if utf8.RuneCountInString(m.GetBio()) < 0 {
			err := CreateProfileRequestValidationError{
				field:  "Bio",
				reason: "value length must be at least 0 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.AvatarUrl != nil {

		if utf8.RuneCountInString(m.GetAvatarUrl()) < 0 {
			err := CreateProfileRequestValidationError{
				field:  "AvatarUrl",
				reason: "value length must be at least 0 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateProfileRequestMultiError(errors)
	}

	return nil
}

func (m *CreateProfileRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateProfileRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

func (m *CreateProfileRequest) _validateUuid(uuid string) error {
	if matched := _profile_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateProfileRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProfileRequestMultiError) AllErrors() []error { return m }

// CreateProfileRequestValidationError is the validation error returned by
// CreateProfileRequest.Validate if the designated constraints aren't met.
type CreateProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProfileRequestValidationError) ErrorName() string {
	return "CreateProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProfileRequestValidationError{}

// Validate checks the field values on CreateProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProfileResponseMultiError, or nil if none found.
func (m *CreateProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProfileResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProfileResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProfileResponseMultiError(errors)
	}

	return nil
}

// CreateProfileResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProfileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProfileResponseMultiError) AllErrors() []error { return m }

// CreateProfileResponseValidationError is the validation error returned by
// CreateProfileResponse.Validate if the designated constraints aren't met.
type CreateProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProfileResponseValidationError) ErrorName() string {
	return "CreateProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProfileResponseValidationError{}

// Validate checks the field values on DeleteProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProfileRequestMultiError, or nil if none found.
func (m *DeleteProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteProfileRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteProfileRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteProfileRequest) _validateUuid(uuid string) error {
	if matched := _profile_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteProfileRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProfileRequestMultiError) AllErrors() []error { return m }

// DeleteProfileRequestValidationError is the validation error returned by
// DeleteProfileRequest.Validate if the designated constraints aren't met.
type DeleteProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProfileRequestValidationError) ErrorName() string {
	return "DeleteProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProfileRequestValidationError{}

// Validate checks the field values on DeleteProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProfileResponseMultiError, or nil if none found.
func (m *DeleteProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteProfileResponseValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteProfileResponseValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteProfileResponseValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteProfileResponseValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteProfileResponseMultiError(errors)
	}

	return nil
}

func (m *DeleteProfileResponse) _validateUuid(uuid string) error {
	if matched := _profile_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteProfileResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProfileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProfileResponseMultiError) AllErrors() []error { return m }

// DeleteProfileResponseValidationError is the validation error returned by
// DeleteProfileResponse.Validate if the designated constraints aren't met.
type DeleteProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProfileResponseValidationError) ErrorName() string {
	return "DeleteProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProfileResponseValidationError{}
