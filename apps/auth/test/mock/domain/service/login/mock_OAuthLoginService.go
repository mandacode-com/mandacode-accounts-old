// Code generated by MockGen. DO NOT EDIT.
// Source: mandacode.com/accounts/auth/internal/domain/service/login (interfaces: OAuthLoginService)
//
// Generated by this command:
//
//	mockgen mandacode.com/accounts/auth/internal/domain/service/login OAuthLoginService
//

// Package mock_logindomain is a generated GoMock package.
package mock_logindomain

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	oauthuser "mandacode.com/accounts/auth/ent/oauthuser"
	dto "mandacode.com/accounts/auth/internal/domain/dto"
)

// MockOAuthLoginService is a mock of OAuthLoginService interface.
type MockOAuthLoginService struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthLoginServiceMockRecorder
	isgomock struct{}
}

// MockOAuthLoginServiceMockRecorder is the mock recorder for MockOAuthLoginService.
type MockOAuthLoginServiceMockRecorder struct {
	mock *MockOAuthLoginService
}

// NewMockOAuthLoginService creates a new mock instance.
func NewMockOAuthLoginService(ctrl *gomock.Controller) *MockOAuthLoginService {
	mock := &MockOAuthLoginService{ctrl: ctrl}
	mock.recorder = &MockOAuthLoginServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthLoginService) EXPECT() *MockOAuthLoginServiceMockRecorder {
	return m.recorder
}

// LoginOAuthUser mocks base method.
func (m *MockOAuthLoginService) LoginOAuthUser(ctx context.Context, provider oauthuser.Provider, providerID string) (*dto.OAuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginOAuthUser", ctx, provider, providerID)
	ret0, _ := ret[0].(*dto.OAuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginOAuthUser indicates an expected call of LoginOAuthUser.
func (mr *MockOAuthLoginServiceMockRecorder) LoginOAuthUser(ctx, provider, providerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginOAuthUser", reflect.TypeOf((*MockOAuthLoginService)(nil).LoginOAuthUser), ctx, provider, providerID)
}
