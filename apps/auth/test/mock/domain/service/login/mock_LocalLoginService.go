// Code generated by MockGen. DO NOT EDIT.
// Source: mandacode.com/accounts/auth/internal/domain/service/login (interfaces: LocalLoginService)
//
// Generated by this command:
//
//	mockgen mandacode.com/accounts/auth/internal/domain/service/login LocalLoginService
//

// Package mock_logindomain is a generated GoMock package.
package mock_logindomain

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	dto "mandacode.com/accounts/auth/internal/domain/dto"
)

// MockLocalLoginService is a mock of LocalLoginService interface.
type MockLocalLoginService struct {
	ctrl     *gomock.Controller
	recorder *MockLocalLoginServiceMockRecorder
	isgomock struct{}
}

// MockLocalLoginServiceMockRecorder is the mock recorder for MockLocalLoginService.
type MockLocalLoginServiceMockRecorder struct {
	mock *MockLocalLoginService
}

// NewMockLocalLoginService creates a new mock instance.
func NewMockLocalLoginService(ctrl *gomock.Controller) *MockLocalLoginService {
	mock := &MockLocalLoginService{ctrl: ctrl}
	mock.recorder = &MockLocalLoginServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalLoginService) EXPECT() *MockLocalLoginServiceMockRecorder {
	return m.recorder
}

// LoginLocalUser mocks base method.
func (m *MockLocalLoginService) LoginLocalUser(ctx context.Context, email, password string) (*dto.LocalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginLocalUser", ctx, email, password)
	ret0, _ := ret[0].(*dto.LocalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginLocalUser indicates an expected call of LoginLocalUser.
func (mr *MockLocalLoginServiceMockRecorder) LoginLocalUser(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginLocalUser", reflect.TypeOf((*MockLocalLoginService)(nil).LoginLocalUser), ctx, email, password)
}
