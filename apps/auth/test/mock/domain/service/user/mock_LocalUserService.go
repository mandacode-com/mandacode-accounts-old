// Code generated by MockGen. DO NOT EDIT.
// Source: mandacode.com/accounts/auth/internal/domain/service/user (interfaces: LocalUserService)
//
// Generated by this command:
//
//	mockgen mandacode.com/accounts/auth/internal/domain/service/user LocalUserService
//

// Package mock_userdomain is a generated GoMock package.
package mock_userdomain

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	dto "mandacode.com/accounts/auth/internal/domain/dto"
)

// MockLocalUserService is a mock of LocalUserService interface.
type MockLocalUserService struct {
	ctrl     *gomock.Controller
	recorder *MockLocalUserServiceMockRecorder
	isgomock struct{}
}

// MockLocalUserServiceMockRecorder is the mock recorder for MockLocalUserService.
type MockLocalUserServiceMockRecorder struct {
	mock *MockLocalUserService
}

// NewMockLocalUserService creates a new mock instance.
func NewMockLocalUserService(ctrl *gomock.Controller) *MockLocalUserService {
	mock := &MockLocalUserService{ctrl: ctrl}
	mock.recorder = &MockLocalUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalUserService) EXPECT() *MockLocalUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockLocalUserService) CreateUser(userID uuid.UUID, email, password string, isActive, isVerified *bool) (*dto.LocalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", userID, email, password, isActive, isVerified)
	ret0, _ := ret[0].(*dto.LocalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockLocalUserServiceMockRecorder) CreateUser(userID, email, password, isActive, isVerified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockLocalUserService)(nil).CreateUser), userID, email, password, isActive, isVerified)
}

// DeleteUser mocks base method.
func (m *MockLocalUserService) DeleteUser(userID uuid.UUID) (*dto.LocalDeletedUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userID)
	ret0, _ := ret[0].(*dto.LocalDeletedUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockLocalUserServiceMockRecorder) DeleteUser(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockLocalUserService)(nil).DeleteUser), userID)
}

// GetUserByEmail mocks base method.
func (m *MockLocalUserService) GetUserByEmail(email string) (*dto.LocalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*dto.LocalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockLocalUserServiceMockRecorder) GetUserByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockLocalUserService)(nil).GetUserByEmail), email)
}

// GetUserByID mocks base method.
func (m *MockLocalUserService) GetUserByID(userID uuid.UUID) (*dto.LocalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(*dto.LocalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockLocalUserServiceMockRecorder) GetUserByID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockLocalUserService)(nil).GetUserByID), userID)
}

// UpdateActiveStatus mocks base method.
func (m *MockLocalUserService) UpdateActiveStatus(userID uuid.UUID, isActive bool) (*dto.LocalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActiveStatus", userID, isActive)
	ret0, _ := ret[0].(*dto.LocalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActiveStatus indicates an expected call of UpdateActiveStatus.
func (mr *MockLocalUserServiceMockRecorder) UpdateActiveStatus(userID, isActive any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActiveStatus", reflect.TypeOf((*MockLocalUserService)(nil).UpdateActiveStatus), userID, isActive)
}

// UpdateEmail mocks base method.
func (m *MockLocalUserService) UpdateEmail(userID uuid.UUID, newEmail string) (*dto.LocalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", userID, newEmail)
	ret0, _ := ret[0].(*dto.LocalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmail indicates an expected call of UpdateEmail.
func (mr *MockLocalUserServiceMockRecorder) UpdateEmail(userID, newEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*MockLocalUserService)(nil).UpdateEmail), userID, newEmail)
}

// UpdatePassword mocks base method.
func (m *MockLocalUserService) UpdatePassword(userID uuid.UUID, currentPassword, newPassword string) (*dto.LocalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", userID, currentPassword, newPassword)
	ret0, _ := ret[0].(*dto.LocalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockLocalUserServiceMockRecorder) UpdatePassword(userID, currentPassword, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockLocalUserService)(nil).UpdatePassword), userID, currentPassword, newPassword)
}

// UpdateVerifiedStatus mocks base method.
func (m *MockLocalUserService) UpdateVerifiedStatus(userID uuid.UUID, isVerified bool) (*dto.LocalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifiedStatus", userID, isVerified)
	ret0, _ := ret[0].(*dto.LocalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerifiedStatus indicates an expected call of UpdateVerifiedStatus.
func (mr *MockLocalUserServiceMockRecorder) UpdateVerifiedStatus(userID, isVerified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifiedStatus", reflect.TypeOf((*MockLocalUserService)(nil).UpdateVerifiedStatus), userID, isVerified)
}
