// Code generated by MockGen. DO NOT EDIT.
// Source: mandacode.com/accounts/auth/internal/domain/service/user (interfaces: OAuthUserService)
//
// Generated by this command:
//
//	mockgen mandacode.com/accounts/auth/internal/domain/service/user OAuthUserService
//

// Package mock_userdomain is a generated GoMock package.
package mock_userdomain

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	oauthuser "mandacode.com/accounts/auth/ent/oauthuser"
	dto "mandacode.com/accounts/auth/internal/domain/dto"
)

// MockOAuthUserService is a mock of OAuthUserService interface.
type MockOAuthUserService struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthUserServiceMockRecorder
	isgomock struct{}
}

// MockOAuthUserServiceMockRecorder is the mock recorder for MockOAuthUserService.
type MockOAuthUserServiceMockRecorder struct {
	mock *MockOAuthUserService
}

// NewMockOAuthUserService creates a new mock instance.
func NewMockOAuthUserService(ctrl *gomock.Controller) *MockOAuthUserService {
	mock := &MockOAuthUserService{ctrl: ctrl}
	mock.recorder = &MockOAuthUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthUserService) EXPECT() *MockOAuthUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockOAuthUserService) CreateUser(userID uuid.UUID, provider oauthuser.Provider, providerID, accessToken string, isActive, isVerified *bool) (*dto.OAuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", userID, provider, providerID, accessToken, isActive, isVerified)
	ret0, _ := ret[0].(*dto.OAuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockOAuthUserServiceMockRecorder) CreateUser(userID, provider, providerID, accessToken, isActive, isVerified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockOAuthUserService)(nil).CreateUser), userID, provider, providerID, accessToken, isActive, isVerified)
}

// DeleteUser mocks base method.
func (m *MockOAuthUserService) DeleteUser(userID uuid.UUID) (*dto.OAuthDeletedUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userID)
	ret0, _ := ret[0].(*dto.OAuthDeletedUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockOAuthUserServiceMockRecorder) DeleteUser(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockOAuthUserService)(nil).DeleteUser), userID)
}

// DeleteUserByProvider mocks base method.
func (m *MockOAuthUserService) DeleteUserByProvider(userID uuid.UUID, provider oauthuser.Provider) (*dto.OAuthDeletedUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByProvider", userID, provider)
	ret0, _ := ret[0].(*dto.OAuthDeletedUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserByProvider indicates an expected call of DeleteUserByProvider.
func (mr *MockOAuthUserServiceMockRecorder) DeleteUserByProvider(userID, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByProvider", reflect.TypeOf((*MockOAuthUserService)(nil).DeleteUserByProvider), userID, provider)
}

// GetUserByProvider mocks base method.
func (m *MockOAuthUserService) GetUserByProvider(provider oauthuser.Provider, providerID string) (*dto.OAuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByProvider", provider, providerID)
	ret0, _ := ret[0].(*dto.OAuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByProvider indicates an expected call of GetUserByProvider.
func (mr *MockOAuthUserServiceMockRecorder) GetUserByProvider(provider, providerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByProvider", reflect.TypeOf((*MockOAuthUserService)(nil).GetUserByProvider), provider, providerID)
}

// GetUserByUserID mocks base method.
func (m *MockOAuthUserService) GetUserByUserID(userID uuid.UUID, provider oauthuser.Provider) (*dto.OAuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserID", userID, provider)
	ret0, _ := ret[0].(*dto.OAuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserID indicates an expected call of GetUserByUserID.
func (mr *MockOAuthUserServiceMockRecorder) GetUserByUserID(userID, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserID", reflect.TypeOf((*MockOAuthUserService)(nil).GetUserByUserID), userID, provider)
}

// UpdateActiveStatus mocks base method.
func (m *MockOAuthUserService) UpdateActiveStatus(userID uuid.UUID, provider oauthuser.Provider, isActive bool) (*dto.OAuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActiveStatus", userID, provider, isActive)
	ret0, _ := ret[0].(*dto.OAuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActiveStatus indicates an expected call of UpdateActiveStatus.
func (mr *MockOAuthUserServiceMockRecorder) UpdateActiveStatus(userID, provider, isActive any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActiveStatus", reflect.TypeOf((*MockOAuthUserService)(nil).UpdateActiveStatus), userID, provider, isActive)
}

// UpdateUserBase mocks base method.
func (m *MockOAuthUserService) UpdateUserBase(userID uuid.UUID, provider oauthuser.Provider, providerID, email string, isVerified bool) (*dto.OAuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBase", userID, provider, providerID, email, isVerified)
	ret0, _ := ret[0].(*dto.OAuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserBase indicates an expected call of UpdateUserBase.
func (mr *MockOAuthUserServiceMockRecorder) UpdateUserBase(userID, provider, providerID, email, isVerified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBase", reflect.TypeOf((*MockOAuthUserService)(nil).UpdateUserBase), userID, provider, providerID, email, isVerified)
}

// UpdateVerifiedStatus mocks base method.
func (m *MockOAuthUserService) UpdateVerifiedStatus(userID uuid.UUID, provider oauthuser.Provider, isVerified bool) (*dto.OAuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifiedStatus", userID, provider, isVerified)
	ret0, _ := ret[0].(*dto.OAuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerifiedStatus indicates an expected call of UpdateVerifiedStatus.
func (mr *MockOAuthUserServiceMockRecorder) UpdateVerifiedStatus(userID, provider, isVerified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifiedStatus", reflect.TypeOf((*MockOAuthUserService)(nil).UpdateVerifiedStatus), userID, provider, isVerified)
}
