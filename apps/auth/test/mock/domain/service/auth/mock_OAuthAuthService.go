// Code generated by MockGen. DO NOT EDIT.
// Source: mandacode.com/accounts/auth/internal/domain/service/auth (interfaces: OAuthAuthService)
//
// Generated by this command:
//
//	mockgen mandacode.com/accounts/auth/internal/domain/service/auth OAuthAuthService
//

// Package mock_authdomain is a generated GoMock package.
package mock_authdomain

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	oauthuser "mandacode.com/accounts/auth/ent/oauthuser"
	dto "mandacode.com/accounts/auth/internal/domain/dto"
)

// MockOAuthAuthService is a mock of OAuthAuthService interface.
type MockOAuthAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthAuthServiceMockRecorder
	isgomock struct{}
}

// MockOAuthAuthServiceMockRecorder is the mock recorder for MockOAuthAuthService.
type MockOAuthAuthServiceMockRecorder struct {
	mock *MockOAuthAuthService
}

// NewMockOAuthAuthService creates a new mock instance.
func NewMockOAuthAuthService(ctrl *gomock.Controller) *MockOAuthAuthService {
	mock := &MockOAuthAuthService{ctrl: ctrl}
	mock.recorder = &MockOAuthAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthAuthService) EXPECT() *MockOAuthAuthServiceMockRecorder {
	return m.recorder
}

// LoginOAuthUser mocks base method.
func (m *MockOAuthAuthService) LoginOAuthUser(ctx context.Context, provider oauthuser.Provider, code string) (*dto.OAuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginOAuthUser", ctx, provider, code)
	ret0, _ := ret[0].(*dto.OAuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginOAuthUser indicates an expected call of LoginOAuthUser.
func (mr *MockOAuthAuthServiceMockRecorder) LoginOAuthUser(ctx, provider, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginOAuthUser", reflect.TypeOf((*MockOAuthAuthService)(nil).LoginOAuthUser), ctx, provider, code)
}
