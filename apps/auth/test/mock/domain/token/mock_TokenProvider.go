// Code generated by MockGen. DO NOT EDIT.
// Source: mandacode.com/accounts/auth/internal/domain/token (interfaces: TokenProvider)
//
// Generated by this command:
//
//	mockgen mandacode.com/accounts/auth/internal/domain/token TokenProvider
//

// Package mock_tokendomain is a generated GoMock package.
package mock_tokendomain

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTokenProvider is a mock of TokenProvider interface.
type MockTokenProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTokenProviderMockRecorder
	isgomock struct{}
}

// MockTokenProviderMockRecorder is the mock recorder for MockTokenProvider.
type MockTokenProviderMockRecorder struct {
	mock *MockTokenProvider
}

// NewMockTokenProvider creates a new mock instance.
func NewMockTokenProvider(ctrl *gomock.Controller) *MockTokenProvider {
	mock := &MockTokenProvider{ctrl: ctrl}
	mock.recorder = &MockTokenProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenProvider) EXPECT() *MockTokenProviderMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockTokenProvider) GenerateAccessToken(ctx context.Context, userID string) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockTokenProviderMockRecorder) GenerateAccessToken(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockTokenProvider)(nil).GenerateAccessToken), ctx, userID)
}

// GenerateEmailVerificationToken mocks base method.
func (m *MockTokenProvider) GenerateEmailVerificationToken(ctx context.Context, userID, email, code string) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateEmailVerificationToken", ctx, userID, email, code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateEmailVerificationToken indicates an expected call of GenerateEmailVerificationToken.
func (mr *MockTokenProviderMockRecorder) GenerateEmailVerificationToken(ctx, userID, email, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateEmailVerificationToken", reflect.TypeOf((*MockTokenProvider)(nil).GenerateEmailVerificationToken), ctx, userID, email, code)
}

// GenerateRefreshToken mocks base method.
func (m *MockTokenProvider) GenerateRefreshToken(ctx context.Context, userID string) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockTokenProviderMockRecorder) GenerateRefreshToken(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockTokenProvider)(nil).GenerateRefreshToken), ctx, userID)
}

// VerifyAccessToken mocks base method.
func (m *MockTokenProvider) VerifyAccessToken(ctx context.Context, token string) (bool, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAccessToken", ctx, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VerifyAccessToken indicates an expected call of VerifyAccessToken.
func (mr *MockTokenProviderMockRecorder) VerifyAccessToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAccessToken", reflect.TypeOf((*MockTokenProvider)(nil).VerifyAccessToken), ctx, token)
}

// VerifyEmailVerificationToken mocks base method.
func (m *MockTokenProvider) VerifyEmailVerificationToken(ctx context.Context, token string) (bool, *string, *string, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmailVerificationToken", ctx, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(*string)
	ret3, _ := ret[3].(*string)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// VerifyEmailVerificationToken indicates an expected call of VerifyEmailVerificationToken.
func (mr *MockTokenProviderMockRecorder) VerifyEmailVerificationToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmailVerificationToken", reflect.TypeOf((*MockTokenProvider)(nil).VerifyEmailVerificationToken), ctx, token)
}

// VerifyRefreshToken mocks base method.
func (m *MockTokenProvider) VerifyRefreshToken(ctx context.Context, token string) (bool, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRefreshToken", ctx, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VerifyRefreshToken indicates an expected call of VerifyRefreshToken.
func (mr *MockTokenProviderMockRecorder) VerifyRefreshToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRefreshToken", reflect.TypeOf((*MockTokenProvider)(nil).VerifyRefreshToken), ctx, token)
}
