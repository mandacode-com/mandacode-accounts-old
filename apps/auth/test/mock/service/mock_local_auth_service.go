// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/service/auth (interfaces: LocalAuthService)
//
// Generated by this command:
//
//	mockgen ./internal/domain/service/auth LocalAuthService
//

// Package mock_authdomain is a generated GoMock package.
package mock_authdomain

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	dto "mandacode.com/accounts/auth/internal/domain/dto"
)

// MockLocalAuthService is a mock of LocalAuthService interface.
type MockLocalAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockLocalAuthServiceMockRecorder
	isgomock struct{}
}

// MockLocalAuthServiceMockRecorder is the mock recorder for MockLocalAuthService.
type MockLocalAuthServiceMockRecorder struct {
	mock *MockLocalAuthService
}

// NewMockLocalAuthService creates a new mock instance.
func NewMockLocalAuthService(ctrl *gomock.Controller) *MockLocalAuthService {
	mock := &MockLocalAuthService{ctrl: ctrl}
	mock.recorder = &MockLocalAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalAuthService) EXPECT() *MockLocalAuthServiceMockRecorder {
	return m.recorder
}

// LoginLocalUser mocks base method.
func (m *MockLocalAuthService) LoginLocalUser(ctx context.Context, email, password string) (*dto.LocalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginLocalUser", ctx, email, password)
	ret0, _ := ret[0].(*dto.LocalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginLocalUser indicates an expected call of LoginLocalUser.
func (mr *MockLocalAuthServiceMockRecorder) LoginLocalUser(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginLocalUser", reflect.TypeOf((*MockLocalAuthService)(nil).LoginLocalUser), ctx, email, password)
}
