// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth/oauth/v1/oauth.proto

package oauthauthv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	providerv1 "mandacode.com/accounts/auth/proto/common/provider/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = providerv1.OAuthProvider(0)
)

// define the regex for a UUID once up-front
var _oauth_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on OAuthLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OAuthLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OAuthLoginRequestMultiError, or nil if none found.
func (m *OAuthLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := OAuthLoginRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OAuthLoginRequestMultiError(errors)
	}

	return nil
}

// OAuthLoginRequestMultiError is an error wrapping multiple validation errors
// returned by OAuthLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type OAuthLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthLoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthLoginRequestMultiError) AllErrors() []error { return m }

// OAuthLoginRequestValidationError is the validation error returned by
// OAuthLoginRequest.Validate if the designated constraints aren't met.
type OAuthLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthLoginRequestValidationError) ErrorName() string {
	return "OAuthLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OAuthLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthLoginRequestValidationError{}

// Validate checks the field values on OAuthLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OAuthLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OAuthLoginResponseMultiError, or nil if none found.
func (m *OAuthLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = OAuthLoginResponseValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := OAuthLoginResponseValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRefreshToken()) < 1 {
		err := OAuthLoginResponseValidationError{
			field:  "RefreshToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OAuthLoginResponseMultiError(errors)
	}

	return nil
}

func (m *OAuthLoginResponse) _validateUuid(uuid string) error {
	if matched := _oauth_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OAuthLoginResponseMultiError is an error wrapping multiple validation errors
// returned by OAuthLoginResponse.ValidateAll() if the designated constraints
// aren't met.
type OAuthLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthLoginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthLoginResponseMultiError) AllErrors() []error { return m }

// OAuthLoginResponseValidationError is the validation error returned by
// OAuthLoginResponse.Validate if the designated constraints aren't met.
type OAuthLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthLoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthLoginResponseValidationError) ErrorName() string {
	return "OAuthLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OAuthLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthLoginResponseValidationError{}
