syntax = "proto3";

package user.oauth.v1;

import "common/provider/v1/provider.proto";
import "third_party/validate/validate.proto";

option go_package = "mandacode.com/accounts/auth/proto/user/oauth/v1;oauthuserv1";

service OAuthUserService {
  // Enrolls a user with OAuth provider
  rpc EnrollUser(EnrollUserRequest) returns (EnrollUserResponse);

  // Deletes a user by user ID
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);

  // Updates a user's OAuth information
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
}

//
// Enroll OAuth user messages
//
message EnrollUserRequest {
  string user_id = 1 [ (validate.rules).string = {uuid : true} ];
  string access_token = 2
      [ (validate.rules).string = {min_len : 1} ]; // OAuth access token
  common.provider.v1.OAuthProvider provider = 3;   // OAuth provider enum
  optional bool is_active = 4;
  optional bool is_verified = 5;
}
message EnrollUserResponse {
  bool success = 1; // Indicates if the enrollment was successful
}

//
// Delete OAuth user messages
//
message DeleteUserRequest {
  string user_id = 1 [ (validate.rules).string = {uuid : true} ];
  optional common.provider.v1.OAuthProvider provider = 2; // OAuth provider enum
}
message DeleteUserResponse {
  bool success = 1; // Indicates if the deletion was successful
}

//
// Update OAuth user messages
//
message UpdateUserRequest {
  string user_id = 1 [ (validate.rules).string = {uuid : true} ];
  optional common.provider.v1.OAuthProvider provider = 2; // OAuth provider enum
  optional string provider_id = 3
      [ (validate.rules).string = {min_len : 1} ]; // OAuth provider ID
  optional string email = 4
      [ (validate.rules).string = {email : true} ]; // User's email address
  optional bool is_active = 5;
  optional bool is_verified = 6;
}
message UpdateUserResponse {
  bool success = 1; // Indicates if the update was successful
}
