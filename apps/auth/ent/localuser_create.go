// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"mandacode.com/accounts/auth/ent/localuser"
)

// LocalUserCreate is the builder for creating a LocalUser entity.
type LocalUserCreate struct {
	config
	mutation *LocalUserMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (luc *LocalUserCreate) SetEmail(s string) *LocalUserCreate {
	luc.mutation.SetEmail(s)
	return luc
}

// SetPassword sets the "password" field.
func (luc *LocalUserCreate) SetPassword(s string) *LocalUserCreate {
	luc.mutation.SetPassword(s)
	return luc
}

// SetIsActive sets the "is_active" field.
func (luc *LocalUserCreate) SetIsActive(b bool) *LocalUserCreate {
	luc.mutation.SetIsActive(b)
	return luc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (luc *LocalUserCreate) SetNillableIsActive(b *bool) *LocalUserCreate {
	if b != nil {
		luc.SetIsActive(*b)
	}
	return luc
}

// SetIsVerified sets the "is_verified" field.
func (luc *LocalUserCreate) SetIsVerified(b bool) *LocalUserCreate {
	luc.mutation.SetIsVerified(b)
	return luc
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (luc *LocalUserCreate) SetNillableIsVerified(b *bool) *LocalUserCreate {
	if b != nil {
		luc.SetIsVerified(*b)
	}
	return luc
}

// SetCreatedAt sets the "created_at" field.
func (luc *LocalUserCreate) SetCreatedAt(t time.Time) *LocalUserCreate {
	luc.mutation.SetCreatedAt(t)
	return luc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (luc *LocalUserCreate) SetNillableCreatedAt(t *time.Time) *LocalUserCreate {
	if t != nil {
		luc.SetCreatedAt(*t)
	}
	return luc
}

// SetUpdatedAt sets the "updated_at" field.
func (luc *LocalUserCreate) SetUpdatedAt(t time.Time) *LocalUserCreate {
	luc.mutation.SetUpdatedAt(t)
	return luc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (luc *LocalUserCreate) SetNillableUpdatedAt(t *time.Time) *LocalUserCreate {
	if t != nil {
		luc.SetUpdatedAt(*t)
	}
	return luc
}

// SetID sets the "id" field.
func (luc *LocalUserCreate) SetID(u uuid.UUID) *LocalUserCreate {
	luc.mutation.SetID(u)
	return luc
}

// Mutation returns the LocalUserMutation object of the builder.
func (luc *LocalUserCreate) Mutation() *LocalUserMutation {
	return luc.mutation
}

// Save creates the LocalUser in the database.
func (luc *LocalUserCreate) Save(ctx context.Context) (*LocalUser, error) {
	luc.defaults()
	return withHooks(ctx, luc.sqlSave, luc.mutation, luc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (luc *LocalUserCreate) SaveX(ctx context.Context) *LocalUser {
	v, err := luc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (luc *LocalUserCreate) Exec(ctx context.Context) error {
	_, err := luc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luc *LocalUserCreate) ExecX(ctx context.Context) {
	if err := luc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luc *LocalUserCreate) defaults() {
	if _, ok := luc.mutation.IsActive(); !ok {
		v := localuser.DefaultIsActive
		luc.mutation.SetIsActive(v)
	}
	if _, ok := luc.mutation.IsVerified(); !ok {
		v := localuser.DefaultIsVerified
		luc.mutation.SetIsVerified(v)
	}
	if _, ok := luc.mutation.CreatedAt(); !ok {
		v := localuser.DefaultCreatedAt()
		luc.mutation.SetCreatedAt(v)
	}
	if _, ok := luc.mutation.UpdatedAt(); !ok {
		v := localuser.DefaultUpdatedAt()
		luc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luc *LocalUserCreate) check() error {
	if _, ok := luc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "LocalUser.email"`)}
	}
	if v, ok := luc.mutation.Email(); ok {
		if err := localuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "LocalUser.email": %w`, err)}
		}
	}
	if _, ok := luc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "LocalUser.password"`)}
	}
	if v, ok := luc.mutation.Password(); ok {
		if err := localuser.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "LocalUser.password": %w`, err)}
		}
	}
	if _, ok := luc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "LocalUser.is_active"`)}
	}
	if _, ok := luc.mutation.IsVerified(); !ok {
		return &ValidationError{Name: "is_verified", err: errors.New(`ent: missing required field "LocalUser.is_verified"`)}
	}
	if _, ok := luc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LocalUser.created_at"`)}
	}
	if _, ok := luc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LocalUser.updated_at"`)}
	}
	return nil
}

func (luc *LocalUserCreate) sqlSave(ctx context.Context) (*LocalUser, error) {
	if err := luc.check(); err != nil {
		return nil, err
	}
	_node, _spec := luc.createSpec()
	if err := sqlgraph.CreateNode(ctx, luc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	luc.mutation.id = &_node.ID
	luc.mutation.done = true
	return _node, nil
}

func (luc *LocalUserCreate) createSpec() (*LocalUser, *sqlgraph.CreateSpec) {
	var (
		_node = &LocalUser{config: luc.config}
		_spec = sqlgraph.NewCreateSpec(localuser.Table, sqlgraph.NewFieldSpec(localuser.FieldID, field.TypeUUID))
	)
	_spec.Schema = luc.schemaConfig.LocalUser
	if id, ok := luc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := luc.mutation.Email(); ok {
		_spec.SetField(localuser.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := luc.mutation.Password(); ok {
		_spec.SetField(localuser.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := luc.mutation.IsActive(); ok {
		_spec.SetField(localuser.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := luc.mutation.IsVerified(); ok {
		_spec.SetField(localuser.FieldIsVerified, field.TypeBool, value)
		_node.IsVerified = value
	}
	if value, ok := luc.mutation.CreatedAt(); ok {
		_spec.SetField(localuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := luc.mutation.UpdatedAt(); ok {
		_spec.SetField(localuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// LocalUserCreateBulk is the builder for creating many LocalUser entities in bulk.
type LocalUserCreateBulk struct {
	config
	err      error
	builders []*LocalUserCreate
}

// Save creates the LocalUser entities in the database.
func (lucb *LocalUserCreateBulk) Save(ctx context.Context) ([]*LocalUser, error) {
	if lucb.err != nil {
		return nil, lucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lucb.builders))
	nodes := make([]*LocalUser, len(lucb.builders))
	mutators := make([]Mutator, len(lucb.builders))
	for i := range lucb.builders {
		func(i int, root context.Context) {
			builder := lucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LocalUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lucb *LocalUserCreateBulk) SaveX(ctx context.Context) []*LocalUser {
	v, err := lucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lucb *LocalUserCreateBulk) Exec(ctx context.Context) error {
	_, err := lucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lucb *LocalUserCreateBulk) ExecX(ctx context.Context) {
	if err := lucb.Exec(ctx); err != nil {
		panic(err)
	}
}
