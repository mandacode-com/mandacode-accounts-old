// Code generated by ent, DO NOT EDIT.

package oauthauth

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"mandacode.com/accounts/auth/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldLTE(FieldID, id))
}

// AuthAccountID applies equality check predicate on the "auth_account_id" field. It's identical to AuthAccountIDEQ.
func AuthAccountID(v uuid.UUID) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldAuthAccountID, v))
}

// ProviderID applies equality check predicate on the "provider_id" field. It's identical to ProviderIDEQ.
func ProviderID(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldProviderID, v))
}

// IsVerified applies equality check predicate on the "is_verified" field. It's identical to IsVerifiedEQ.
func IsVerified(v bool) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldIsVerified, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldUpdatedAt, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldEmail, v))
}

// LastLoginAt applies equality check predicate on the "last_login_at" field. It's identical to LastLoginAtEQ.
func LastLoginAt(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldLastLoginAt, v))
}

// LastFailedLoginAt applies equality check predicate on the "last_failed_login_at" field. It's identical to LastFailedLoginAtEQ.
func LastFailedLoginAt(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldLastFailedLoginAt, v))
}

// FailedLoginAttempts applies equality check predicate on the "failed_login_attempts" field. It's identical to FailedLoginAttemptsEQ.
func FailedLoginAttempts(v int) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldFailedLoginAttempts, v))
}

// AuthAccountIDEQ applies the EQ predicate on the "auth_account_id" field.
func AuthAccountIDEQ(v uuid.UUID) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldAuthAccountID, v))
}

// AuthAccountIDNEQ applies the NEQ predicate on the "auth_account_id" field.
func AuthAccountIDNEQ(v uuid.UUID) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNEQ(FieldAuthAccountID, v))
}

// AuthAccountIDIn applies the In predicate on the "auth_account_id" field.
func AuthAccountIDIn(vs ...uuid.UUID) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldIn(FieldAuthAccountID, vs...))
}

// AuthAccountIDNotIn applies the NotIn predicate on the "auth_account_id" field.
func AuthAccountIDNotIn(vs ...uuid.UUID) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNotIn(FieldAuthAccountID, vs...))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v Provider) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v Provider) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...Provider) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...Provider) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNotIn(FieldProvider, vs...))
}

// ProviderIDEQ applies the EQ predicate on the "provider_id" field.
func ProviderIDEQ(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldProviderID, v))
}

// ProviderIDNEQ applies the NEQ predicate on the "provider_id" field.
func ProviderIDNEQ(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNEQ(FieldProviderID, v))
}

// ProviderIDIn applies the In predicate on the "provider_id" field.
func ProviderIDIn(vs ...string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldIn(FieldProviderID, vs...))
}

// ProviderIDNotIn applies the NotIn predicate on the "provider_id" field.
func ProviderIDNotIn(vs ...string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNotIn(FieldProviderID, vs...))
}

// ProviderIDGT applies the GT predicate on the "provider_id" field.
func ProviderIDGT(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldGT(FieldProviderID, v))
}

// ProviderIDGTE applies the GTE predicate on the "provider_id" field.
func ProviderIDGTE(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldGTE(FieldProviderID, v))
}

// ProviderIDLT applies the LT predicate on the "provider_id" field.
func ProviderIDLT(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldLT(FieldProviderID, v))
}

// ProviderIDLTE applies the LTE predicate on the "provider_id" field.
func ProviderIDLTE(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldLTE(FieldProviderID, v))
}

// ProviderIDContains applies the Contains predicate on the "provider_id" field.
func ProviderIDContains(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldContains(FieldProviderID, v))
}

// ProviderIDHasPrefix applies the HasPrefix predicate on the "provider_id" field.
func ProviderIDHasPrefix(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldHasPrefix(FieldProviderID, v))
}

// ProviderIDHasSuffix applies the HasSuffix predicate on the "provider_id" field.
func ProviderIDHasSuffix(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldHasSuffix(FieldProviderID, v))
}

// ProviderIDEqualFold applies the EqualFold predicate on the "provider_id" field.
func ProviderIDEqualFold(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEqualFold(FieldProviderID, v))
}

// ProviderIDContainsFold applies the ContainsFold predicate on the "provider_id" field.
func ProviderIDContainsFold(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldContainsFold(FieldProviderID, v))
}

// IsVerifiedEQ applies the EQ predicate on the "is_verified" field.
func IsVerifiedEQ(v bool) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldIsVerified, v))
}

// IsVerifiedNEQ applies the NEQ predicate on the "is_verified" field.
func IsVerifiedNEQ(v bool) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNEQ(FieldIsVerified, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldLTE(FieldUpdatedAt, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldContainsFold(FieldEmail, v))
}

// LastLoginAtEQ applies the EQ predicate on the "last_login_at" field.
func LastLoginAtEQ(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldLastLoginAt, v))
}

// LastLoginAtNEQ applies the NEQ predicate on the "last_login_at" field.
func LastLoginAtNEQ(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNEQ(FieldLastLoginAt, v))
}

// LastLoginAtIn applies the In predicate on the "last_login_at" field.
func LastLoginAtIn(vs ...time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldIn(FieldLastLoginAt, vs...))
}

// LastLoginAtNotIn applies the NotIn predicate on the "last_login_at" field.
func LastLoginAtNotIn(vs ...time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNotIn(FieldLastLoginAt, vs...))
}

// LastLoginAtGT applies the GT predicate on the "last_login_at" field.
func LastLoginAtGT(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldGT(FieldLastLoginAt, v))
}

// LastLoginAtGTE applies the GTE predicate on the "last_login_at" field.
func LastLoginAtGTE(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldGTE(FieldLastLoginAt, v))
}

// LastLoginAtLT applies the LT predicate on the "last_login_at" field.
func LastLoginAtLT(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldLT(FieldLastLoginAt, v))
}

// LastLoginAtLTE applies the LTE predicate on the "last_login_at" field.
func LastLoginAtLTE(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldLTE(FieldLastLoginAt, v))
}

// LastLoginAtIsNil applies the IsNil predicate on the "last_login_at" field.
func LastLoginAtIsNil() predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldIsNull(FieldLastLoginAt))
}

// LastLoginAtNotNil applies the NotNil predicate on the "last_login_at" field.
func LastLoginAtNotNil() predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNotNull(FieldLastLoginAt))
}

// LastFailedLoginAtEQ applies the EQ predicate on the "last_failed_login_at" field.
func LastFailedLoginAtEQ(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldLastFailedLoginAt, v))
}

// LastFailedLoginAtNEQ applies the NEQ predicate on the "last_failed_login_at" field.
func LastFailedLoginAtNEQ(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNEQ(FieldLastFailedLoginAt, v))
}

// LastFailedLoginAtIn applies the In predicate on the "last_failed_login_at" field.
func LastFailedLoginAtIn(vs ...time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldIn(FieldLastFailedLoginAt, vs...))
}

// LastFailedLoginAtNotIn applies the NotIn predicate on the "last_failed_login_at" field.
func LastFailedLoginAtNotIn(vs ...time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNotIn(FieldLastFailedLoginAt, vs...))
}

// LastFailedLoginAtGT applies the GT predicate on the "last_failed_login_at" field.
func LastFailedLoginAtGT(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldGT(FieldLastFailedLoginAt, v))
}

// LastFailedLoginAtGTE applies the GTE predicate on the "last_failed_login_at" field.
func LastFailedLoginAtGTE(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldGTE(FieldLastFailedLoginAt, v))
}

// LastFailedLoginAtLT applies the LT predicate on the "last_failed_login_at" field.
func LastFailedLoginAtLT(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldLT(FieldLastFailedLoginAt, v))
}

// LastFailedLoginAtLTE applies the LTE predicate on the "last_failed_login_at" field.
func LastFailedLoginAtLTE(v time.Time) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldLTE(FieldLastFailedLoginAt, v))
}

// LastFailedLoginAtIsNil applies the IsNil predicate on the "last_failed_login_at" field.
func LastFailedLoginAtIsNil() predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldIsNull(FieldLastFailedLoginAt))
}

// LastFailedLoginAtNotNil applies the NotNil predicate on the "last_failed_login_at" field.
func LastFailedLoginAtNotNil() predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNotNull(FieldLastFailedLoginAt))
}

// FailedLoginAttemptsEQ applies the EQ predicate on the "failed_login_attempts" field.
func FailedLoginAttemptsEQ(v int) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldEQ(FieldFailedLoginAttempts, v))
}

// FailedLoginAttemptsNEQ applies the NEQ predicate on the "failed_login_attempts" field.
func FailedLoginAttemptsNEQ(v int) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNEQ(FieldFailedLoginAttempts, v))
}

// FailedLoginAttemptsIn applies the In predicate on the "failed_login_attempts" field.
func FailedLoginAttemptsIn(vs ...int) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldIn(FieldFailedLoginAttempts, vs...))
}

// FailedLoginAttemptsNotIn applies the NotIn predicate on the "failed_login_attempts" field.
func FailedLoginAttemptsNotIn(vs ...int) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldNotIn(FieldFailedLoginAttempts, vs...))
}

// FailedLoginAttemptsGT applies the GT predicate on the "failed_login_attempts" field.
func FailedLoginAttemptsGT(v int) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldGT(FieldFailedLoginAttempts, v))
}

// FailedLoginAttemptsGTE applies the GTE predicate on the "failed_login_attempts" field.
func FailedLoginAttemptsGTE(v int) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldGTE(FieldFailedLoginAttempts, v))
}

// FailedLoginAttemptsLT applies the LT predicate on the "failed_login_attempts" field.
func FailedLoginAttemptsLT(v int) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldLT(FieldFailedLoginAttempts, v))
}

// FailedLoginAttemptsLTE applies the LTE predicate on the "failed_login_attempts" field.
func FailedLoginAttemptsLTE(v int) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.FieldLTE(FieldFailedLoginAttempts, v))
}

// HasAuthAccount applies the HasEdge predicate on the "auth_account" edge.
func HasAuthAccount() predicate.OAuthAuth {
	return predicate.OAuthAuth(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthAccountTable, AuthAccountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthAccountWith applies the HasEdge predicate on the "auth_account" edge with a given conditions (other predicates).
func HasAuthAccountWith(preds ...predicate.AuthAccount) predicate.OAuthAuth {
	return predicate.OAuthAuth(func(s *sql.Selector) {
		step := newAuthAccountStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OAuthAuth) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OAuthAuth) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OAuthAuth) predicate.OAuthAuth {
	return predicate.OAuthAuth(sql.NotPredicates(p))
}
