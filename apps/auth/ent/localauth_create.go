// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"mandacode.com/accounts/auth/ent/authaccount"
	"mandacode.com/accounts/auth/ent/localauth"
)

// LocalAuthCreate is the builder for creating a LocalAuth entity.
type LocalAuthCreate struct {
	config
	mutation *LocalAuthMutation
	hooks    []Hook
}

// SetAuthAccountID sets the "auth_account_id" field.
func (lac *LocalAuthCreate) SetAuthAccountID(u uuid.UUID) *LocalAuthCreate {
	lac.mutation.SetAuthAccountID(u)
	return lac
}

// SetEmail sets the "email" field.
func (lac *LocalAuthCreate) SetEmail(s string) *LocalAuthCreate {
	lac.mutation.SetEmail(s)
	return lac
}

// SetPassword sets the "password" field.
func (lac *LocalAuthCreate) SetPassword(s string) *LocalAuthCreate {
	lac.mutation.SetPassword(s)
	return lac
}

// SetIsVerified sets the "is_verified" field.
func (lac *LocalAuthCreate) SetIsVerified(b bool) *LocalAuthCreate {
	lac.mutation.SetIsVerified(b)
	return lac
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (lac *LocalAuthCreate) SetNillableIsVerified(b *bool) *LocalAuthCreate {
	if b != nil {
		lac.SetIsVerified(*b)
	}
	return lac
}

// SetCreatedAt sets the "created_at" field.
func (lac *LocalAuthCreate) SetCreatedAt(t time.Time) *LocalAuthCreate {
	lac.mutation.SetCreatedAt(t)
	return lac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lac *LocalAuthCreate) SetNillableCreatedAt(t *time.Time) *LocalAuthCreate {
	if t != nil {
		lac.SetCreatedAt(*t)
	}
	return lac
}

// SetUpdatedAt sets the "updated_at" field.
func (lac *LocalAuthCreate) SetUpdatedAt(t time.Time) *LocalAuthCreate {
	lac.mutation.SetUpdatedAt(t)
	return lac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lac *LocalAuthCreate) SetNillableUpdatedAt(t *time.Time) *LocalAuthCreate {
	if t != nil {
		lac.SetUpdatedAt(*t)
	}
	return lac
}

// SetLastLoginAt sets the "last_login_at" field.
func (lac *LocalAuthCreate) SetLastLoginAt(t time.Time) *LocalAuthCreate {
	lac.mutation.SetLastLoginAt(t)
	return lac
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (lac *LocalAuthCreate) SetNillableLastLoginAt(t *time.Time) *LocalAuthCreate {
	if t != nil {
		lac.SetLastLoginAt(*t)
	}
	return lac
}

// SetLastFailedLoginAt sets the "last_failed_login_at" field.
func (lac *LocalAuthCreate) SetLastFailedLoginAt(t time.Time) *LocalAuthCreate {
	lac.mutation.SetLastFailedLoginAt(t)
	return lac
}

// SetNillableLastFailedLoginAt sets the "last_failed_login_at" field if the given value is not nil.
func (lac *LocalAuthCreate) SetNillableLastFailedLoginAt(t *time.Time) *LocalAuthCreate {
	if t != nil {
		lac.SetLastFailedLoginAt(*t)
	}
	return lac
}

// SetFailedLoginAttempts sets the "failed_login_attempts" field.
func (lac *LocalAuthCreate) SetFailedLoginAttempts(i int) *LocalAuthCreate {
	lac.mutation.SetFailedLoginAttempts(i)
	return lac
}

// SetNillableFailedLoginAttempts sets the "failed_login_attempts" field if the given value is not nil.
func (lac *LocalAuthCreate) SetNillableFailedLoginAttempts(i *int) *LocalAuthCreate {
	if i != nil {
		lac.SetFailedLoginAttempts(*i)
	}
	return lac
}

// SetID sets the "id" field.
func (lac *LocalAuthCreate) SetID(u uuid.UUID) *LocalAuthCreate {
	lac.mutation.SetID(u)
	return lac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lac *LocalAuthCreate) SetNillableID(u *uuid.UUID) *LocalAuthCreate {
	if u != nil {
		lac.SetID(*u)
	}
	return lac
}

// SetAuthAccount sets the "auth_account" edge to the AuthAccount entity.
func (lac *LocalAuthCreate) SetAuthAccount(a *AuthAccount) *LocalAuthCreate {
	return lac.SetAuthAccountID(a.ID)
}

// Mutation returns the LocalAuthMutation object of the builder.
func (lac *LocalAuthCreate) Mutation() *LocalAuthMutation {
	return lac.mutation
}

// Save creates the LocalAuth in the database.
func (lac *LocalAuthCreate) Save(ctx context.Context) (*LocalAuth, error) {
	lac.defaults()
	return withHooks(ctx, lac.sqlSave, lac.mutation, lac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lac *LocalAuthCreate) SaveX(ctx context.Context) *LocalAuth {
	v, err := lac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lac *LocalAuthCreate) Exec(ctx context.Context) error {
	_, err := lac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lac *LocalAuthCreate) ExecX(ctx context.Context) {
	if err := lac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lac *LocalAuthCreate) defaults() {
	if _, ok := lac.mutation.IsVerified(); !ok {
		v := localauth.DefaultIsVerified
		lac.mutation.SetIsVerified(v)
	}
	if _, ok := lac.mutation.CreatedAt(); !ok {
		v := localauth.DefaultCreatedAt()
		lac.mutation.SetCreatedAt(v)
	}
	if _, ok := lac.mutation.UpdatedAt(); !ok {
		v := localauth.DefaultUpdatedAt()
		lac.mutation.SetUpdatedAt(v)
	}
	if _, ok := lac.mutation.FailedLoginAttempts(); !ok {
		v := localauth.DefaultFailedLoginAttempts
		lac.mutation.SetFailedLoginAttempts(v)
	}
	if _, ok := lac.mutation.ID(); !ok {
		v := localauth.DefaultID()
		lac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lac *LocalAuthCreate) check() error {
	if _, ok := lac.mutation.AuthAccountID(); !ok {
		return &ValidationError{Name: "auth_account_id", err: errors.New(`ent: missing required field "LocalAuth.auth_account_id"`)}
	}
	if _, ok := lac.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "LocalAuth.email"`)}
	}
	if v, ok := lac.mutation.Email(); ok {
		if err := localauth.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "LocalAuth.email": %w`, err)}
		}
	}
	if _, ok := lac.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "LocalAuth.password"`)}
	}
	if v, ok := lac.mutation.Password(); ok {
		if err := localauth.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "LocalAuth.password": %w`, err)}
		}
	}
	if _, ok := lac.mutation.IsVerified(); !ok {
		return &ValidationError{Name: "is_verified", err: errors.New(`ent: missing required field "LocalAuth.is_verified"`)}
	}
	if _, ok := lac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LocalAuth.created_at"`)}
	}
	if _, ok := lac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LocalAuth.updated_at"`)}
	}
	if _, ok := lac.mutation.FailedLoginAttempts(); !ok {
		return &ValidationError{Name: "failed_login_attempts", err: errors.New(`ent: missing required field "LocalAuth.failed_login_attempts"`)}
	}
	if len(lac.mutation.AuthAccountIDs()) == 0 {
		return &ValidationError{Name: "auth_account", err: errors.New(`ent: missing required edge "LocalAuth.auth_account"`)}
	}
	return nil
}

func (lac *LocalAuthCreate) sqlSave(ctx context.Context) (*LocalAuth, error) {
	if err := lac.check(); err != nil {
		return nil, err
	}
	_node, _spec := lac.createSpec()
	if err := sqlgraph.CreateNode(ctx, lac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lac.mutation.id = &_node.ID
	lac.mutation.done = true
	return _node, nil
}

func (lac *LocalAuthCreate) createSpec() (*LocalAuth, *sqlgraph.CreateSpec) {
	var (
		_node = &LocalAuth{config: lac.config}
		_spec = sqlgraph.NewCreateSpec(localauth.Table, sqlgraph.NewFieldSpec(localauth.FieldID, field.TypeUUID))
	)
	if id, ok := lac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lac.mutation.Email(); ok {
		_spec.SetField(localauth.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := lac.mutation.Password(); ok {
		_spec.SetField(localauth.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := lac.mutation.IsVerified(); ok {
		_spec.SetField(localauth.FieldIsVerified, field.TypeBool, value)
		_node.IsVerified = value
	}
	if value, ok := lac.mutation.CreatedAt(); ok {
		_spec.SetField(localauth.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lac.mutation.UpdatedAt(); ok {
		_spec.SetField(localauth.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lac.mutation.LastLoginAt(); ok {
		_spec.SetField(localauth.FieldLastLoginAt, field.TypeTime, value)
		_node.LastLoginAt = value
	}
	if value, ok := lac.mutation.LastFailedLoginAt(); ok {
		_spec.SetField(localauth.FieldLastFailedLoginAt, field.TypeTime, value)
		_node.LastFailedLoginAt = value
	}
	if value, ok := lac.mutation.FailedLoginAttempts(); ok {
		_spec.SetField(localauth.FieldFailedLoginAttempts, field.TypeInt, value)
		_node.FailedLoginAttempts = value
	}
	if nodes := lac.mutation.AuthAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   localauth.AuthAccountTable,
			Columns: []string{localauth.AuthAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authaccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AuthAccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LocalAuthCreateBulk is the builder for creating many LocalAuth entities in bulk.
type LocalAuthCreateBulk struct {
	config
	err      error
	builders []*LocalAuthCreate
}

// Save creates the LocalAuth entities in the database.
func (lacb *LocalAuthCreateBulk) Save(ctx context.Context) ([]*LocalAuth, error) {
	if lacb.err != nil {
		return nil, lacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lacb.builders))
	nodes := make([]*LocalAuth, len(lacb.builders))
	mutators := make([]Mutator, len(lacb.builders))
	for i := range lacb.builders {
		func(i int, root context.Context) {
			builder := lacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LocalAuthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lacb *LocalAuthCreateBulk) SaveX(ctx context.Context) []*LocalAuth {
	v, err := lacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lacb *LocalAuthCreateBulk) Exec(ctx context.Context) error {
	_, err := lacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lacb *LocalAuthCreateBulk) ExecX(ctx context.Context) {
	if err := lacb.Exec(ctx); err != nil {
		panic(err)
	}
}
