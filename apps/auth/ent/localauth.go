// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"mandacode.com/accounts/auth/ent/authaccount"
	"mandacode.com/accounts/auth/ent/localauth"
)

// LocalAuth is the model entity for the LocalAuth schema.
type LocalAuth struct {
	config `json:"-"`
	// ID of the ent.
	// The unique identifier for the local authentication record
	ID uuid.UUID `json:"id,omitempty"`
	// The unique identifier for the authentication account associated with this local authentication
	AuthAccountID uuid.UUID `json:"auth_account_id,omitempty"`
	// The email address associated with the local authentication
	Email string `json:"email,omitempty"`
	// The hashed password for the local authentication
	Password string `json:"password,omitempty"`
	// Indicates if the local authentication has verified the email address
	IsVerified bool `json:"is_verified,omitempty"`
	// The time when the local authentication was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time when the local authentication was last updated
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The time when the user last logged in with this local authentication
	LastLoginAt time.Time `json:"last_login_at,omitempty"`
	// The time when the user last failed to log in with this local authentication
	LastFailedLoginAt time.Time `json:"last_failed_login_at,omitempty"`
	// The number of consecutive failed login attempts for this local authentication
	FailedLoginAttempts int `json:"failed_login_attempts,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LocalAuthQuery when eager-loading is set.
	Edges        LocalAuthEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LocalAuthEdges holds the relations/edges for other nodes in the graph.
type LocalAuthEdges struct {
	// The authentication account associated with this local authentication
	AuthAccount *AuthAccount `json:"auth_account,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AuthAccountOrErr returns the AuthAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LocalAuthEdges) AuthAccountOrErr() (*AuthAccount, error) {
	if e.AuthAccount != nil {
		return e.AuthAccount, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: authaccount.Label}
	}
	return nil, &NotLoadedError{edge: "auth_account"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LocalAuth) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case localauth.FieldIsVerified:
			values[i] = new(sql.NullBool)
		case localauth.FieldFailedLoginAttempts:
			values[i] = new(sql.NullInt64)
		case localauth.FieldEmail, localauth.FieldPassword:
			values[i] = new(sql.NullString)
		case localauth.FieldCreatedAt, localauth.FieldUpdatedAt, localauth.FieldLastLoginAt, localauth.FieldLastFailedLoginAt:
			values[i] = new(sql.NullTime)
		case localauth.FieldID, localauth.FieldAuthAccountID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LocalAuth fields.
func (la *LocalAuth) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case localauth.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				la.ID = *value
			}
		case localauth.FieldAuthAccountID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field auth_account_id", values[i])
			} else if value != nil {
				la.AuthAccountID = *value
			}
		case localauth.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				la.Email = value.String
			}
		case localauth.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				la.Password = value.String
			}
		case localauth.FieldIsVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_verified", values[i])
			} else if value.Valid {
				la.IsVerified = value.Bool
			}
		case localauth.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				la.CreatedAt = value.Time
			}
		case localauth.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				la.UpdatedAt = value.Time
			}
		case localauth.FieldLastLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_at", values[i])
			} else if value.Valid {
				la.LastLoginAt = value.Time
			}
		case localauth.FieldLastFailedLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_failed_login_at", values[i])
			} else if value.Valid {
				la.LastFailedLoginAt = value.Time
			}
		case localauth.FieldFailedLoginAttempts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field failed_login_attempts", values[i])
			} else if value.Valid {
				la.FailedLoginAttempts = int(value.Int64)
			}
		default:
			la.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LocalAuth.
// This includes values selected through modifiers, order, etc.
func (la *LocalAuth) Value(name string) (ent.Value, error) {
	return la.selectValues.Get(name)
}

// QueryAuthAccount queries the "auth_account" edge of the LocalAuth entity.
func (la *LocalAuth) QueryAuthAccount() *AuthAccountQuery {
	return NewLocalAuthClient(la.config).QueryAuthAccount(la)
}

// Update returns a builder for updating this LocalAuth.
// Note that you need to call LocalAuth.Unwrap() before calling this method if this LocalAuth
// was returned from a transaction, and the transaction was committed or rolled back.
func (la *LocalAuth) Update() *LocalAuthUpdateOne {
	return NewLocalAuthClient(la.config).UpdateOne(la)
}

// Unwrap unwraps the LocalAuth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (la *LocalAuth) Unwrap() *LocalAuth {
	_tx, ok := la.config.driver.(*txDriver)
	if !ok {
		panic("ent: LocalAuth is not a transactional entity")
	}
	la.config.driver = _tx.drv
	return la
}

// String implements the fmt.Stringer.
func (la *LocalAuth) String() string {
	var builder strings.Builder
	builder.WriteString("LocalAuth(")
	builder.WriteString(fmt.Sprintf("id=%v, ", la.ID))
	builder.WriteString("auth_account_id=")
	builder.WriteString(fmt.Sprintf("%v", la.AuthAccountID))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(la.Email)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(la.Password)
	builder.WriteString(", ")
	builder.WriteString("is_verified=")
	builder.WriteString(fmt.Sprintf("%v", la.IsVerified))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(la.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(la.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_login_at=")
	builder.WriteString(la.LastLoginAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_failed_login_at=")
	builder.WriteString(la.LastFailedLoginAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("failed_login_attempts=")
	builder.WriteString(fmt.Sprintf("%v", la.FailedLoginAttempts))
	builder.WriteByte(')')
	return builder.String()
}

// LocalAuths is a parsable slice of LocalAuth.
type LocalAuths []*LocalAuth
