// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"mandacode.com/accounts/auth/ent/authaccount"
)

// AuthAccountCreate is the builder for creating a AuthAccount entity.
type AuthAccountCreate struct {
	config
	mutation *AuthAccountMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (aac *AuthAccountCreate) SetUserID(u uuid.UUID) *AuthAccountCreate {
	aac.mutation.SetUserID(u)
	return aac
}

// SetProvider sets the "provider" field.
func (aac *AuthAccountCreate) SetProvider(a authaccount.Provider) *AuthAccountCreate {
	aac.mutation.SetProvider(a)
	return aac
}

// SetProviderID sets the "provider_id" field.
func (aac *AuthAccountCreate) SetProviderID(s string) *AuthAccountCreate {
	aac.mutation.SetProviderID(s)
	return aac
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (aac *AuthAccountCreate) SetNillableProviderID(s *string) *AuthAccountCreate {
	if s != nil {
		aac.SetProviderID(*s)
	}
	return aac
}

// SetIsVerified sets the "is_verified" field.
func (aac *AuthAccountCreate) SetIsVerified(b bool) *AuthAccountCreate {
	aac.mutation.SetIsVerified(b)
	return aac
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (aac *AuthAccountCreate) SetNillableIsVerified(b *bool) *AuthAccountCreate {
	if b != nil {
		aac.SetIsVerified(*b)
	}
	return aac
}

// SetEmail sets the "email" field.
func (aac *AuthAccountCreate) SetEmail(s string) *AuthAccountCreate {
	aac.mutation.SetEmail(s)
	return aac
}

// SetPasswordHash sets the "password_hash" field.
func (aac *AuthAccountCreate) SetPasswordHash(s string) *AuthAccountCreate {
	aac.mutation.SetPasswordHash(s)
	return aac
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (aac *AuthAccountCreate) SetNillablePasswordHash(s *string) *AuthAccountCreate {
	if s != nil {
		aac.SetPasswordHash(*s)
	}
	return aac
}

// SetCreatedAt sets the "created_at" field.
func (aac *AuthAccountCreate) SetCreatedAt(t time.Time) *AuthAccountCreate {
	aac.mutation.SetCreatedAt(t)
	return aac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aac *AuthAccountCreate) SetNillableCreatedAt(t *time.Time) *AuthAccountCreate {
	if t != nil {
		aac.SetCreatedAt(*t)
	}
	return aac
}

// SetUpdatedAt sets the "updated_at" field.
func (aac *AuthAccountCreate) SetUpdatedAt(t time.Time) *AuthAccountCreate {
	aac.mutation.SetUpdatedAt(t)
	return aac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aac *AuthAccountCreate) SetNillableUpdatedAt(t *time.Time) *AuthAccountCreate {
	if t != nil {
		aac.SetUpdatedAt(*t)
	}
	return aac
}

// SetID sets the "id" field.
func (aac *AuthAccountCreate) SetID(u uuid.UUID) *AuthAccountCreate {
	aac.mutation.SetID(u)
	return aac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (aac *AuthAccountCreate) SetNillableID(u *uuid.UUID) *AuthAccountCreate {
	if u != nil {
		aac.SetID(*u)
	}
	return aac
}

// Mutation returns the AuthAccountMutation object of the builder.
func (aac *AuthAccountCreate) Mutation() *AuthAccountMutation {
	return aac.mutation
}

// Save creates the AuthAccount in the database.
func (aac *AuthAccountCreate) Save(ctx context.Context) (*AuthAccount, error) {
	if err := aac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, aac.sqlSave, aac.mutation, aac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aac *AuthAccountCreate) SaveX(ctx context.Context) *AuthAccount {
	v, err := aac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aac *AuthAccountCreate) Exec(ctx context.Context) error {
	_, err := aac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aac *AuthAccountCreate) ExecX(ctx context.Context) {
	if err := aac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aac *AuthAccountCreate) defaults() error {
	if _, ok := aac.mutation.IsVerified(); !ok {
		v := authaccount.DefaultIsVerified
		aac.mutation.SetIsVerified(v)
	}
	if _, ok := aac.mutation.CreatedAt(); !ok {
		if authaccount.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized authaccount.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := authaccount.DefaultCreatedAt()
		aac.mutation.SetCreatedAt(v)
	}
	if _, ok := aac.mutation.UpdatedAt(); !ok {
		if authaccount.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized authaccount.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := authaccount.DefaultUpdatedAt()
		aac.mutation.SetUpdatedAt(v)
	}
	if _, ok := aac.mutation.ID(); !ok {
		if authaccount.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized authaccount.DefaultID (forgotten import ent/runtime?)")
		}
		v := authaccount.DefaultID()
		aac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (aac *AuthAccountCreate) check() error {
	if _, ok := aac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "AuthAccount.user_id"`)}
	}
	if _, ok := aac.mutation.Provider(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required field "AuthAccount.provider"`)}
	}
	if v, ok := aac.mutation.Provider(); ok {
		if err := authaccount.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "AuthAccount.provider": %w`, err)}
		}
	}
	if _, ok := aac.mutation.IsVerified(); !ok {
		return &ValidationError{Name: "is_verified", err: errors.New(`ent: missing required field "AuthAccount.is_verified"`)}
	}
	if _, ok := aac.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "AuthAccount.email"`)}
	}
	if v, ok := aac.mutation.Email(); ok {
		if err := authaccount.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "AuthAccount.email": %w`, err)}
		}
	}
	if _, ok := aac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AuthAccount.created_at"`)}
	}
	if _, ok := aac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AuthAccount.updated_at"`)}
	}
	return nil
}

func (aac *AuthAccountCreate) sqlSave(ctx context.Context) (*AuthAccount, error) {
	if err := aac.check(); err != nil {
		return nil, err
	}
	_node, _spec := aac.createSpec()
	if err := sqlgraph.CreateNode(ctx, aac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	aac.mutation.id = &_node.ID
	aac.mutation.done = true
	return _node, nil
}

func (aac *AuthAccountCreate) createSpec() (*AuthAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthAccount{config: aac.config}
		_spec = sqlgraph.NewCreateSpec(authaccount.Table, sqlgraph.NewFieldSpec(authaccount.FieldID, field.TypeUUID))
	)
	if id, ok := aac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := aac.mutation.UserID(); ok {
		_spec.SetField(authaccount.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := aac.mutation.Provider(); ok {
		_spec.SetField(authaccount.FieldProvider, field.TypeEnum, value)
		_node.Provider = value
	}
	if value, ok := aac.mutation.ProviderID(); ok {
		_spec.SetField(authaccount.FieldProviderID, field.TypeString, value)
		_node.ProviderID = &value
	}
	if value, ok := aac.mutation.IsVerified(); ok {
		_spec.SetField(authaccount.FieldIsVerified, field.TypeBool, value)
		_node.IsVerified = value
	}
	if value, ok := aac.mutation.Email(); ok {
		_spec.SetField(authaccount.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := aac.mutation.PasswordHash(); ok {
		_spec.SetField(authaccount.FieldPasswordHash, field.TypeString, value)
		_node.PasswordHash = &value
	}
	if value, ok := aac.mutation.CreatedAt(); ok {
		_spec.SetField(authaccount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := aac.mutation.UpdatedAt(); ok {
		_spec.SetField(authaccount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// AuthAccountCreateBulk is the builder for creating many AuthAccount entities in bulk.
type AuthAccountCreateBulk struct {
	config
	err      error
	builders []*AuthAccountCreate
}

// Save creates the AuthAccount entities in the database.
func (aacb *AuthAccountCreateBulk) Save(ctx context.Context) ([]*AuthAccount, error) {
	if aacb.err != nil {
		return nil, aacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aacb.builders))
	nodes := make([]*AuthAccount, len(aacb.builders))
	mutators := make([]Mutator, len(aacb.builders))
	for i := range aacb.builders {
		func(i int, root context.Context) {
			builder := aacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aacb *AuthAccountCreateBulk) SaveX(ctx context.Context) []*AuthAccount {
	v, err := aacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aacb *AuthAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := aacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aacb *AuthAccountCreateBulk) ExecX(ctx context.Context) {
	if err := aacb.Exec(ctx); err != nil {
		panic(err)
	}
}
