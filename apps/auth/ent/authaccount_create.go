// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"mandacode.com/accounts/auth/ent/authaccount"
	"mandacode.com/accounts/auth/ent/localauth"
	"mandacode.com/accounts/auth/ent/oauthauth"
)

// AuthAccountCreate is the builder for creating a AuthAccount entity.
type AuthAccountCreate struct {
	config
	mutation *AuthAccountMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (aac *AuthAccountCreate) SetUserID(u uuid.UUID) *AuthAccountCreate {
	aac.mutation.SetUserID(u)
	return aac
}

// SetCreatedAt sets the "created_at" field.
func (aac *AuthAccountCreate) SetCreatedAt(t time.Time) *AuthAccountCreate {
	aac.mutation.SetCreatedAt(t)
	return aac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aac *AuthAccountCreate) SetNillableCreatedAt(t *time.Time) *AuthAccountCreate {
	if t != nil {
		aac.SetCreatedAt(*t)
	}
	return aac
}

// SetUpdatedAt sets the "updated_at" field.
func (aac *AuthAccountCreate) SetUpdatedAt(t time.Time) *AuthAccountCreate {
	aac.mutation.SetUpdatedAt(t)
	return aac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aac *AuthAccountCreate) SetNillableUpdatedAt(t *time.Time) *AuthAccountCreate {
	if t != nil {
		aac.SetUpdatedAt(*t)
	}
	return aac
}

// SetLastLoginAt sets the "last_login_at" field.
func (aac *AuthAccountCreate) SetLastLoginAt(t time.Time) *AuthAccountCreate {
	aac.mutation.SetLastLoginAt(t)
	return aac
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (aac *AuthAccountCreate) SetNillableLastLoginAt(t *time.Time) *AuthAccountCreate {
	if t != nil {
		aac.SetLastLoginAt(*t)
	}
	return aac
}

// SetLastFailedLoginAt sets the "last_failed_login_at" field.
func (aac *AuthAccountCreate) SetLastFailedLoginAt(t time.Time) *AuthAccountCreate {
	aac.mutation.SetLastFailedLoginAt(t)
	return aac
}

// SetNillableLastFailedLoginAt sets the "last_failed_login_at" field if the given value is not nil.
func (aac *AuthAccountCreate) SetNillableLastFailedLoginAt(t *time.Time) *AuthAccountCreate {
	if t != nil {
		aac.SetLastFailedLoginAt(*t)
	}
	return aac
}

// SetFailedLoginAttempts sets the "failed_login_attempts" field.
func (aac *AuthAccountCreate) SetFailedLoginAttempts(i int) *AuthAccountCreate {
	aac.mutation.SetFailedLoginAttempts(i)
	return aac
}

// SetNillableFailedLoginAttempts sets the "failed_login_attempts" field if the given value is not nil.
func (aac *AuthAccountCreate) SetNillableFailedLoginAttempts(i *int) *AuthAccountCreate {
	if i != nil {
		aac.SetFailedLoginAttempts(*i)
	}
	return aac
}

// SetID sets the "id" field.
func (aac *AuthAccountCreate) SetID(u uuid.UUID) *AuthAccountCreate {
	aac.mutation.SetID(u)
	return aac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (aac *AuthAccountCreate) SetNillableID(u *uuid.UUID) *AuthAccountCreate {
	if u != nil {
		aac.SetID(*u)
	}
	return aac
}

// AddLocalAuthIDs adds the "local_auths" edge to the LocalAuth entity by IDs.
func (aac *AuthAccountCreate) AddLocalAuthIDs(ids ...uuid.UUID) *AuthAccountCreate {
	aac.mutation.AddLocalAuthIDs(ids...)
	return aac
}

// AddLocalAuths adds the "local_auths" edges to the LocalAuth entity.
func (aac *AuthAccountCreate) AddLocalAuths(l ...*LocalAuth) *AuthAccountCreate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return aac.AddLocalAuthIDs(ids...)
}

// AddOauthAuthIDs adds the "oauth_auths" edge to the OAuthAuth entity by IDs.
func (aac *AuthAccountCreate) AddOauthAuthIDs(ids ...uuid.UUID) *AuthAccountCreate {
	aac.mutation.AddOauthAuthIDs(ids...)
	return aac
}

// AddOauthAuths adds the "oauth_auths" edges to the OAuthAuth entity.
func (aac *AuthAccountCreate) AddOauthAuths(o ...*OAuthAuth) *AuthAccountCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return aac.AddOauthAuthIDs(ids...)
}

// Mutation returns the AuthAccountMutation object of the builder.
func (aac *AuthAccountCreate) Mutation() *AuthAccountMutation {
	return aac.mutation
}

// Save creates the AuthAccount in the database.
func (aac *AuthAccountCreate) Save(ctx context.Context) (*AuthAccount, error) {
	aac.defaults()
	return withHooks(ctx, aac.sqlSave, aac.mutation, aac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aac *AuthAccountCreate) SaveX(ctx context.Context) *AuthAccount {
	v, err := aac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aac *AuthAccountCreate) Exec(ctx context.Context) error {
	_, err := aac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aac *AuthAccountCreate) ExecX(ctx context.Context) {
	if err := aac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aac *AuthAccountCreate) defaults() {
	if _, ok := aac.mutation.CreatedAt(); !ok {
		v := authaccount.DefaultCreatedAt()
		aac.mutation.SetCreatedAt(v)
	}
	if _, ok := aac.mutation.UpdatedAt(); !ok {
		v := authaccount.DefaultUpdatedAt()
		aac.mutation.SetUpdatedAt(v)
	}
	if _, ok := aac.mutation.FailedLoginAttempts(); !ok {
		v := authaccount.DefaultFailedLoginAttempts
		aac.mutation.SetFailedLoginAttempts(v)
	}
	if _, ok := aac.mutation.ID(); !ok {
		v := authaccount.DefaultID()
		aac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aac *AuthAccountCreate) check() error {
	if _, ok := aac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "AuthAccount.user_id"`)}
	}
	if _, ok := aac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AuthAccount.created_at"`)}
	}
	if _, ok := aac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AuthAccount.updated_at"`)}
	}
	if _, ok := aac.mutation.FailedLoginAttempts(); !ok {
		return &ValidationError{Name: "failed_login_attempts", err: errors.New(`ent: missing required field "AuthAccount.failed_login_attempts"`)}
	}
	return nil
}

func (aac *AuthAccountCreate) sqlSave(ctx context.Context) (*AuthAccount, error) {
	if err := aac.check(); err != nil {
		return nil, err
	}
	_node, _spec := aac.createSpec()
	if err := sqlgraph.CreateNode(ctx, aac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	aac.mutation.id = &_node.ID
	aac.mutation.done = true
	return _node, nil
}

func (aac *AuthAccountCreate) createSpec() (*AuthAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthAccount{config: aac.config}
		_spec = sqlgraph.NewCreateSpec(authaccount.Table, sqlgraph.NewFieldSpec(authaccount.FieldID, field.TypeUUID))
	)
	if id, ok := aac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := aac.mutation.UserID(); ok {
		_spec.SetField(authaccount.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := aac.mutation.CreatedAt(); ok {
		_spec.SetField(authaccount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := aac.mutation.UpdatedAt(); ok {
		_spec.SetField(authaccount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := aac.mutation.LastLoginAt(); ok {
		_spec.SetField(authaccount.FieldLastLoginAt, field.TypeTime, value)
		_node.LastLoginAt = value
	}
	if value, ok := aac.mutation.LastFailedLoginAt(); ok {
		_spec.SetField(authaccount.FieldLastFailedLoginAt, field.TypeTime, value)
		_node.LastFailedLoginAt = value
	}
	if value, ok := aac.mutation.FailedLoginAttempts(); ok {
		_spec.SetField(authaccount.FieldFailedLoginAttempts, field.TypeInt, value)
		_node.FailedLoginAttempts = value
	}
	if nodes := aac.mutation.LocalAuthsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authaccount.LocalAuthsTable,
			Columns: []string{authaccount.LocalAuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localauth.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aac.mutation.OauthAuthsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authaccount.OauthAuthsTable,
			Columns: []string{authaccount.OauthAuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauth.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AuthAccountCreateBulk is the builder for creating many AuthAccount entities in bulk.
type AuthAccountCreateBulk struct {
	config
	err      error
	builders []*AuthAccountCreate
}

// Save creates the AuthAccount entities in the database.
func (aacb *AuthAccountCreateBulk) Save(ctx context.Context) ([]*AuthAccount, error) {
	if aacb.err != nil {
		return nil, aacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aacb.builders))
	nodes := make([]*AuthAccount, len(aacb.builders))
	mutators := make([]Mutator, len(aacb.builders))
	for i := range aacb.builders {
		func(i int, root context.Context) {
			builder := aacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aacb *AuthAccountCreateBulk) SaveX(ctx context.Context) []*AuthAccount {
	v, err := aacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aacb *AuthAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := aacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aacb *AuthAccountCreateBulk) ExecX(ctx context.Context) {
	if err := aacb.Exec(ctx); err != nil {
		panic(err)
	}
}
