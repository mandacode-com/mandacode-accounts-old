// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"mandacode.com/accounts/auth/ent/authaccount"
)

// AuthAccount is the model entity for the AuthAccount schema.
type AuthAccount struct {
	config `json:"-"`
	// ID of the ent.
	// The unique identifier for the authentication account
	ID uuid.UUID `json:"id,omitempty"`
	// The unique identifier for the user associated with this authentication account
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Indicates if the authentication account is active and can be used to log in
	IsActive bool `json:"is_active,omitempty"`
	// The time when the authentication account was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time when the authentication account was last updated
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The time when the user last logged in with this authentication account
	LastLoginAt time.Time `json:"last_login_at,omitempty"`
	// The time when the user last failed to log in with this authentication account
	LastFailedLoginAt time.Time `json:"last_failed_login_at,omitempty"`
	// The number of consecutive failed login attempts for this authentication account
	FailedLoginAttempts int `json:"failed_login_attempts,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthAccountQuery when eager-loading is set.
	Edges        AuthAccountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AuthAccountEdges holds the relations/edges for other nodes in the graph.
type AuthAccountEdges struct {
	// The local authentication methods associated with this authentication account
	LocalAuths []*LocalAuth `json:"local_auths,omitempty"`
	// The OAuth authentication methods associated with this authentication account
	OauthAuths []*OAuthAuth `json:"oauth_auths,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LocalAuthsOrErr returns the LocalAuths value or an error if the edge
// was not loaded in eager-loading.
func (e AuthAccountEdges) LocalAuthsOrErr() ([]*LocalAuth, error) {
	if e.loadedTypes[0] {
		return e.LocalAuths, nil
	}
	return nil, &NotLoadedError{edge: "local_auths"}
}

// OauthAuthsOrErr returns the OauthAuths value or an error if the edge
// was not loaded in eager-loading.
func (e AuthAccountEdges) OauthAuthsOrErr() ([]*OAuthAuth, error) {
	if e.loadedTypes[1] {
		return e.OauthAuths, nil
	}
	return nil, &NotLoadedError{edge: "oauth_auths"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authaccount.FieldIsActive:
			values[i] = new(sql.NullBool)
		case authaccount.FieldFailedLoginAttempts:
			values[i] = new(sql.NullInt64)
		case authaccount.FieldCreatedAt, authaccount.FieldUpdatedAt, authaccount.FieldLastLoginAt, authaccount.FieldLastFailedLoginAt:
			values[i] = new(sql.NullTime)
		case authaccount.FieldID, authaccount.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthAccount fields.
func (aa *AuthAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authaccount.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				aa.ID = *value
			}
		case authaccount.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				aa.UserID = *value
			}
		case authaccount.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				aa.IsActive = value.Bool
			}
		case authaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aa.CreatedAt = value.Time
			}
		case authaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aa.UpdatedAt = value.Time
			}
		case authaccount.FieldLastLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_at", values[i])
			} else if value.Valid {
				aa.LastLoginAt = value.Time
			}
		case authaccount.FieldLastFailedLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_failed_login_at", values[i])
			} else if value.Valid {
				aa.LastFailedLoginAt = value.Time
			}
		case authaccount.FieldFailedLoginAttempts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field failed_login_attempts", values[i])
			} else if value.Valid {
				aa.FailedLoginAttempts = int(value.Int64)
			}
		default:
			aa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthAccount.
// This includes values selected through modifiers, order, etc.
func (aa *AuthAccount) Value(name string) (ent.Value, error) {
	return aa.selectValues.Get(name)
}

// QueryLocalAuths queries the "local_auths" edge of the AuthAccount entity.
func (aa *AuthAccount) QueryLocalAuths() *LocalAuthQuery {
	return NewAuthAccountClient(aa.config).QueryLocalAuths(aa)
}

// QueryOauthAuths queries the "oauth_auths" edge of the AuthAccount entity.
func (aa *AuthAccount) QueryOauthAuths() *OAuthAuthQuery {
	return NewAuthAccountClient(aa.config).QueryOauthAuths(aa)
}

// Update returns a builder for updating this AuthAccount.
// Note that you need to call AuthAccount.Unwrap() before calling this method if this AuthAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (aa *AuthAccount) Update() *AuthAccountUpdateOne {
	return NewAuthAccountClient(aa.config).UpdateOne(aa)
}

// Unwrap unwraps the AuthAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aa *AuthAccount) Unwrap() *AuthAccount {
	_tx, ok := aa.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthAccount is not a transactional entity")
	}
	aa.config.driver = _tx.drv
	return aa
}

// String implements the fmt.Stringer.
func (aa *AuthAccount) String() string {
	var builder strings.Builder
	builder.WriteString("AuthAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aa.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", aa.UserID))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", aa.IsActive))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(aa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(aa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_login_at=")
	builder.WriteString(aa.LastLoginAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_failed_login_at=")
	builder.WriteString(aa.LastFailedLoginAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("failed_login_attempts=")
	builder.WriteString(fmt.Sprintf("%v", aa.FailedLoginAttempts))
	builder.WriteByte(')')
	return builder.String()
}

// AuthAccounts is a parsable slice of AuthAccount.
type AuthAccounts []*AuthAccount
