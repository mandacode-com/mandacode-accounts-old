// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"mandacode.com/accounts/auth/ent/authaccount"
)

// AuthAccount is the model entity for the AuthAccount schema.
type AuthAccount struct {
	config `json:"-"`
	// ID of the ent.
	// The unique identifier for the authentication account
	ID uuid.UUID `json:"id,omitempty"`
	// The unique identifier for the user associated with this authentication account
	UserID uuid.UUID `json:"user_id,omitempty"`
	// The OAuth provider used for authentication
	Provider authaccount.Provider `json:"provider,omitempty"`
	// The unique identifier provided by the OAuth provider for the user
	ProviderID *string `json:"provider_id,omitempty"`
	// Indicates if the authentication account has verified the email address
	IsVerified bool `json:"is_verified,omitempty"`
	// The email address associated with the authentication account
	Email string `json:"email,omitempty"`
	// The hashed password for the local authentication, if applicable
	PasswordHash *string `json:"password_hash,omitempty"`
	// The time when the authentication account was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time when the authentication account was last updated
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authaccount.FieldIsVerified:
			values[i] = new(sql.NullBool)
		case authaccount.FieldProvider, authaccount.FieldProviderID, authaccount.FieldEmail, authaccount.FieldPasswordHash:
			values[i] = new(sql.NullString)
		case authaccount.FieldCreatedAt, authaccount.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case authaccount.FieldID, authaccount.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthAccount fields.
func (aa *AuthAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authaccount.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				aa.ID = *value
			}
		case authaccount.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				aa.UserID = *value
			}
		case authaccount.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				aa.Provider = authaccount.Provider(value.String)
			}
		case authaccount.FieldProviderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				aa.ProviderID = new(string)
				*aa.ProviderID = value.String
			}
		case authaccount.FieldIsVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_verified", values[i])
			} else if value.Valid {
				aa.IsVerified = value.Bool
			}
		case authaccount.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				aa.Email = value.String
			}
		case authaccount.FieldPasswordHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_hash", values[i])
			} else if value.Valid {
				aa.PasswordHash = new(string)
				*aa.PasswordHash = value.String
			}
		case authaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aa.CreatedAt = value.Time
			}
		case authaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aa.UpdatedAt = value.Time
			}
		default:
			aa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthAccount.
// This includes values selected through modifiers, order, etc.
func (aa *AuthAccount) Value(name string) (ent.Value, error) {
	return aa.selectValues.Get(name)
}

// Update returns a builder for updating this AuthAccount.
// Note that you need to call AuthAccount.Unwrap() before calling this method if this AuthAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (aa *AuthAccount) Update() *AuthAccountUpdateOne {
	return NewAuthAccountClient(aa.config).UpdateOne(aa)
}

// Unwrap unwraps the AuthAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aa *AuthAccount) Unwrap() *AuthAccount {
	_tx, ok := aa.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthAccount is not a transactional entity")
	}
	aa.config.driver = _tx.drv
	return aa
}

// String implements the fmt.Stringer.
func (aa *AuthAccount) String() string {
	var builder strings.Builder
	builder.WriteString("AuthAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aa.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", aa.UserID))
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(fmt.Sprintf("%v", aa.Provider))
	builder.WriteString(", ")
	if v := aa.ProviderID; v != nil {
		builder.WriteString("provider_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("is_verified=")
	builder.WriteString(fmt.Sprintf("%v", aa.IsVerified))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(aa.Email)
	builder.WriteString(", ")
	if v := aa.PasswordHash; v != nil {
		builder.WriteString("password_hash=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(aa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(aa.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AuthAccounts is a parsable slice of AuthAccount.
type AuthAccounts []*AuthAccount
