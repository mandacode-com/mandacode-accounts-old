// Code generated by ent, DO NOT EDIT.

package authaccount

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the authaccount type in the database.
	Label = "auth_account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldLastLoginAt holds the string denoting the last_login_at field in the database.
	FieldLastLoginAt = "last_login_at"
	// FieldLastFailedLoginAt holds the string denoting the last_failed_login_at field in the database.
	FieldLastFailedLoginAt = "last_failed_login_at"
	// FieldFailedLoginAttempts holds the string denoting the failed_login_attempts field in the database.
	FieldFailedLoginAttempts = "failed_login_attempts"
	// EdgeLocalAuths holds the string denoting the local_auths edge name in mutations.
	EdgeLocalAuths = "local_auths"
	// EdgeOauthAuths holds the string denoting the oauth_auths edge name in mutations.
	EdgeOauthAuths = "oauth_auths"
	// Table holds the table name of the authaccount in the database.
	Table = "auth_accounts"
	// LocalAuthsTable is the table that holds the local_auths relation/edge.
	LocalAuthsTable = "local_auths"
	// LocalAuthsInverseTable is the table name for the LocalAuth entity.
	// It exists in this package in order to avoid circular dependency with the "localauth" package.
	LocalAuthsInverseTable = "local_auths"
	// LocalAuthsColumn is the table column denoting the local_auths relation/edge.
	LocalAuthsColumn = "auth_account_id"
	// OauthAuthsTable is the table that holds the oauth_auths relation/edge.
	OauthAuthsTable = "oauth_auths"
	// OauthAuthsInverseTable is the table name for the OAuthAuth entity.
	// It exists in this package in order to avoid circular dependency with the "oauthauth" package.
	OauthAuthsInverseTable = "oauth_auths"
	// OauthAuthsColumn is the table column denoting the oauth_auths relation/edge.
	OauthAuthsColumn = "auth_account_id"
)

// Columns holds all SQL columns for authaccount fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldLastLoginAt,
	FieldLastFailedLoginAt,
	FieldFailedLoginAttempts,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultFailedLoginAttempts holds the default value on creation for the "failed_login_attempts" field.
	DefaultFailedLoginAttempts int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the AuthAccount queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByLastLoginAt orders the results by the last_login_at field.
func ByLastLoginAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginAt, opts...).ToFunc()
}

// ByLastFailedLoginAt orders the results by the last_failed_login_at field.
func ByLastFailedLoginAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastFailedLoginAt, opts...).ToFunc()
}

// ByFailedLoginAttempts orders the results by the failed_login_attempts field.
func ByFailedLoginAttempts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFailedLoginAttempts, opts...).ToFunc()
}

// ByLocalAuthsCount orders the results by local_auths count.
func ByLocalAuthsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLocalAuthsStep(), opts...)
	}
}

// ByLocalAuths orders the results by local_auths terms.
func ByLocalAuths(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLocalAuthsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOauthAuthsCount orders the results by oauth_auths count.
func ByOauthAuthsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOauthAuthsStep(), opts...)
	}
}

// ByOauthAuths orders the results by oauth_auths terms.
func ByOauthAuths(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOauthAuthsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLocalAuthsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LocalAuthsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LocalAuthsTable, LocalAuthsColumn),
	)
}
func newOauthAuthsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OauthAuthsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OauthAuthsTable, OauthAuthsColumn),
	)
}
