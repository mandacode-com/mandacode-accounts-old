// Code generated by ent, DO NOT EDIT.

package authaccount

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"mandacode.com/accounts/auth/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldEQ(FieldUserID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldEQ(FieldUpdatedAt, v))
}

// LastLoginAt applies equality check predicate on the "last_login_at" field. It's identical to LastLoginAtEQ.
func LastLoginAt(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldEQ(FieldLastLoginAt, v))
}

// LastFailedLoginAt applies equality check predicate on the "last_failed_login_at" field. It's identical to LastFailedLoginAtEQ.
func LastFailedLoginAt(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldEQ(FieldLastFailedLoginAt, v))
}

// FailedLoginAttempts applies equality check predicate on the "failed_login_attempts" field. It's identical to FailedLoginAttemptsEQ.
func FailedLoginAttempts(v int) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldEQ(FieldFailedLoginAttempts, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldLTE(FieldUserID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldLTE(FieldUpdatedAt, v))
}

// LastLoginAtEQ applies the EQ predicate on the "last_login_at" field.
func LastLoginAtEQ(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldEQ(FieldLastLoginAt, v))
}

// LastLoginAtNEQ applies the NEQ predicate on the "last_login_at" field.
func LastLoginAtNEQ(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldNEQ(FieldLastLoginAt, v))
}

// LastLoginAtIn applies the In predicate on the "last_login_at" field.
func LastLoginAtIn(vs ...time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldIn(FieldLastLoginAt, vs...))
}

// LastLoginAtNotIn applies the NotIn predicate on the "last_login_at" field.
func LastLoginAtNotIn(vs ...time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldNotIn(FieldLastLoginAt, vs...))
}

// LastLoginAtGT applies the GT predicate on the "last_login_at" field.
func LastLoginAtGT(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldGT(FieldLastLoginAt, v))
}

// LastLoginAtGTE applies the GTE predicate on the "last_login_at" field.
func LastLoginAtGTE(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldGTE(FieldLastLoginAt, v))
}

// LastLoginAtLT applies the LT predicate on the "last_login_at" field.
func LastLoginAtLT(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldLT(FieldLastLoginAt, v))
}

// LastLoginAtLTE applies the LTE predicate on the "last_login_at" field.
func LastLoginAtLTE(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldLTE(FieldLastLoginAt, v))
}

// LastLoginAtIsNil applies the IsNil predicate on the "last_login_at" field.
func LastLoginAtIsNil() predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldIsNull(FieldLastLoginAt))
}

// LastLoginAtNotNil applies the NotNil predicate on the "last_login_at" field.
func LastLoginAtNotNil() predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldNotNull(FieldLastLoginAt))
}

// LastFailedLoginAtEQ applies the EQ predicate on the "last_failed_login_at" field.
func LastFailedLoginAtEQ(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldEQ(FieldLastFailedLoginAt, v))
}

// LastFailedLoginAtNEQ applies the NEQ predicate on the "last_failed_login_at" field.
func LastFailedLoginAtNEQ(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldNEQ(FieldLastFailedLoginAt, v))
}

// LastFailedLoginAtIn applies the In predicate on the "last_failed_login_at" field.
func LastFailedLoginAtIn(vs ...time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldIn(FieldLastFailedLoginAt, vs...))
}

// LastFailedLoginAtNotIn applies the NotIn predicate on the "last_failed_login_at" field.
func LastFailedLoginAtNotIn(vs ...time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldNotIn(FieldLastFailedLoginAt, vs...))
}

// LastFailedLoginAtGT applies the GT predicate on the "last_failed_login_at" field.
func LastFailedLoginAtGT(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldGT(FieldLastFailedLoginAt, v))
}

// LastFailedLoginAtGTE applies the GTE predicate on the "last_failed_login_at" field.
func LastFailedLoginAtGTE(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldGTE(FieldLastFailedLoginAt, v))
}

// LastFailedLoginAtLT applies the LT predicate on the "last_failed_login_at" field.
func LastFailedLoginAtLT(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldLT(FieldLastFailedLoginAt, v))
}

// LastFailedLoginAtLTE applies the LTE predicate on the "last_failed_login_at" field.
func LastFailedLoginAtLTE(v time.Time) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldLTE(FieldLastFailedLoginAt, v))
}

// LastFailedLoginAtIsNil applies the IsNil predicate on the "last_failed_login_at" field.
func LastFailedLoginAtIsNil() predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldIsNull(FieldLastFailedLoginAt))
}

// LastFailedLoginAtNotNil applies the NotNil predicate on the "last_failed_login_at" field.
func LastFailedLoginAtNotNil() predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldNotNull(FieldLastFailedLoginAt))
}

// FailedLoginAttemptsEQ applies the EQ predicate on the "failed_login_attempts" field.
func FailedLoginAttemptsEQ(v int) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldEQ(FieldFailedLoginAttempts, v))
}

// FailedLoginAttemptsNEQ applies the NEQ predicate on the "failed_login_attempts" field.
func FailedLoginAttemptsNEQ(v int) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldNEQ(FieldFailedLoginAttempts, v))
}

// FailedLoginAttemptsIn applies the In predicate on the "failed_login_attempts" field.
func FailedLoginAttemptsIn(vs ...int) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldIn(FieldFailedLoginAttempts, vs...))
}

// FailedLoginAttemptsNotIn applies the NotIn predicate on the "failed_login_attempts" field.
func FailedLoginAttemptsNotIn(vs ...int) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldNotIn(FieldFailedLoginAttempts, vs...))
}

// FailedLoginAttemptsGT applies the GT predicate on the "failed_login_attempts" field.
func FailedLoginAttemptsGT(v int) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldGT(FieldFailedLoginAttempts, v))
}

// FailedLoginAttemptsGTE applies the GTE predicate on the "failed_login_attempts" field.
func FailedLoginAttemptsGTE(v int) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldGTE(FieldFailedLoginAttempts, v))
}

// FailedLoginAttemptsLT applies the LT predicate on the "failed_login_attempts" field.
func FailedLoginAttemptsLT(v int) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldLT(FieldFailedLoginAttempts, v))
}

// FailedLoginAttemptsLTE applies the LTE predicate on the "failed_login_attempts" field.
func FailedLoginAttemptsLTE(v int) predicate.AuthAccount {
	return predicate.AuthAccount(sql.FieldLTE(FieldFailedLoginAttempts, v))
}

// HasLocalAuths applies the HasEdge predicate on the "local_auths" edge.
func HasLocalAuths() predicate.AuthAccount {
	return predicate.AuthAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LocalAuthsTable, LocalAuthsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLocalAuthsWith applies the HasEdge predicate on the "local_auths" edge with a given conditions (other predicates).
func HasLocalAuthsWith(preds ...predicate.LocalAuth) predicate.AuthAccount {
	return predicate.AuthAccount(func(s *sql.Selector) {
		step := newLocalAuthsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOauthAuths applies the HasEdge predicate on the "oauth_auths" edge.
func HasOauthAuths() predicate.AuthAccount {
	return predicate.AuthAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OauthAuthsTable, OauthAuthsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOauthAuthsWith applies the HasEdge predicate on the "oauth_auths" edge with a given conditions (other predicates).
func HasOauthAuthsWith(preds ...predicate.OAuthAuth) predicate.AuthAccount {
	return predicate.AuthAccount(func(s *sql.Selector) {
		step := newOauthAuthsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuthAccount) predicate.AuthAccount {
	return predicate.AuthAccount(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuthAccount) predicate.AuthAccount {
	return predicate.AuthAccount(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuthAccount) predicate.AuthAccount {
	return predicate.AuthAccount(sql.NotPredicates(p))
}
