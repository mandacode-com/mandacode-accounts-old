// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"mandacode.com/accounts/auth/ent/oauthuser"
)

// OAuthUser is the model entity for the OAuthUser schema.
type OAuthUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Provider holds the value of the "provider" field.
	Provider oauthuser.Provider `json:"provider,omitempty"`
	// ProviderID holds the value of the "provider_id" field.
	ProviderID string `json:"provider_id,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// IsVerified holds the value of the "is_verified" field.
	IsVerified   bool `json:"is_verified,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OAuthUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthuser.FieldIsActive, oauthuser.FieldIsVerified:
			values[i] = new(sql.NullBool)
		case oauthuser.FieldEmail, oauthuser.FieldProvider, oauthuser.FieldProviderID:
			values[i] = new(sql.NullString)
		case oauthuser.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OAuthUser fields.
func (ou *OAuthUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthuser.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ou.ID = *value
			}
		case oauthuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ou.Email = value.String
			}
		case oauthuser.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				ou.Provider = oauthuser.Provider(value.String)
			}
		case oauthuser.FieldProviderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				ou.ProviderID = value.String
			}
		case oauthuser.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				ou.IsActive = value.Bool
			}
		case oauthuser.FieldIsVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_verified", values[i])
			} else if value.Valid {
				ou.IsVerified = value.Bool
			}
		default:
			ou.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OAuthUser.
// This includes values selected through modifiers, order, etc.
func (ou *OAuthUser) Value(name string) (ent.Value, error) {
	return ou.selectValues.Get(name)
}

// Update returns a builder for updating this OAuthUser.
// Note that you need to call OAuthUser.Unwrap() before calling this method if this OAuthUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (ou *OAuthUser) Update() *OAuthUserUpdateOne {
	return NewOAuthUserClient(ou.config).UpdateOne(ou)
}

// Unwrap unwraps the OAuthUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ou *OAuthUser) Unwrap() *OAuthUser {
	_tx, ok := ou.config.driver.(*txDriver)
	if !ok {
		panic("ent: OAuthUser is not a transactional entity")
	}
	ou.config.driver = _tx.drv
	return ou
}

// String implements the fmt.Stringer.
func (ou *OAuthUser) String() string {
	var builder strings.Builder
	builder.WriteString("OAuthUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ou.ID))
	builder.WriteString("email=")
	builder.WriteString(ou.Email)
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(fmt.Sprintf("%v", ou.Provider))
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(ou.ProviderID)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", ou.IsActive))
	builder.WriteString(", ")
	builder.WriteString("is_verified=")
	builder.WriteString(fmt.Sprintf("%v", ou.IsVerified))
	builder.WriteByte(')')
	return builder.String()
}

// OAuthUsers is a parsable slice of OAuthUser.
type OAuthUsers []*OAuthUser
