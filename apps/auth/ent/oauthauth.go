// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"mandacode.com/accounts/auth/ent/authaccount"
	"mandacode.com/accounts/auth/ent/oauthauth"
)

// OAuthAuth is the model entity for the OAuthAuth schema.
type OAuthAuth struct {
	config `json:"-"`
	// ID of the ent.
	// The unique identifier for the OAuth authentication record
	ID uuid.UUID `json:"id,omitempty"`
	// The unique identifier for the authentication account associated with this OAuth authentication
	AuthAccountID uuid.UUID `json:"auth_account_id,omitempty"`
	// The OAuth provider used for authentication
	Provider oauthauth.Provider `json:"provider,omitempty"`
	// The unique identifier provided by the OAuth provider for the user
	ProviderID string `json:"provider_id,omitempty"`
	// Indicates if the OAuth authentication is active and can be used to log in
	IsActive bool `json:"is_active,omitempty"`
	// Indicates if the OAuth authentication has verified the email address
	IsVerified bool `json:"is_verified,omitempty"`
	// The time when the OAuth authentication was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time when the OAuth authentication was last updated
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The email address associated with the OAuth authentication
	Email string `json:"email,omitempty"`
	// The time when the user last logged in with this OAuth authentication
	LastLoginAt time.Time `json:"last_login_at,omitempty"`
	// The time when the user last failed to log in with this OAuth authentication
	LastFailedLoginAt time.Time `json:"last_failed_login_at,omitempty"`
	// The number of consecutive failed login attempts for this OAuth authentication
	FailedLoginAttempts int `json:"failed_login_attempts,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OAuthAuthQuery when eager-loading is set.
	Edges        OAuthAuthEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OAuthAuthEdges holds the relations/edges for other nodes in the graph.
type OAuthAuthEdges struct {
	// The authentication account associated with this OAuth authentication
	AuthAccount *AuthAccount `json:"auth_account,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AuthAccountOrErr returns the AuthAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OAuthAuthEdges) AuthAccountOrErr() (*AuthAccount, error) {
	if e.AuthAccount != nil {
		return e.AuthAccount, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: authaccount.Label}
	}
	return nil, &NotLoadedError{edge: "auth_account"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OAuthAuth) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthauth.FieldIsActive, oauthauth.FieldIsVerified:
			values[i] = new(sql.NullBool)
		case oauthauth.FieldFailedLoginAttempts:
			values[i] = new(sql.NullInt64)
		case oauthauth.FieldProvider, oauthauth.FieldProviderID, oauthauth.FieldEmail:
			values[i] = new(sql.NullString)
		case oauthauth.FieldCreatedAt, oauthauth.FieldUpdatedAt, oauthauth.FieldLastLoginAt, oauthauth.FieldLastFailedLoginAt:
			values[i] = new(sql.NullTime)
		case oauthauth.FieldID, oauthauth.FieldAuthAccountID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OAuthAuth fields.
func (oa *OAuthAuth) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthauth.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				oa.ID = *value
			}
		case oauthauth.FieldAuthAccountID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field auth_account_id", values[i])
			} else if value != nil {
				oa.AuthAccountID = *value
			}
		case oauthauth.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				oa.Provider = oauthauth.Provider(value.String)
			}
		case oauthauth.FieldProviderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				oa.ProviderID = value.String
			}
		case oauthauth.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				oa.IsActive = value.Bool
			}
		case oauthauth.FieldIsVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_verified", values[i])
			} else if value.Valid {
				oa.IsVerified = value.Bool
			}
		case oauthauth.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oa.CreatedAt = value.Time
			}
		case oauthauth.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oa.UpdatedAt = value.Time
			}
		case oauthauth.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				oa.Email = value.String
			}
		case oauthauth.FieldLastLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_at", values[i])
			} else if value.Valid {
				oa.LastLoginAt = value.Time
			}
		case oauthauth.FieldLastFailedLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_failed_login_at", values[i])
			} else if value.Valid {
				oa.LastFailedLoginAt = value.Time
			}
		case oauthauth.FieldFailedLoginAttempts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field failed_login_attempts", values[i])
			} else if value.Valid {
				oa.FailedLoginAttempts = int(value.Int64)
			}
		default:
			oa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OAuthAuth.
// This includes values selected through modifiers, order, etc.
func (oa *OAuthAuth) Value(name string) (ent.Value, error) {
	return oa.selectValues.Get(name)
}

// QueryAuthAccount queries the "auth_account" edge of the OAuthAuth entity.
func (oa *OAuthAuth) QueryAuthAccount() *AuthAccountQuery {
	return NewOAuthAuthClient(oa.config).QueryAuthAccount(oa)
}

// Update returns a builder for updating this OAuthAuth.
// Note that you need to call OAuthAuth.Unwrap() before calling this method if this OAuthAuth
// was returned from a transaction, and the transaction was committed or rolled back.
func (oa *OAuthAuth) Update() *OAuthAuthUpdateOne {
	return NewOAuthAuthClient(oa.config).UpdateOne(oa)
}

// Unwrap unwraps the OAuthAuth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oa *OAuthAuth) Unwrap() *OAuthAuth {
	_tx, ok := oa.config.driver.(*txDriver)
	if !ok {
		panic("ent: OAuthAuth is not a transactional entity")
	}
	oa.config.driver = _tx.drv
	return oa
}

// String implements the fmt.Stringer.
func (oa *OAuthAuth) String() string {
	var builder strings.Builder
	builder.WriteString("OAuthAuth(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oa.ID))
	builder.WriteString("auth_account_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.AuthAccountID))
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(fmt.Sprintf("%v", oa.Provider))
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(oa.ProviderID)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", oa.IsActive))
	builder.WriteString(", ")
	builder.WriteString("is_verified=")
	builder.WriteString(fmt.Sprintf("%v", oa.IsVerified))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(oa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(oa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(oa.Email)
	builder.WriteString(", ")
	builder.WriteString("last_login_at=")
	builder.WriteString(oa.LastLoginAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_failed_login_at=")
	builder.WriteString(oa.LastFailedLoginAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("failed_login_attempts=")
	builder.WriteString(fmt.Sprintf("%v", oa.FailedLoginAttempts))
	builder.WriteByte(')')
	return builder.String()
}

// OAuthAuths is a parsable slice of OAuthAuth.
type OAuthAuths []*OAuthAuth
