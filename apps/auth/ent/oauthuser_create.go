// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"mandacode.com/accounts/auth/ent/oauthuser"
)

// OAuthUserCreate is the builder for creating a OAuthUser entity.
type OAuthUserCreate struct {
	config
	mutation *OAuthUserMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (ouc *OAuthUserCreate) SetEmail(s string) *OAuthUserCreate {
	ouc.mutation.SetEmail(s)
	return ouc
}

// SetProvider sets the "provider" field.
func (ouc *OAuthUserCreate) SetProvider(o oauthuser.Provider) *OAuthUserCreate {
	ouc.mutation.SetProvider(o)
	return ouc
}

// SetProviderID sets the "provider_id" field.
func (ouc *OAuthUserCreate) SetProviderID(s string) *OAuthUserCreate {
	ouc.mutation.SetProviderID(s)
	return ouc
}

// SetIsActive sets the "is_active" field.
func (ouc *OAuthUserCreate) SetIsActive(b bool) *OAuthUserCreate {
	ouc.mutation.SetIsActive(b)
	return ouc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ouc *OAuthUserCreate) SetNillableIsActive(b *bool) *OAuthUserCreate {
	if b != nil {
		ouc.SetIsActive(*b)
	}
	return ouc
}

// SetIsVerified sets the "is_verified" field.
func (ouc *OAuthUserCreate) SetIsVerified(b bool) *OAuthUserCreate {
	ouc.mutation.SetIsVerified(b)
	return ouc
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (ouc *OAuthUserCreate) SetNillableIsVerified(b *bool) *OAuthUserCreate {
	if b != nil {
		ouc.SetIsVerified(*b)
	}
	return ouc
}

// SetID sets the "id" field.
func (ouc *OAuthUserCreate) SetID(u uuid.UUID) *OAuthUserCreate {
	ouc.mutation.SetID(u)
	return ouc
}

// Mutation returns the OAuthUserMutation object of the builder.
func (ouc *OAuthUserCreate) Mutation() *OAuthUserMutation {
	return ouc.mutation
}

// Save creates the OAuthUser in the database.
func (ouc *OAuthUserCreate) Save(ctx context.Context) (*OAuthUser, error) {
	ouc.defaults()
	return withHooks(ctx, ouc.sqlSave, ouc.mutation, ouc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ouc *OAuthUserCreate) SaveX(ctx context.Context) *OAuthUser {
	v, err := ouc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ouc *OAuthUserCreate) Exec(ctx context.Context) error {
	_, err := ouc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouc *OAuthUserCreate) ExecX(ctx context.Context) {
	if err := ouc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouc *OAuthUserCreate) defaults() {
	if _, ok := ouc.mutation.IsActive(); !ok {
		v := oauthuser.DefaultIsActive
		ouc.mutation.SetIsActive(v)
	}
	if _, ok := ouc.mutation.IsVerified(); !ok {
		v := oauthuser.DefaultIsVerified
		ouc.mutation.SetIsVerified(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouc *OAuthUserCreate) check() error {
	if _, ok := ouc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "OAuthUser.email"`)}
	}
	if v, ok := ouc.mutation.Email(); ok {
		if err := oauthuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "OAuthUser.email": %w`, err)}
		}
	}
	if _, ok := ouc.mutation.Provider(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required field "OAuthUser.provider"`)}
	}
	if v, ok := ouc.mutation.Provider(); ok {
		if err := oauthuser.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "OAuthUser.provider": %w`, err)}
		}
	}
	if _, ok := ouc.mutation.ProviderID(); !ok {
		return &ValidationError{Name: "provider_id", err: errors.New(`ent: missing required field "OAuthUser.provider_id"`)}
	}
	if v, ok := ouc.mutation.ProviderID(); ok {
		if err := oauthuser.ProviderIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_id", err: fmt.Errorf(`ent: validator failed for field "OAuthUser.provider_id": %w`, err)}
		}
	}
	if _, ok := ouc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "OAuthUser.is_active"`)}
	}
	if _, ok := ouc.mutation.IsVerified(); !ok {
		return &ValidationError{Name: "is_verified", err: errors.New(`ent: missing required field "OAuthUser.is_verified"`)}
	}
	return nil
}

func (ouc *OAuthUserCreate) sqlSave(ctx context.Context) (*OAuthUser, error) {
	if err := ouc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ouc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ouc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ouc.mutation.id = &_node.ID
	ouc.mutation.done = true
	return _node, nil
}

func (ouc *OAuthUserCreate) createSpec() (*OAuthUser, *sqlgraph.CreateSpec) {
	var (
		_node = &OAuthUser{config: ouc.config}
		_spec = sqlgraph.NewCreateSpec(oauthuser.Table, sqlgraph.NewFieldSpec(oauthuser.FieldID, field.TypeUUID))
	)
	_spec.Schema = ouc.schemaConfig.OAuthUser
	if id, ok := ouc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ouc.mutation.Email(); ok {
		_spec.SetField(oauthuser.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := ouc.mutation.Provider(); ok {
		_spec.SetField(oauthuser.FieldProvider, field.TypeEnum, value)
		_node.Provider = value
	}
	if value, ok := ouc.mutation.ProviderID(); ok {
		_spec.SetField(oauthuser.FieldProviderID, field.TypeString, value)
		_node.ProviderID = value
	}
	if value, ok := ouc.mutation.IsActive(); ok {
		_spec.SetField(oauthuser.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := ouc.mutation.IsVerified(); ok {
		_spec.SetField(oauthuser.FieldIsVerified, field.TypeBool, value)
		_node.IsVerified = value
	}
	return _node, _spec
}

// OAuthUserCreateBulk is the builder for creating many OAuthUser entities in bulk.
type OAuthUserCreateBulk struct {
	config
	err      error
	builders []*OAuthUserCreate
}

// Save creates the OAuthUser entities in the database.
func (oucb *OAuthUserCreateBulk) Save(ctx context.Context) ([]*OAuthUser, error) {
	if oucb.err != nil {
		return nil, oucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oucb.builders))
	nodes := make([]*OAuthUser, len(oucb.builders))
	mutators := make([]Mutator, len(oucb.builders))
	for i := range oucb.builders {
		func(i int, root context.Context) {
			builder := oucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OAuthUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oucb *OAuthUserCreateBulk) SaveX(ctx context.Context) []*OAuthUser {
	v, err := oucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oucb *OAuthUserCreateBulk) Exec(ctx context.Context) error {
	_, err := oucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oucb *OAuthUserCreateBulk) ExecX(ctx context.Context) {
	if err := oucb.Exec(ctx); err != nil {
		panic(err)
	}
}
