// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"mandacode.com/accounts/auth/ent/internal"
	"mandacode.com/accounts/auth/ent/localuser"
	"mandacode.com/accounts/auth/ent/predicate"
)

// LocalUserUpdate is the builder for updating LocalUser entities.
type LocalUserUpdate struct {
	config
	hooks    []Hook
	mutation *LocalUserMutation
}

// Where appends a list predicates to the LocalUserUpdate builder.
func (luu *LocalUserUpdate) Where(ps ...predicate.LocalUser) *LocalUserUpdate {
	luu.mutation.Where(ps...)
	return luu
}

// SetEmail sets the "email" field.
func (luu *LocalUserUpdate) SetEmail(s string) *LocalUserUpdate {
	luu.mutation.SetEmail(s)
	return luu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (luu *LocalUserUpdate) SetNillableEmail(s *string) *LocalUserUpdate {
	if s != nil {
		luu.SetEmail(*s)
	}
	return luu
}

// SetPassword sets the "password" field.
func (luu *LocalUserUpdate) SetPassword(s string) *LocalUserUpdate {
	luu.mutation.SetPassword(s)
	return luu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (luu *LocalUserUpdate) SetNillablePassword(s *string) *LocalUserUpdate {
	if s != nil {
		luu.SetPassword(*s)
	}
	return luu
}

// SetIsActive sets the "is_active" field.
func (luu *LocalUserUpdate) SetIsActive(b bool) *LocalUserUpdate {
	luu.mutation.SetIsActive(b)
	return luu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (luu *LocalUserUpdate) SetNillableIsActive(b *bool) *LocalUserUpdate {
	if b != nil {
		luu.SetIsActive(*b)
	}
	return luu
}

// SetIsVerified sets the "is_verified" field.
func (luu *LocalUserUpdate) SetIsVerified(b bool) *LocalUserUpdate {
	luu.mutation.SetIsVerified(b)
	return luu
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (luu *LocalUserUpdate) SetNillableIsVerified(b *bool) *LocalUserUpdate {
	if b != nil {
		luu.SetIsVerified(*b)
	}
	return luu
}

// Mutation returns the LocalUserMutation object of the builder.
func (luu *LocalUserUpdate) Mutation() *LocalUserMutation {
	return luu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (luu *LocalUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, luu.sqlSave, luu.mutation, luu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luu *LocalUserUpdate) SaveX(ctx context.Context) int {
	affected, err := luu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (luu *LocalUserUpdate) Exec(ctx context.Context) error {
	_, err := luu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luu *LocalUserUpdate) ExecX(ctx context.Context) {
	if err := luu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luu *LocalUserUpdate) check() error {
	if v, ok := luu.mutation.Email(); ok {
		if err := localuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "LocalUser.email": %w`, err)}
		}
	}
	if v, ok := luu.mutation.Password(); ok {
		if err := localuser.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "LocalUser.password": %w`, err)}
		}
	}
	return nil
}

func (luu *LocalUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := luu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(localuser.Table, localuser.Columns, sqlgraph.NewFieldSpec(localuser.FieldID, field.TypeUUID))
	if ps := luu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luu.mutation.Email(); ok {
		_spec.SetField(localuser.FieldEmail, field.TypeString, value)
	}
	if value, ok := luu.mutation.Password(); ok {
		_spec.SetField(localuser.FieldPassword, field.TypeString, value)
	}
	if value, ok := luu.mutation.IsActive(); ok {
		_spec.SetField(localuser.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := luu.mutation.IsVerified(); ok {
		_spec.SetField(localuser.FieldIsVerified, field.TypeBool, value)
	}
	_spec.Node.Schema = luu.schemaConfig.LocalUser
	ctx = internal.NewSchemaConfigContext(ctx, luu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, luu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{localuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	luu.mutation.done = true
	return n, nil
}

// LocalUserUpdateOne is the builder for updating a single LocalUser entity.
type LocalUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LocalUserMutation
}

// SetEmail sets the "email" field.
func (luuo *LocalUserUpdateOne) SetEmail(s string) *LocalUserUpdateOne {
	luuo.mutation.SetEmail(s)
	return luuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (luuo *LocalUserUpdateOne) SetNillableEmail(s *string) *LocalUserUpdateOne {
	if s != nil {
		luuo.SetEmail(*s)
	}
	return luuo
}

// SetPassword sets the "password" field.
func (luuo *LocalUserUpdateOne) SetPassword(s string) *LocalUserUpdateOne {
	luuo.mutation.SetPassword(s)
	return luuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (luuo *LocalUserUpdateOne) SetNillablePassword(s *string) *LocalUserUpdateOne {
	if s != nil {
		luuo.SetPassword(*s)
	}
	return luuo
}

// SetIsActive sets the "is_active" field.
func (luuo *LocalUserUpdateOne) SetIsActive(b bool) *LocalUserUpdateOne {
	luuo.mutation.SetIsActive(b)
	return luuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (luuo *LocalUserUpdateOne) SetNillableIsActive(b *bool) *LocalUserUpdateOne {
	if b != nil {
		luuo.SetIsActive(*b)
	}
	return luuo
}

// SetIsVerified sets the "is_verified" field.
func (luuo *LocalUserUpdateOne) SetIsVerified(b bool) *LocalUserUpdateOne {
	luuo.mutation.SetIsVerified(b)
	return luuo
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (luuo *LocalUserUpdateOne) SetNillableIsVerified(b *bool) *LocalUserUpdateOne {
	if b != nil {
		luuo.SetIsVerified(*b)
	}
	return luuo
}

// Mutation returns the LocalUserMutation object of the builder.
func (luuo *LocalUserUpdateOne) Mutation() *LocalUserMutation {
	return luuo.mutation
}

// Where appends a list predicates to the LocalUserUpdate builder.
func (luuo *LocalUserUpdateOne) Where(ps ...predicate.LocalUser) *LocalUserUpdateOne {
	luuo.mutation.Where(ps...)
	return luuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luuo *LocalUserUpdateOne) Select(field string, fields ...string) *LocalUserUpdateOne {
	luuo.fields = append([]string{field}, fields...)
	return luuo
}

// Save executes the query and returns the updated LocalUser entity.
func (luuo *LocalUserUpdateOne) Save(ctx context.Context) (*LocalUser, error) {
	return withHooks(ctx, luuo.sqlSave, luuo.mutation, luuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luuo *LocalUserUpdateOne) SaveX(ctx context.Context) *LocalUser {
	node, err := luuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luuo *LocalUserUpdateOne) Exec(ctx context.Context) error {
	_, err := luuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luuo *LocalUserUpdateOne) ExecX(ctx context.Context) {
	if err := luuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luuo *LocalUserUpdateOne) check() error {
	if v, ok := luuo.mutation.Email(); ok {
		if err := localuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "LocalUser.email": %w`, err)}
		}
	}
	if v, ok := luuo.mutation.Password(); ok {
		if err := localuser.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "LocalUser.password": %w`, err)}
		}
	}
	return nil
}

func (luuo *LocalUserUpdateOne) sqlSave(ctx context.Context) (_node *LocalUser, err error) {
	if err := luuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(localuser.Table, localuser.Columns, sqlgraph.NewFieldSpec(localuser.FieldID, field.TypeUUID))
	id, ok := luuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LocalUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, localuser.FieldID)
		for _, f := range fields {
			if !localuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != localuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luuo.mutation.Email(); ok {
		_spec.SetField(localuser.FieldEmail, field.TypeString, value)
	}
	if value, ok := luuo.mutation.Password(); ok {
		_spec.SetField(localuser.FieldPassword, field.TypeString, value)
	}
	if value, ok := luuo.mutation.IsActive(); ok {
		_spec.SetField(localuser.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := luuo.mutation.IsVerified(); ok {
		_spec.SetField(localuser.FieldIsVerified, field.TypeBool, value)
	}
	_spec.Node.Schema = luuo.schemaConfig.LocalUser
	ctx = internal.NewSchemaConfigContext(ctx, luuo.schemaConfig)
	_node = &LocalUser{config: luuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{localuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luuo.mutation.done = true
	return _node, nil
}
