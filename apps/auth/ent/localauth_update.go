// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"mandacode.com/accounts/auth/ent/authaccount"
	"mandacode.com/accounts/auth/ent/localauth"
	"mandacode.com/accounts/auth/ent/predicate"
)

// LocalAuthUpdate is the builder for updating LocalAuth entities.
type LocalAuthUpdate struct {
	config
	hooks    []Hook
	mutation *LocalAuthMutation
}

// Where appends a list predicates to the LocalAuthUpdate builder.
func (lau *LocalAuthUpdate) Where(ps ...predicate.LocalAuth) *LocalAuthUpdate {
	lau.mutation.Where(ps...)
	return lau
}

// SetAuthAccountID sets the "auth_account_id" field.
func (lau *LocalAuthUpdate) SetAuthAccountID(u uuid.UUID) *LocalAuthUpdate {
	lau.mutation.SetAuthAccountID(u)
	return lau
}

// SetNillableAuthAccountID sets the "auth_account_id" field if the given value is not nil.
func (lau *LocalAuthUpdate) SetNillableAuthAccountID(u *uuid.UUID) *LocalAuthUpdate {
	if u != nil {
		lau.SetAuthAccountID(*u)
	}
	return lau
}

// SetEmail sets the "email" field.
func (lau *LocalAuthUpdate) SetEmail(s string) *LocalAuthUpdate {
	lau.mutation.SetEmail(s)
	return lau
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (lau *LocalAuthUpdate) SetNillableEmail(s *string) *LocalAuthUpdate {
	if s != nil {
		lau.SetEmail(*s)
	}
	return lau
}

// SetPassword sets the "password" field.
func (lau *LocalAuthUpdate) SetPassword(s string) *LocalAuthUpdate {
	lau.mutation.SetPassword(s)
	return lau
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (lau *LocalAuthUpdate) SetNillablePassword(s *string) *LocalAuthUpdate {
	if s != nil {
		lau.SetPassword(*s)
	}
	return lau
}

// SetIsActive sets the "is_active" field.
func (lau *LocalAuthUpdate) SetIsActive(b bool) *LocalAuthUpdate {
	lau.mutation.SetIsActive(b)
	return lau
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (lau *LocalAuthUpdate) SetNillableIsActive(b *bool) *LocalAuthUpdate {
	if b != nil {
		lau.SetIsActive(*b)
	}
	return lau
}

// SetIsVerified sets the "is_verified" field.
func (lau *LocalAuthUpdate) SetIsVerified(b bool) *LocalAuthUpdate {
	lau.mutation.SetIsVerified(b)
	return lau
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (lau *LocalAuthUpdate) SetNillableIsVerified(b *bool) *LocalAuthUpdate {
	if b != nil {
		lau.SetIsVerified(*b)
	}
	return lau
}

// SetUpdatedAt sets the "updated_at" field.
func (lau *LocalAuthUpdate) SetUpdatedAt(t time.Time) *LocalAuthUpdate {
	lau.mutation.SetUpdatedAt(t)
	return lau
}

// SetLastLoginAt sets the "last_login_at" field.
func (lau *LocalAuthUpdate) SetLastLoginAt(t time.Time) *LocalAuthUpdate {
	lau.mutation.SetLastLoginAt(t)
	return lau
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (lau *LocalAuthUpdate) SetNillableLastLoginAt(t *time.Time) *LocalAuthUpdate {
	if t != nil {
		lau.SetLastLoginAt(*t)
	}
	return lau
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (lau *LocalAuthUpdate) ClearLastLoginAt() *LocalAuthUpdate {
	lau.mutation.ClearLastLoginAt()
	return lau
}

// SetLastFailedLoginAt sets the "last_failed_login_at" field.
func (lau *LocalAuthUpdate) SetLastFailedLoginAt(t time.Time) *LocalAuthUpdate {
	lau.mutation.SetLastFailedLoginAt(t)
	return lau
}

// SetNillableLastFailedLoginAt sets the "last_failed_login_at" field if the given value is not nil.
func (lau *LocalAuthUpdate) SetNillableLastFailedLoginAt(t *time.Time) *LocalAuthUpdate {
	if t != nil {
		lau.SetLastFailedLoginAt(*t)
	}
	return lau
}

// ClearLastFailedLoginAt clears the value of the "last_failed_login_at" field.
func (lau *LocalAuthUpdate) ClearLastFailedLoginAt() *LocalAuthUpdate {
	lau.mutation.ClearLastFailedLoginAt()
	return lau
}

// SetFailedLoginAttempts sets the "failed_login_attempts" field.
func (lau *LocalAuthUpdate) SetFailedLoginAttempts(i int) *LocalAuthUpdate {
	lau.mutation.ResetFailedLoginAttempts()
	lau.mutation.SetFailedLoginAttempts(i)
	return lau
}

// SetNillableFailedLoginAttempts sets the "failed_login_attempts" field if the given value is not nil.
func (lau *LocalAuthUpdate) SetNillableFailedLoginAttempts(i *int) *LocalAuthUpdate {
	if i != nil {
		lau.SetFailedLoginAttempts(*i)
	}
	return lau
}

// AddFailedLoginAttempts adds i to the "failed_login_attempts" field.
func (lau *LocalAuthUpdate) AddFailedLoginAttempts(i int) *LocalAuthUpdate {
	lau.mutation.AddFailedLoginAttempts(i)
	return lau
}

// SetAuthAccount sets the "auth_account" edge to the AuthAccount entity.
func (lau *LocalAuthUpdate) SetAuthAccount(a *AuthAccount) *LocalAuthUpdate {
	return lau.SetAuthAccountID(a.ID)
}

// Mutation returns the LocalAuthMutation object of the builder.
func (lau *LocalAuthUpdate) Mutation() *LocalAuthMutation {
	return lau.mutation
}

// ClearAuthAccount clears the "auth_account" edge to the AuthAccount entity.
func (lau *LocalAuthUpdate) ClearAuthAccount() *LocalAuthUpdate {
	lau.mutation.ClearAuthAccount()
	return lau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lau *LocalAuthUpdate) Save(ctx context.Context) (int, error) {
	lau.defaults()
	return withHooks(ctx, lau.sqlSave, lau.mutation, lau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lau *LocalAuthUpdate) SaveX(ctx context.Context) int {
	affected, err := lau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lau *LocalAuthUpdate) Exec(ctx context.Context) error {
	_, err := lau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lau *LocalAuthUpdate) ExecX(ctx context.Context) {
	if err := lau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lau *LocalAuthUpdate) defaults() {
	if _, ok := lau.mutation.UpdatedAt(); !ok {
		v := localauth.UpdateDefaultUpdatedAt()
		lau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lau *LocalAuthUpdate) check() error {
	if v, ok := lau.mutation.Email(); ok {
		if err := localauth.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "LocalAuth.email": %w`, err)}
		}
	}
	if v, ok := lau.mutation.Password(); ok {
		if err := localauth.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "LocalAuth.password": %w`, err)}
		}
	}
	if lau.mutation.AuthAccountCleared() && len(lau.mutation.AuthAccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LocalAuth.auth_account"`)
	}
	return nil
}

func (lau *LocalAuthUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(localauth.Table, localauth.Columns, sqlgraph.NewFieldSpec(localauth.FieldID, field.TypeUUID))
	if ps := lau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lau.mutation.Email(); ok {
		_spec.SetField(localauth.FieldEmail, field.TypeString, value)
	}
	if value, ok := lau.mutation.Password(); ok {
		_spec.SetField(localauth.FieldPassword, field.TypeString, value)
	}
	if value, ok := lau.mutation.IsActive(); ok {
		_spec.SetField(localauth.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := lau.mutation.IsVerified(); ok {
		_spec.SetField(localauth.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := lau.mutation.UpdatedAt(); ok {
		_spec.SetField(localauth.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lau.mutation.LastLoginAt(); ok {
		_spec.SetField(localauth.FieldLastLoginAt, field.TypeTime, value)
	}
	if lau.mutation.LastLoginAtCleared() {
		_spec.ClearField(localauth.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := lau.mutation.LastFailedLoginAt(); ok {
		_spec.SetField(localauth.FieldLastFailedLoginAt, field.TypeTime, value)
	}
	if lau.mutation.LastFailedLoginAtCleared() {
		_spec.ClearField(localauth.FieldLastFailedLoginAt, field.TypeTime)
	}
	if value, ok := lau.mutation.FailedLoginAttempts(); ok {
		_spec.SetField(localauth.FieldFailedLoginAttempts, field.TypeInt, value)
	}
	if value, ok := lau.mutation.AddedFailedLoginAttempts(); ok {
		_spec.AddField(localauth.FieldFailedLoginAttempts, field.TypeInt, value)
	}
	if lau.mutation.AuthAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   localauth.AuthAccountTable,
			Columns: []string{localauth.AuthAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authaccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lau.mutation.AuthAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   localauth.AuthAccountTable,
			Columns: []string{localauth.AuthAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authaccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{localauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lau.mutation.done = true
	return n, nil
}

// LocalAuthUpdateOne is the builder for updating a single LocalAuth entity.
type LocalAuthUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LocalAuthMutation
}

// SetAuthAccountID sets the "auth_account_id" field.
func (lauo *LocalAuthUpdateOne) SetAuthAccountID(u uuid.UUID) *LocalAuthUpdateOne {
	lauo.mutation.SetAuthAccountID(u)
	return lauo
}

// SetNillableAuthAccountID sets the "auth_account_id" field if the given value is not nil.
func (lauo *LocalAuthUpdateOne) SetNillableAuthAccountID(u *uuid.UUID) *LocalAuthUpdateOne {
	if u != nil {
		lauo.SetAuthAccountID(*u)
	}
	return lauo
}

// SetEmail sets the "email" field.
func (lauo *LocalAuthUpdateOne) SetEmail(s string) *LocalAuthUpdateOne {
	lauo.mutation.SetEmail(s)
	return lauo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (lauo *LocalAuthUpdateOne) SetNillableEmail(s *string) *LocalAuthUpdateOne {
	if s != nil {
		lauo.SetEmail(*s)
	}
	return lauo
}

// SetPassword sets the "password" field.
func (lauo *LocalAuthUpdateOne) SetPassword(s string) *LocalAuthUpdateOne {
	lauo.mutation.SetPassword(s)
	return lauo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (lauo *LocalAuthUpdateOne) SetNillablePassword(s *string) *LocalAuthUpdateOne {
	if s != nil {
		lauo.SetPassword(*s)
	}
	return lauo
}

// SetIsActive sets the "is_active" field.
func (lauo *LocalAuthUpdateOne) SetIsActive(b bool) *LocalAuthUpdateOne {
	lauo.mutation.SetIsActive(b)
	return lauo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (lauo *LocalAuthUpdateOne) SetNillableIsActive(b *bool) *LocalAuthUpdateOne {
	if b != nil {
		lauo.SetIsActive(*b)
	}
	return lauo
}

// SetIsVerified sets the "is_verified" field.
func (lauo *LocalAuthUpdateOne) SetIsVerified(b bool) *LocalAuthUpdateOne {
	lauo.mutation.SetIsVerified(b)
	return lauo
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (lauo *LocalAuthUpdateOne) SetNillableIsVerified(b *bool) *LocalAuthUpdateOne {
	if b != nil {
		lauo.SetIsVerified(*b)
	}
	return lauo
}

// SetUpdatedAt sets the "updated_at" field.
func (lauo *LocalAuthUpdateOne) SetUpdatedAt(t time.Time) *LocalAuthUpdateOne {
	lauo.mutation.SetUpdatedAt(t)
	return lauo
}

// SetLastLoginAt sets the "last_login_at" field.
func (lauo *LocalAuthUpdateOne) SetLastLoginAt(t time.Time) *LocalAuthUpdateOne {
	lauo.mutation.SetLastLoginAt(t)
	return lauo
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (lauo *LocalAuthUpdateOne) SetNillableLastLoginAt(t *time.Time) *LocalAuthUpdateOne {
	if t != nil {
		lauo.SetLastLoginAt(*t)
	}
	return lauo
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (lauo *LocalAuthUpdateOne) ClearLastLoginAt() *LocalAuthUpdateOne {
	lauo.mutation.ClearLastLoginAt()
	return lauo
}

// SetLastFailedLoginAt sets the "last_failed_login_at" field.
func (lauo *LocalAuthUpdateOne) SetLastFailedLoginAt(t time.Time) *LocalAuthUpdateOne {
	lauo.mutation.SetLastFailedLoginAt(t)
	return lauo
}

// SetNillableLastFailedLoginAt sets the "last_failed_login_at" field if the given value is not nil.
func (lauo *LocalAuthUpdateOne) SetNillableLastFailedLoginAt(t *time.Time) *LocalAuthUpdateOne {
	if t != nil {
		lauo.SetLastFailedLoginAt(*t)
	}
	return lauo
}

// ClearLastFailedLoginAt clears the value of the "last_failed_login_at" field.
func (lauo *LocalAuthUpdateOne) ClearLastFailedLoginAt() *LocalAuthUpdateOne {
	lauo.mutation.ClearLastFailedLoginAt()
	return lauo
}

// SetFailedLoginAttempts sets the "failed_login_attempts" field.
func (lauo *LocalAuthUpdateOne) SetFailedLoginAttempts(i int) *LocalAuthUpdateOne {
	lauo.mutation.ResetFailedLoginAttempts()
	lauo.mutation.SetFailedLoginAttempts(i)
	return lauo
}

// SetNillableFailedLoginAttempts sets the "failed_login_attempts" field if the given value is not nil.
func (lauo *LocalAuthUpdateOne) SetNillableFailedLoginAttempts(i *int) *LocalAuthUpdateOne {
	if i != nil {
		lauo.SetFailedLoginAttempts(*i)
	}
	return lauo
}

// AddFailedLoginAttempts adds i to the "failed_login_attempts" field.
func (lauo *LocalAuthUpdateOne) AddFailedLoginAttempts(i int) *LocalAuthUpdateOne {
	lauo.mutation.AddFailedLoginAttempts(i)
	return lauo
}

// SetAuthAccount sets the "auth_account" edge to the AuthAccount entity.
func (lauo *LocalAuthUpdateOne) SetAuthAccount(a *AuthAccount) *LocalAuthUpdateOne {
	return lauo.SetAuthAccountID(a.ID)
}

// Mutation returns the LocalAuthMutation object of the builder.
func (lauo *LocalAuthUpdateOne) Mutation() *LocalAuthMutation {
	return lauo.mutation
}

// ClearAuthAccount clears the "auth_account" edge to the AuthAccount entity.
func (lauo *LocalAuthUpdateOne) ClearAuthAccount() *LocalAuthUpdateOne {
	lauo.mutation.ClearAuthAccount()
	return lauo
}

// Where appends a list predicates to the LocalAuthUpdate builder.
func (lauo *LocalAuthUpdateOne) Where(ps ...predicate.LocalAuth) *LocalAuthUpdateOne {
	lauo.mutation.Where(ps...)
	return lauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lauo *LocalAuthUpdateOne) Select(field string, fields ...string) *LocalAuthUpdateOne {
	lauo.fields = append([]string{field}, fields...)
	return lauo
}

// Save executes the query and returns the updated LocalAuth entity.
func (lauo *LocalAuthUpdateOne) Save(ctx context.Context) (*LocalAuth, error) {
	lauo.defaults()
	return withHooks(ctx, lauo.sqlSave, lauo.mutation, lauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lauo *LocalAuthUpdateOne) SaveX(ctx context.Context) *LocalAuth {
	node, err := lauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lauo *LocalAuthUpdateOne) Exec(ctx context.Context) error {
	_, err := lauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lauo *LocalAuthUpdateOne) ExecX(ctx context.Context) {
	if err := lauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lauo *LocalAuthUpdateOne) defaults() {
	if _, ok := lauo.mutation.UpdatedAt(); !ok {
		v := localauth.UpdateDefaultUpdatedAt()
		lauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lauo *LocalAuthUpdateOne) check() error {
	if v, ok := lauo.mutation.Email(); ok {
		if err := localauth.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "LocalAuth.email": %w`, err)}
		}
	}
	if v, ok := lauo.mutation.Password(); ok {
		if err := localauth.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "LocalAuth.password": %w`, err)}
		}
	}
	if lauo.mutation.AuthAccountCleared() && len(lauo.mutation.AuthAccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LocalAuth.auth_account"`)
	}
	return nil
}

func (lauo *LocalAuthUpdateOne) sqlSave(ctx context.Context) (_node *LocalAuth, err error) {
	if err := lauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(localauth.Table, localauth.Columns, sqlgraph.NewFieldSpec(localauth.FieldID, field.TypeUUID))
	id, ok := lauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LocalAuth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, localauth.FieldID)
		for _, f := range fields {
			if !localauth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != localauth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lauo.mutation.Email(); ok {
		_spec.SetField(localauth.FieldEmail, field.TypeString, value)
	}
	if value, ok := lauo.mutation.Password(); ok {
		_spec.SetField(localauth.FieldPassword, field.TypeString, value)
	}
	if value, ok := lauo.mutation.IsActive(); ok {
		_spec.SetField(localauth.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := lauo.mutation.IsVerified(); ok {
		_spec.SetField(localauth.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := lauo.mutation.UpdatedAt(); ok {
		_spec.SetField(localauth.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lauo.mutation.LastLoginAt(); ok {
		_spec.SetField(localauth.FieldLastLoginAt, field.TypeTime, value)
	}
	if lauo.mutation.LastLoginAtCleared() {
		_spec.ClearField(localauth.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := lauo.mutation.LastFailedLoginAt(); ok {
		_spec.SetField(localauth.FieldLastFailedLoginAt, field.TypeTime, value)
	}
	if lauo.mutation.LastFailedLoginAtCleared() {
		_spec.ClearField(localauth.FieldLastFailedLoginAt, field.TypeTime)
	}
	if value, ok := lauo.mutation.FailedLoginAttempts(); ok {
		_spec.SetField(localauth.FieldFailedLoginAttempts, field.TypeInt, value)
	}
	if value, ok := lauo.mutation.AddedFailedLoginAttempts(); ok {
		_spec.AddField(localauth.FieldFailedLoginAttempts, field.TypeInt, value)
	}
	if lauo.mutation.AuthAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   localauth.AuthAccountTable,
			Columns: []string{localauth.AuthAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authaccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lauo.mutation.AuthAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   localauth.AuthAccountTable,
			Columns: []string{localauth.AuthAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authaccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LocalAuth{config: lauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{localauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lauo.mutation.done = true
	return _node, nil
}
