// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"mandacode.com/accounts/auth/ent/authaccount"
	"mandacode.com/accounts/auth/ent/oauthauth"
	"mandacode.com/accounts/auth/ent/predicate"
)

// OAuthAuthUpdate is the builder for updating OAuthAuth entities.
type OAuthAuthUpdate struct {
	config
	hooks    []Hook
	mutation *OAuthAuthMutation
}

// Where appends a list predicates to the OAuthAuthUpdate builder.
func (oau *OAuthAuthUpdate) Where(ps ...predicate.OAuthAuth) *OAuthAuthUpdate {
	oau.mutation.Where(ps...)
	return oau
}

// SetAuthAccountID sets the "auth_account_id" field.
func (oau *OAuthAuthUpdate) SetAuthAccountID(u uuid.UUID) *OAuthAuthUpdate {
	oau.mutation.SetAuthAccountID(u)
	return oau
}

// SetNillableAuthAccountID sets the "auth_account_id" field if the given value is not nil.
func (oau *OAuthAuthUpdate) SetNillableAuthAccountID(u *uuid.UUID) *OAuthAuthUpdate {
	if u != nil {
		oau.SetAuthAccountID(*u)
	}
	return oau
}

// SetProvider sets the "provider" field.
func (oau *OAuthAuthUpdate) SetProvider(o oauthauth.Provider) *OAuthAuthUpdate {
	oau.mutation.SetProvider(o)
	return oau
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (oau *OAuthAuthUpdate) SetNillableProvider(o *oauthauth.Provider) *OAuthAuthUpdate {
	if o != nil {
		oau.SetProvider(*o)
	}
	return oau
}

// SetProviderID sets the "provider_id" field.
func (oau *OAuthAuthUpdate) SetProviderID(s string) *OAuthAuthUpdate {
	oau.mutation.SetProviderID(s)
	return oau
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (oau *OAuthAuthUpdate) SetNillableProviderID(s *string) *OAuthAuthUpdate {
	if s != nil {
		oau.SetProviderID(*s)
	}
	return oau
}

// SetIsActive sets the "is_active" field.
func (oau *OAuthAuthUpdate) SetIsActive(b bool) *OAuthAuthUpdate {
	oau.mutation.SetIsActive(b)
	return oau
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (oau *OAuthAuthUpdate) SetNillableIsActive(b *bool) *OAuthAuthUpdate {
	if b != nil {
		oau.SetIsActive(*b)
	}
	return oau
}

// SetIsVerified sets the "is_verified" field.
func (oau *OAuthAuthUpdate) SetIsVerified(b bool) *OAuthAuthUpdate {
	oau.mutation.SetIsVerified(b)
	return oau
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (oau *OAuthAuthUpdate) SetNillableIsVerified(b *bool) *OAuthAuthUpdate {
	if b != nil {
		oau.SetIsVerified(*b)
	}
	return oau
}

// SetUpdatedAt sets the "updated_at" field.
func (oau *OAuthAuthUpdate) SetUpdatedAt(t time.Time) *OAuthAuthUpdate {
	oau.mutation.SetUpdatedAt(t)
	return oau
}

// SetEmail sets the "email" field.
func (oau *OAuthAuthUpdate) SetEmail(s string) *OAuthAuthUpdate {
	oau.mutation.SetEmail(s)
	return oau
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (oau *OAuthAuthUpdate) SetNillableEmail(s *string) *OAuthAuthUpdate {
	if s != nil {
		oau.SetEmail(*s)
	}
	return oau
}

// ClearEmail clears the value of the "email" field.
func (oau *OAuthAuthUpdate) ClearEmail() *OAuthAuthUpdate {
	oau.mutation.ClearEmail()
	return oau
}

// SetLastLoginAt sets the "last_login_at" field.
func (oau *OAuthAuthUpdate) SetLastLoginAt(t time.Time) *OAuthAuthUpdate {
	oau.mutation.SetLastLoginAt(t)
	return oau
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (oau *OAuthAuthUpdate) SetNillableLastLoginAt(t *time.Time) *OAuthAuthUpdate {
	if t != nil {
		oau.SetLastLoginAt(*t)
	}
	return oau
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (oau *OAuthAuthUpdate) ClearLastLoginAt() *OAuthAuthUpdate {
	oau.mutation.ClearLastLoginAt()
	return oau
}

// SetLastFailedLoginAt sets the "last_failed_login_at" field.
func (oau *OAuthAuthUpdate) SetLastFailedLoginAt(t time.Time) *OAuthAuthUpdate {
	oau.mutation.SetLastFailedLoginAt(t)
	return oau
}

// SetNillableLastFailedLoginAt sets the "last_failed_login_at" field if the given value is not nil.
func (oau *OAuthAuthUpdate) SetNillableLastFailedLoginAt(t *time.Time) *OAuthAuthUpdate {
	if t != nil {
		oau.SetLastFailedLoginAt(*t)
	}
	return oau
}

// ClearLastFailedLoginAt clears the value of the "last_failed_login_at" field.
func (oau *OAuthAuthUpdate) ClearLastFailedLoginAt() *OAuthAuthUpdate {
	oau.mutation.ClearLastFailedLoginAt()
	return oau
}

// SetFailedLoginAttempts sets the "failed_login_attempts" field.
func (oau *OAuthAuthUpdate) SetFailedLoginAttempts(i int) *OAuthAuthUpdate {
	oau.mutation.ResetFailedLoginAttempts()
	oau.mutation.SetFailedLoginAttempts(i)
	return oau
}

// SetNillableFailedLoginAttempts sets the "failed_login_attempts" field if the given value is not nil.
func (oau *OAuthAuthUpdate) SetNillableFailedLoginAttempts(i *int) *OAuthAuthUpdate {
	if i != nil {
		oau.SetFailedLoginAttempts(*i)
	}
	return oau
}

// AddFailedLoginAttempts adds i to the "failed_login_attempts" field.
func (oau *OAuthAuthUpdate) AddFailedLoginAttempts(i int) *OAuthAuthUpdate {
	oau.mutation.AddFailedLoginAttempts(i)
	return oau
}

// SetAuthAccount sets the "auth_account" edge to the AuthAccount entity.
func (oau *OAuthAuthUpdate) SetAuthAccount(a *AuthAccount) *OAuthAuthUpdate {
	return oau.SetAuthAccountID(a.ID)
}

// Mutation returns the OAuthAuthMutation object of the builder.
func (oau *OAuthAuthUpdate) Mutation() *OAuthAuthMutation {
	return oau.mutation
}

// ClearAuthAccount clears the "auth_account" edge to the AuthAccount entity.
func (oau *OAuthAuthUpdate) ClearAuthAccount() *OAuthAuthUpdate {
	oau.mutation.ClearAuthAccount()
	return oau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oau *OAuthAuthUpdate) Save(ctx context.Context) (int, error) {
	oau.defaults()
	return withHooks(ctx, oau.sqlSave, oau.mutation, oau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oau *OAuthAuthUpdate) SaveX(ctx context.Context) int {
	affected, err := oau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oau *OAuthAuthUpdate) Exec(ctx context.Context) error {
	_, err := oau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oau *OAuthAuthUpdate) ExecX(ctx context.Context) {
	if err := oau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oau *OAuthAuthUpdate) defaults() {
	if _, ok := oau.mutation.UpdatedAt(); !ok {
		v := oauthauth.UpdateDefaultUpdatedAt()
		oau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oau *OAuthAuthUpdate) check() error {
	if v, ok := oau.mutation.Provider(); ok {
		if err := oauthauth.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "OAuthAuth.provider": %w`, err)}
		}
	}
	if v, ok := oau.mutation.ProviderID(); ok {
		if err := oauthauth.ProviderIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_id", err: fmt.Errorf(`ent: validator failed for field "OAuthAuth.provider_id": %w`, err)}
		}
	}
	if oau.mutation.AuthAccountCleared() && len(oau.mutation.AuthAccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OAuthAuth.auth_account"`)
	}
	return nil
}

func (oau *OAuthAuthUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthauth.Table, oauthauth.Columns, sqlgraph.NewFieldSpec(oauthauth.FieldID, field.TypeUUID))
	if ps := oau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oau.mutation.Provider(); ok {
		_spec.SetField(oauthauth.FieldProvider, field.TypeEnum, value)
	}
	if value, ok := oau.mutation.ProviderID(); ok {
		_spec.SetField(oauthauth.FieldProviderID, field.TypeString, value)
	}
	if value, ok := oau.mutation.IsActive(); ok {
		_spec.SetField(oauthauth.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := oau.mutation.IsVerified(); ok {
		_spec.SetField(oauthauth.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := oau.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthauth.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oau.mutation.Email(); ok {
		_spec.SetField(oauthauth.FieldEmail, field.TypeString, value)
	}
	if oau.mutation.EmailCleared() {
		_spec.ClearField(oauthauth.FieldEmail, field.TypeString)
	}
	if value, ok := oau.mutation.LastLoginAt(); ok {
		_spec.SetField(oauthauth.FieldLastLoginAt, field.TypeTime, value)
	}
	if oau.mutation.LastLoginAtCleared() {
		_spec.ClearField(oauthauth.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := oau.mutation.LastFailedLoginAt(); ok {
		_spec.SetField(oauthauth.FieldLastFailedLoginAt, field.TypeTime, value)
	}
	if oau.mutation.LastFailedLoginAtCleared() {
		_spec.ClearField(oauthauth.FieldLastFailedLoginAt, field.TypeTime)
	}
	if value, ok := oau.mutation.FailedLoginAttempts(); ok {
		_spec.SetField(oauthauth.FieldFailedLoginAttempts, field.TypeInt, value)
	}
	if value, ok := oau.mutation.AddedFailedLoginAttempts(); ok {
		_spec.AddField(oauthauth.FieldFailedLoginAttempts, field.TypeInt, value)
	}
	if oau.mutation.AuthAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauth.AuthAccountTable,
			Columns: []string{oauthauth.AuthAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authaccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.AuthAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauth.AuthAccountTable,
			Columns: []string{oauthauth.AuthAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authaccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oau.mutation.done = true
	return n, nil
}

// OAuthAuthUpdateOne is the builder for updating a single OAuthAuth entity.
type OAuthAuthUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OAuthAuthMutation
}

// SetAuthAccountID sets the "auth_account_id" field.
func (oauo *OAuthAuthUpdateOne) SetAuthAccountID(u uuid.UUID) *OAuthAuthUpdateOne {
	oauo.mutation.SetAuthAccountID(u)
	return oauo
}

// SetNillableAuthAccountID sets the "auth_account_id" field if the given value is not nil.
func (oauo *OAuthAuthUpdateOne) SetNillableAuthAccountID(u *uuid.UUID) *OAuthAuthUpdateOne {
	if u != nil {
		oauo.SetAuthAccountID(*u)
	}
	return oauo
}

// SetProvider sets the "provider" field.
func (oauo *OAuthAuthUpdateOne) SetProvider(o oauthauth.Provider) *OAuthAuthUpdateOne {
	oauo.mutation.SetProvider(o)
	return oauo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (oauo *OAuthAuthUpdateOne) SetNillableProvider(o *oauthauth.Provider) *OAuthAuthUpdateOne {
	if o != nil {
		oauo.SetProvider(*o)
	}
	return oauo
}

// SetProviderID sets the "provider_id" field.
func (oauo *OAuthAuthUpdateOne) SetProviderID(s string) *OAuthAuthUpdateOne {
	oauo.mutation.SetProviderID(s)
	return oauo
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (oauo *OAuthAuthUpdateOne) SetNillableProviderID(s *string) *OAuthAuthUpdateOne {
	if s != nil {
		oauo.SetProviderID(*s)
	}
	return oauo
}

// SetIsActive sets the "is_active" field.
func (oauo *OAuthAuthUpdateOne) SetIsActive(b bool) *OAuthAuthUpdateOne {
	oauo.mutation.SetIsActive(b)
	return oauo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (oauo *OAuthAuthUpdateOne) SetNillableIsActive(b *bool) *OAuthAuthUpdateOne {
	if b != nil {
		oauo.SetIsActive(*b)
	}
	return oauo
}

// SetIsVerified sets the "is_verified" field.
func (oauo *OAuthAuthUpdateOne) SetIsVerified(b bool) *OAuthAuthUpdateOne {
	oauo.mutation.SetIsVerified(b)
	return oauo
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (oauo *OAuthAuthUpdateOne) SetNillableIsVerified(b *bool) *OAuthAuthUpdateOne {
	if b != nil {
		oauo.SetIsVerified(*b)
	}
	return oauo
}

// SetUpdatedAt sets the "updated_at" field.
func (oauo *OAuthAuthUpdateOne) SetUpdatedAt(t time.Time) *OAuthAuthUpdateOne {
	oauo.mutation.SetUpdatedAt(t)
	return oauo
}

// SetEmail sets the "email" field.
func (oauo *OAuthAuthUpdateOne) SetEmail(s string) *OAuthAuthUpdateOne {
	oauo.mutation.SetEmail(s)
	return oauo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (oauo *OAuthAuthUpdateOne) SetNillableEmail(s *string) *OAuthAuthUpdateOne {
	if s != nil {
		oauo.SetEmail(*s)
	}
	return oauo
}

// ClearEmail clears the value of the "email" field.
func (oauo *OAuthAuthUpdateOne) ClearEmail() *OAuthAuthUpdateOne {
	oauo.mutation.ClearEmail()
	return oauo
}

// SetLastLoginAt sets the "last_login_at" field.
func (oauo *OAuthAuthUpdateOne) SetLastLoginAt(t time.Time) *OAuthAuthUpdateOne {
	oauo.mutation.SetLastLoginAt(t)
	return oauo
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (oauo *OAuthAuthUpdateOne) SetNillableLastLoginAt(t *time.Time) *OAuthAuthUpdateOne {
	if t != nil {
		oauo.SetLastLoginAt(*t)
	}
	return oauo
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (oauo *OAuthAuthUpdateOne) ClearLastLoginAt() *OAuthAuthUpdateOne {
	oauo.mutation.ClearLastLoginAt()
	return oauo
}

// SetLastFailedLoginAt sets the "last_failed_login_at" field.
func (oauo *OAuthAuthUpdateOne) SetLastFailedLoginAt(t time.Time) *OAuthAuthUpdateOne {
	oauo.mutation.SetLastFailedLoginAt(t)
	return oauo
}

// SetNillableLastFailedLoginAt sets the "last_failed_login_at" field if the given value is not nil.
func (oauo *OAuthAuthUpdateOne) SetNillableLastFailedLoginAt(t *time.Time) *OAuthAuthUpdateOne {
	if t != nil {
		oauo.SetLastFailedLoginAt(*t)
	}
	return oauo
}

// ClearLastFailedLoginAt clears the value of the "last_failed_login_at" field.
func (oauo *OAuthAuthUpdateOne) ClearLastFailedLoginAt() *OAuthAuthUpdateOne {
	oauo.mutation.ClearLastFailedLoginAt()
	return oauo
}

// SetFailedLoginAttempts sets the "failed_login_attempts" field.
func (oauo *OAuthAuthUpdateOne) SetFailedLoginAttempts(i int) *OAuthAuthUpdateOne {
	oauo.mutation.ResetFailedLoginAttempts()
	oauo.mutation.SetFailedLoginAttempts(i)
	return oauo
}

// SetNillableFailedLoginAttempts sets the "failed_login_attempts" field if the given value is not nil.
func (oauo *OAuthAuthUpdateOne) SetNillableFailedLoginAttempts(i *int) *OAuthAuthUpdateOne {
	if i != nil {
		oauo.SetFailedLoginAttempts(*i)
	}
	return oauo
}

// AddFailedLoginAttempts adds i to the "failed_login_attempts" field.
func (oauo *OAuthAuthUpdateOne) AddFailedLoginAttempts(i int) *OAuthAuthUpdateOne {
	oauo.mutation.AddFailedLoginAttempts(i)
	return oauo
}

// SetAuthAccount sets the "auth_account" edge to the AuthAccount entity.
func (oauo *OAuthAuthUpdateOne) SetAuthAccount(a *AuthAccount) *OAuthAuthUpdateOne {
	return oauo.SetAuthAccountID(a.ID)
}

// Mutation returns the OAuthAuthMutation object of the builder.
func (oauo *OAuthAuthUpdateOne) Mutation() *OAuthAuthMutation {
	return oauo.mutation
}

// ClearAuthAccount clears the "auth_account" edge to the AuthAccount entity.
func (oauo *OAuthAuthUpdateOne) ClearAuthAccount() *OAuthAuthUpdateOne {
	oauo.mutation.ClearAuthAccount()
	return oauo
}

// Where appends a list predicates to the OAuthAuthUpdate builder.
func (oauo *OAuthAuthUpdateOne) Where(ps ...predicate.OAuthAuth) *OAuthAuthUpdateOne {
	oauo.mutation.Where(ps...)
	return oauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oauo *OAuthAuthUpdateOne) Select(field string, fields ...string) *OAuthAuthUpdateOne {
	oauo.fields = append([]string{field}, fields...)
	return oauo
}

// Save executes the query and returns the updated OAuthAuth entity.
func (oauo *OAuthAuthUpdateOne) Save(ctx context.Context) (*OAuthAuth, error) {
	oauo.defaults()
	return withHooks(ctx, oauo.sqlSave, oauo.mutation, oauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oauo *OAuthAuthUpdateOne) SaveX(ctx context.Context) *OAuthAuth {
	node, err := oauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oauo *OAuthAuthUpdateOne) Exec(ctx context.Context) error {
	_, err := oauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oauo *OAuthAuthUpdateOne) ExecX(ctx context.Context) {
	if err := oauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oauo *OAuthAuthUpdateOne) defaults() {
	if _, ok := oauo.mutation.UpdatedAt(); !ok {
		v := oauthauth.UpdateDefaultUpdatedAt()
		oauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oauo *OAuthAuthUpdateOne) check() error {
	if v, ok := oauo.mutation.Provider(); ok {
		if err := oauthauth.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "OAuthAuth.provider": %w`, err)}
		}
	}
	if v, ok := oauo.mutation.ProviderID(); ok {
		if err := oauthauth.ProviderIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_id", err: fmt.Errorf(`ent: validator failed for field "OAuthAuth.provider_id": %w`, err)}
		}
	}
	if oauo.mutation.AuthAccountCleared() && len(oauo.mutation.AuthAccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OAuthAuth.auth_account"`)
	}
	return nil
}

func (oauo *OAuthAuthUpdateOne) sqlSave(ctx context.Context) (_node *OAuthAuth, err error) {
	if err := oauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthauth.Table, oauthauth.Columns, sqlgraph.NewFieldSpec(oauthauth.FieldID, field.TypeUUID))
	id, ok := oauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OAuthAuth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthauth.FieldID)
		for _, f := range fields {
			if !oauthauth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthauth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oauo.mutation.Provider(); ok {
		_spec.SetField(oauthauth.FieldProvider, field.TypeEnum, value)
	}
	if value, ok := oauo.mutation.ProviderID(); ok {
		_spec.SetField(oauthauth.FieldProviderID, field.TypeString, value)
	}
	if value, ok := oauo.mutation.IsActive(); ok {
		_spec.SetField(oauthauth.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := oauo.mutation.IsVerified(); ok {
		_spec.SetField(oauthauth.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := oauo.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthauth.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oauo.mutation.Email(); ok {
		_spec.SetField(oauthauth.FieldEmail, field.TypeString, value)
	}
	if oauo.mutation.EmailCleared() {
		_spec.ClearField(oauthauth.FieldEmail, field.TypeString)
	}
	if value, ok := oauo.mutation.LastLoginAt(); ok {
		_spec.SetField(oauthauth.FieldLastLoginAt, field.TypeTime, value)
	}
	if oauo.mutation.LastLoginAtCleared() {
		_spec.ClearField(oauthauth.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := oauo.mutation.LastFailedLoginAt(); ok {
		_spec.SetField(oauthauth.FieldLastFailedLoginAt, field.TypeTime, value)
	}
	if oauo.mutation.LastFailedLoginAtCleared() {
		_spec.ClearField(oauthauth.FieldLastFailedLoginAt, field.TypeTime)
	}
	if value, ok := oauo.mutation.FailedLoginAttempts(); ok {
		_spec.SetField(oauthauth.FieldFailedLoginAttempts, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.AddedFailedLoginAttempts(); ok {
		_spec.AddField(oauthauth.FieldFailedLoginAttempts, field.TypeInt, value)
	}
	if oauo.mutation.AuthAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauth.AuthAccountTable,
			Columns: []string{oauthauth.AuthAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authaccount.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.AuthAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthauth.AuthAccountTable,
			Columns: []string{oauthauth.AuthAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authaccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OAuthAuth{config: oauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oauo.mutation.done = true
	return _node, nil
}
