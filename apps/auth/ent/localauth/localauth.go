// Code generated by ent, DO NOT EDIT.

package localauth

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the localauth type in the database.
	Label = "local_auth"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAuthAccountID holds the string denoting the auth_account_id field in the database.
	FieldAuthAccountID = "auth_account_id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldIsVerified holds the string denoting the is_verified field in the database.
	FieldIsVerified = "is_verified"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldLastLoginAt holds the string denoting the last_login_at field in the database.
	FieldLastLoginAt = "last_login_at"
	// FieldLastFailedLoginAt holds the string denoting the last_failed_login_at field in the database.
	FieldLastFailedLoginAt = "last_failed_login_at"
	// FieldFailedLoginAttempts holds the string denoting the failed_login_attempts field in the database.
	FieldFailedLoginAttempts = "failed_login_attempts"
	// EdgeAuthAccount holds the string denoting the auth_account edge name in mutations.
	EdgeAuthAccount = "auth_account"
	// Table holds the table name of the localauth in the database.
	Table = "local_auths"
	// AuthAccountTable is the table that holds the auth_account relation/edge.
	AuthAccountTable = "local_auths"
	// AuthAccountInverseTable is the table name for the AuthAccount entity.
	// It exists in this package in order to avoid circular dependency with the "authaccount" package.
	AuthAccountInverseTable = "auth_accounts"
	// AuthAccountColumn is the table column denoting the auth_account relation/edge.
	AuthAccountColumn = "auth_account_id"
)

// Columns holds all SQL columns for localauth fields.
var Columns = []string{
	FieldID,
	FieldAuthAccountID,
	FieldEmail,
	FieldPassword,
	FieldIsActive,
	FieldIsVerified,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldLastLoginAt,
	FieldLastFailedLoginAt,
	FieldFailedLoginAttempts,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultIsVerified holds the default value on creation for the "is_verified" field.
	DefaultIsVerified bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultFailedLoginAttempts holds the default value on creation for the "failed_login_attempts" field.
	DefaultFailedLoginAttempts int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the LocalAuth queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAuthAccountID orders the results by the auth_account_id field.
func ByAuthAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthAccountID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByIsVerified orders the results by the is_verified field.
func ByIsVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsVerified, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByLastLoginAt orders the results by the last_login_at field.
func ByLastLoginAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginAt, opts...).ToFunc()
}

// ByLastFailedLoginAt orders the results by the last_failed_login_at field.
func ByLastFailedLoginAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastFailedLoginAt, opts...).ToFunc()
}

// ByFailedLoginAttempts orders the results by the failed_login_attempts field.
func ByFailedLoginAttempts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFailedLoginAttempts, opts...).ToFunc()
}

// ByAuthAccountField orders the results by auth_account field.
func ByAuthAccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthAccountStep(), sql.OrderByField(field, opts...))
	}
}
func newAuthAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthAccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AuthAccountTable, AuthAccountColumn),
	)
}
