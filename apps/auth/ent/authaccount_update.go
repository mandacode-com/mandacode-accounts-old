// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"mandacode.com/accounts/auth/ent/authaccount"
	"mandacode.com/accounts/auth/ent/predicate"
)

// AuthAccountUpdate is the builder for updating AuthAccount entities.
type AuthAccountUpdate struct {
	config
	hooks    []Hook
	mutation *AuthAccountMutation
}

// Where appends a list predicates to the AuthAccountUpdate builder.
func (aau *AuthAccountUpdate) Where(ps ...predicate.AuthAccount) *AuthAccountUpdate {
	aau.mutation.Where(ps...)
	return aau
}

// SetUserID sets the "user_id" field.
func (aau *AuthAccountUpdate) SetUserID(u uuid.UUID) *AuthAccountUpdate {
	aau.mutation.SetUserID(u)
	return aau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aau *AuthAccountUpdate) SetNillableUserID(u *uuid.UUID) *AuthAccountUpdate {
	if u != nil {
		aau.SetUserID(*u)
	}
	return aau
}

// SetProvider sets the "provider" field.
func (aau *AuthAccountUpdate) SetProvider(a authaccount.Provider) *AuthAccountUpdate {
	aau.mutation.SetProvider(a)
	return aau
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (aau *AuthAccountUpdate) SetNillableProvider(a *authaccount.Provider) *AuthAccountUpdate {
	if a != nil {
		aau.SetProvider(*a)
	}
	return aau
}

// SetProviderID sets the "provider_id" field.
func (aau *AuthAccountUpdate) SetProviderID(s string) *AuthAccountUpdate {
	aau.mutation.SetProviderID(s)
	return aau
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (aau *AuthAccountUpdate) SetNillableProviderID(s *string) *AuthAccountUpdate {
	if s != nil {
		aau.SetProviderID(*s)
	}
	return aau
}

// ClearProviderID clears the value of the "provider_id" field.
func (aau *AuthAccountUpdate) ClearProviderID() *AuthAccountUpdate {
	aau.mutation.ClearProviderID()
	return aau
}

// SetIsVerified sets the "is_verified" field.
func (aau *AuthAccountUpdate) SetIsVerified(b bool) *AuthAccountUpdate {
	aau.mutation.SetIsVerified(b)
	return aau
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (aau *AuthAccountUpdate) SetNillableIsVerified(b *bool) *AuthAccountUpdate {
	if b != nil {
		aau.SetIsVerified(*b)
	}
	return aau
}

// SetEmail sets the "email" field.
func (aau *AuthAccountUpdate) SetEmail(s string) *AuthAccountUpdate {
	aau.mutation.SetEmail(s)
	return aau
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (aau *AuthAccountUpdate) SetNillableEmail(s *string) *AuthAccountUpdate {
	if s != nil {
		aau.SetEmail(*s)
	}
	return aau
}

// SetPasswordHash sets the "password_hash" field.
func (aau *AuthAccountUpdate) SetPasswordHash(s string) *AuthAccountUpdate {
	aau.mutation.SetPasswordHash(s)
	return aau
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (aau *AuthAccountUpdate) SetNillablePasswordHash(s *string) *AuthAccountUpdate {
	if s != nil {
		aau.SetPasswordHash(*s)
	}
	return aau
}

// ClearPasswordHash clears the value of the "password_hash" field.
func (aau *AuthAccountUpdate) ClearPasswordHash() *AuthAccountUpdate {
	aau.mutation.ClearPasswordHash()
	return aau
}

// SetUpdatedAt sets the "updated_at" field.
func (aau *AuthAccountUpdate) SetUpdatedAt(t time.Time) *AuthAccountUpdate {
	aau.mutation.SetUpdatedAt(t)
	return aau
}

// Mutation returns the AuthAccountMutation object of the builder.
func (aau *AuthAccountUpdate) Mutation() *AuthAccountMutation {
	return aau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aau *AuthAccountUpdate) Save(ctx context.Context) (int, error) {
	if err := aau.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, aau.sqlSave, aau.mutation, aau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aau *AuthAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := aau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aau *AuthAccountUpdate) Exec(ctx context.Context) error {
	_, err := aau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aau *AuthAccountUpdate) ExecX(ctx context.Context) {
	if err := aau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aau *AuthAccountUpdate) defaults() error {
	if _, ok := aau.mutation.UpdatedAt(); !ok {
		if authaccount.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized authaccount.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := authaccount.UpdateDefaultUpdatedAt()
		aau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (aau *AuthAccountUpdate) check() error {
	if v, ok := aau.mutation.Provider(); ok {
		if err := authaccount.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "AuthAccount.provider": %w`, err)}
		}
	}
	if v, ok := aau.mutation.Email(); ok {
		if err := authaccount.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "AuthAccount.email": %w`, err)}
		}
	}
	return nil
}

func (aau *AuthAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(authaccount.Table, authaccount.Columns, sqlgraph.NewFieldSpec(authaccount.FieldID, field.TypeUUID))
	if ps := aau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aau.mutation.UserID(); ok {
		_spec.SetField(authaccount.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := aau.mutation.Provider(); ok {
		_spec.SetField(authaccount.FieldProvider, field.TypeEnum, value)
	}
	if value, ok := aau.mutation.ProviderID(); ok {
		_spec.SetField(authaccount.FieldProviderID, field.TypeString, value)
	}
	if aau.mutation.ProviderIDCleared() {
		_spec.ClearField(authaccount.FieldProviderID, field.TypeString)
	}
	if value, ok := aau.mutation.IsVerified(); ok {
		_spec.SetField(authaccount.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := aau.mutation.Email(); ok {
		_spec.SetField(authaccount.FieldEmail, field.TypeString, value)
	}
	if value, ok := aau.mutation.PasswordHash(); ok {
		_spec.SetField(authaccount.FieldPasswordHash, field.TypeString, value)
	}
	if aau.mutation.PasswordHashCleared() {
		_spec.ClearField(authaccount.FieldPasswordHash, field.TypeString)
	}
	if value, ok := aau.mutation.UpdatedAt(); ok {
		_spec.SetField(authaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aau.mutation.done = true
	return n, nil
}

// AuthAccountUpdateOne is the builder for updating a single AuthAccount entity.
type AuthAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthAccountMutation
}

// SetUserID sets the "user_id" field.
func (aauo *AuthAccountUpdateOne) SetUserID(u uuid.UUID) *AuthAccountUpdateOne {
	aauo.mutation.SetUserID(u)
	return aauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aauo *AuthAccountUpdateOne) SetNillableUserID(u *uuid.UUID) *AuthAccountUpdateOne {
	if u != nil {
		aauo.SetUserID(*u)
	}
	return aauo
}

// SetProvider sets the "provider" field.
func (aauo *AuthAccountUpdateOne) SetProvider(a authaccount.Provider) *AuthAccountUpdateOne {
	aauo.mutation.SetProvider(a)
	return aauo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (aauo *AuthAccountUpdateOne) SetNillableProvider(a *authaccount.Provider) *AuthAccountUpdateOne {
	if a != nil {
		aauo.SetProvider(*a)
	}
	return aauo
}

// SetProviderID sets the "provider_id" field.
func (aauo *AuthAccountUpdateOne) SetProviderID(s string) *AuthAccountUpdateOne {
	aauo.mutation.SetProviderID(s)
	return aauo
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (aauo *AuthAccountUpdateOne) SetNillableProviderID(s *string) *AuthAccountUpdateOne {
	if s != nil {
		aauo.SetProviderID(*s)
	}
	return aauo
}

// ClearProviderID clears the value of the "provider_id" field.
func (aauo *AuthAccountUpdateOne) ClearProviderID() *AuthAccountUpdateOne {
	aauo.mutation.ClearProviderID()
	return aauo
}

// SetIsVerified sets the "is_verified" field.
func (aauo *AuthAccountUpdateOne) SetIsVerified(b bool) *AuthAccountUpdateOne {
	aauo.mutation.SetIsVerified(b)
	return aauo
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (aauo *AuthAccountUpdateOne) SetNillableIsVerified(b *bool) *AuthAccountUpdateOne {
	if b != nil {
		aauo.SetIsVerified(*b)
	}
	return aauo
}

// SetEmail sets the "email" field.
func (aauo *AuthAccountUpdateOne) SetEmail(s string) *AuthAccountUpdateOne {
	aauo.mutation.SetEmail(s)
	return aauo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (aauo *AuthAccountUpdateOne) SetNillableEmail(s *string) *AuthAccountUpdateOne {
	if s != nil {
		aauo.SetEmail(*s)
	}
	return aauo
}

// SetPasswordHash sets the "password_hash" field.
func (aauo *AuthAccountUpdateOne) SetPasswordHash(s string) *AuthAccountUpdateOne {
	aauo.mutation.SetPasswordHash(s)
	return aauo
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (aauo *AuthAccountUpdateOne) SetNillablePasswordHash(s *string) *AuthAccountUpdateOne {
	if s != nil {
		aauo.SetPasswordHash(*s)
	}
	return aauo
}

// ClearPasswordHash clears the value of the "password_hash" field.
func (aauo *AuthAccountUpdateOne) ClearPasswordHash() *AuthAccountUpdateOne {
	aauo.mutation.ClearPasswordHash()
	return aauo
}

// SetUpdatedAt sets the "updated_at" field.
func (aauo *AuthAccountUpdateOne) SetUpdatedAt(t time.Time) *AuthAccountUpdateOne {
	aauo.mutation.SetUpdatedAt(t)
	return aauo
}

// Mutation returns the AuthAccountMutation object of the builder.
func (aauo *AuthAccountUpdateOne) Mutation() *AuthAccountMutation {
	return aauo.mutation
}

// Where appends a list predicates to the AuthAccountUpdate builder.
func (aauo *AuthAccountUpdateOne) Where(ps ...predicate.AuthAccount) *AuthAccountUpdateOne {
	aauo.mutation.Where(ps...)
	return aauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aauo *AuthAccountUpdateOne) Select(field string, fields ...string) *AuthAccountUpdateOne {
	aauo.fields = append([]string{field}, fields...)
	return aauo
}

// Save executes the query and returns the updated AuthAccount entity.
func (aauo *AuthAccountUpdateOne) Save(ctx context.Context) (*AuthAccount, error) {
	if err := aauo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, aauo.sqlSave, aauo.mutation, aauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aauo *AuthAccountUpdateOne) SaveX(ctx context.Context) *AuthAccount {
	node, err := aauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aauo *AuthAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := aauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aauo *AuthAccountUpdateOne) ExecX(ctx context.Context) {
	if err := aauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aauo *AuthAccountUpdateOne) defaults() error {
	if _, ok := aauo.mutation.UpdatedAt(); !ok {
		if authaccount.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized authaccount.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := authaccount.UpdateDefaultUpdatedAt()
		aauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (aauo *AuthAccountUpdateOne) check() error {
	if v, ok := aauo.mutation.Provider(); ok {
		if err := authaccount.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "AuthAccount.provider": %w`, err)}
		}
	}
	if v, ok := aauo.mutation.Email(); ok {
		if err := authaccount.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "AuthAccount.email": %w`, err)}
		}
	}
	return nil
}

func (aauo *AuthAccountUpdateOne) sqlSave(ctx context.Context) (_node *AuthAccount, err error) {
	if err := aauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(authaccount.Table, authaccount.Columns, sqlgraph.NewFieldSpec(authaccount.FieldID, field.TypeUUID))
	id, ok := aauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authaccount.FieldID)
		for _, f := range fields {
			if !authaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aauo.mutation.UserID(); ok {
		_spec.SetField(authaccount.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := aauo.mutation.Provider(); ok {
		_spec.SetField(authaccount.FieldProvider, field.TypeEnum, value)
	}
	if value, ok := aauo.mutation.ProviderID(); ok {
		_spec.SetField(authaccount.FieldProviderID, field.TypeString, value)
	}
	if aauo.mutation.ProviderIDCleared() {
		_spec.ClearField(authaccount.FieldProviderID, field.TypeString)
	}
	if value, ok := aauo.mutation.IsVerified(); ok {
		_spec.SetField(authaccount.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := aauo.mutation.Email(); ok {
		_spec.SetField(authaccount.FieldEmail, field.TypeString, value)
	}
	if value, ok := aauo.mutation.PasswordHash(); ok {
		_spec.SetField(authaccount.FieldPasswordHash, field.TypeString, value)
	}
	if aauo.mutation.PasswordHashCleared() {
		_spec.ClearField(authaccount.FieldPasswordHash, field.TypeString)
	}
	if value, ok := aauo.mutation.UpdatedAt(); ok {
		_spec.SetField(authaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &AuthAccount{config: aauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aauo.mutation.done = true
	return _node, nil
}
