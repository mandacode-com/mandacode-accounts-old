// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"mandacode.com/accounts/auth/ent/authaccount"
	"mandacode.com/accounts/auth/ent/localauth"
	"mandacode.com/accounts/auth/ent/oauthauth"
	"mandacode.com/accounts/auth/ent/predicate"
)

// AuthAccountUpdate is the builder for updating AuthAccount entities.
type AuthAccountUpdate struct {
	config
	hooks    []Hook
	mutation *AuthAccountMutation
}

// Where appends a list predicates to the AuthAccountUpdate builder.
func (aau *AuthAccountUpdate) Where(ps ...predicate.AuthAccount) *AuthAccountUpdate {
	aau.mutation.Where(ps...)
	return aau
}

// SetUserID sets the "user_id" field.
func (aau *AuthAccountUpdate) SetUserID(u uuid.UUID) *AuthAccountUpdate {
	aau.mutation.SetUserID(u)
	return aau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aau *AuthAccountUpdate) SetNillableUserID(u *uuid.UUID) *AuthAccountUpdate {
	if u != nil {
		aau.SetUserID(*u)
	}
	return aau
}

// SetIsActive sets the "is_active" field.
func (aau *AuthAccountUpdate) SetIsActive(b bool) *AuthAccountUpdate {
	aau.mutation.SetIsActive(b)
	return aau
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (aau *AuthAccountUpdate) SetNillableIsActive(b *bool) *AuthAccountUpdate {
	if b != nil {
		aau.SetIsActive(*b)
	}
	return aau
}

// SetUpdatedAt sets the "updated_at" field.
func (aau *AuthAccountUpdate) SetUpdatedAt(t time.Time) *AuthAccountUpdate {
	aau.mutation.SetUpdatedAt(t)
	return aau
}

// SetLastLoginAt sets the "last_login_at" field.
func (aau *AuthAccountUpdate) SetLastLoginAt(t time.Time) *AuthAccountUpdate {
	aau.mutation.SetLastLoginAt(t)
	return aau
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (aau *AuthAccountUpdate) SetNillableLastLoginAt(t *time.Time) *AuthAccountUpdate {
	if t != nil {
		aau.SetLastLoginAt(*t)
	}
	return aau
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (aau *AuthAccountUpdate) ClearLastLoginAt() *AuthAccountUpdate {
	aau.mutation.ClearLastLoginAt()
	return aau
}

// SetLastFailedLoginAt sets the "last_failed_login_at" field.
func (aau *AuthAccountUpdate) SetLastFailedLoginAt(t time.Time) *AuthAccountUpdate {
	aau.mutation.SetLastFailedLoginAt(t)
	return aau
}

// SetNillableLastFailedLoginAt sets the "last_failed_login_at" field if the given value is not nil.
func (aau *AuthAccountUpdate) SetNillableLastFailedLoginAt(t *time.Time) *AuthAccountUpdate {
	if t != nil {
		aau.SetLastFailedLoginAt(*t)
	}
	return aau
}

// ClearLastFailedLoginAt clears the value of the "last_failed_login_at" field.
func (aau *AuthAccountUpdate) ClearLastFailedLoginAt() *AuthAccountUpdate {
	aau.mutation.ClearLastFailedLoginAt()
	return aau
}

// SetFailedLoginAttempts sets the "failed_login_attempts" field.
func (aau *AuthAccountUpdate) SetFailedLoginAttempts(i int) *AuthAccountUpdate {
	aau.mutation.ResetFailedLoginAttempts()
	aau.mutation.SetFailedLoginAttempts(i)
	return aau
}

// SetNillableFailedLoginAttempts sets the "failed_login_attempts" field if the given value is not nil.
func (aau *AuthAccountUpdate) SetNillableFailedLoginAttempts(i *int) *AuthAccountUpdate {
	if i != nil {
		aau.SetFailedLoginAttempts(*i)
	}
	return aau
}

// AddFailedLoginAttempts adds i to the "failed_login_attempts" field.
func (aau *AuthAccountUpdate) AddFailedLoginAttempts(i int) *AuthAccountUpdate {
	aau.mutation.AddFailedLoginAttempts(i)
	return aau
}

// AddLocalAuthIDs adds the "local_auths" edge to the LocalAuth entity by IDs.
func (aau *AuthAccountUpdate) AddLocalAuthIDs(ids ...uuid.UUID) *AuthAccountUpdate {
	aau.mutation.AddLocalAuthIDs(ids...)
	return aau
}

// AddLocalAuths adds the "local_auths" edges to the LocalAuth entity.
func (aau *AuthAccountUpdate) AddLocalAuths(l ...*LocalAuth) *AuthAccountUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return aau.AddLocalAuthIDs(ids...)
}

// AddOauthAuthIDs adds the "oauth_auths" edge to the OAuthAuth entity by IDs.
func (aau *AuthAccountUpdate) AddOauthAuthIDs(ids ...uuid.UUID) *AuthAccountUpdate {
	aau.mutation.AddOauthAuthIDs(ids...)
	return aau
}

// AddOauthAuths adds the "oauth_auths" edges to the OAuthAuth entity.
func (aau *AuthAccountUpdate) AddOauthAuths(o ...*OAuthAuth) *AuthAccountUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return aau.AddOauthAuthIDs(ids...)
}

// Mutation returns the AuthAccountMutation object of the builder.
func (aau *AuthAccountUpdate) Mutation() *AuthAccountMutation {
	return aau.mutation
}

// ClearLocalAuths clears all "local_auths" edges to the LocalAuth entity.
func (aau *AuthAccountUpdate) ClearLocalAuths() *AuthAccountUpdate {
	aau.mutation.ClearLocalAuths()
	return aau
}

// RemoveLocalAuthIDs removes the "local_auths" edge to LocalAuth entities by IDs.
func (aau *AuthAccountUpdate) RemoveLocalAuthIDs(ids ...uuid.UUID) *AuthAccountUpdate {
	aau.mutation.RemoveLocalAuthIDs(ids...)
	return aau
}

// RemoveLocalAuths removes "local_auths" edges to LocalAuth entities.
func (aau *AuthAccountUpdate) RemoveLocalAuths(l ...*LocalAuth) *AuthAccountUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return aau.RemoveLocalAuthIDs(ids...)
}

// ClearOauthAuths clears all "oauth_auths" edges to the OAuthAuth entity.
func (aau *AuthAccountUpdate) ClearOauthAuths() *AuthAccountUpdate {
	aau.mutation.ClearOauthAuths()
	return aau
}

// RemoveOauthAuthIDs removes the "oauth_auths" edge to OAuthAuth entities by IDs.
func (aau *AuthAccountUpdate) RemoveOauthAuthIDs(ids ...uuid.UUID) *AuthAccountUpdate {
	aau.mutation.RemoveOauthAuthIDs(ids...)
	return aau
}

// RemoveOauthAuths removes "oauth_auths" edges to OAuthAuth entities.
func (aau *AuthAccountUpdate) RemoveOauthAuths(o ...*OAuthAuth) *AuthAccountUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return aau.RemoveOauthAuthIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aau *AuthAccountUpdate) Save(ctx context.Context) (int, error) {
	aau.defaults()
	return withHooks(ctx, aau.sqlSave, aau.mutation, aau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aau *AuthAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := aau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aau *AuthAccountUpdate) Exec(ctx context.Context) error {
	_, err := aau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aau *AuthAccountUpdate) ExecX(ctx context.Context) {
	if err := aau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aau *AuthAccountUpdate) defaults() {
	if _, ok := aau.mutation.UpdatedAt(); !ok {
		v := authaccount.UpdateDefaultUpdatedAt()
		aau.mutation.SetUpdatedAt(v)
	}
}

func (aau *AuthAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(authaccount.Table, authaccount.Columns, sqlgraph.NewFieldSpec(authaccount.FieldID, field.TypeUUID))
	if ps := aau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aau.mutation.UserID(); ok {
		_spec.SetField(authaccount.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := aau.mutation.IsActive(); ok {
		_spec.SetField(authaccount.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := aau.mutation.UpdatedAt(); ok {
		_spec.SetField(authaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aau.mutation.LastLoginAt(); ok {
		_spec.SetField(authaccount.FieldLastLoginAt, field.TypeTime, value)
	}
	if aau.mutation.LastLoginAtCleared() {
		_spec.ClearField(authaccount.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := aau.mutation.LastFailedLoginAt(); ok {
		_spec.SetField(authaccount.FieldLastFailedLoginAt, field.TypeTime, value)
	}
	if aau.mutation.LastFailedLoginAtCleared() {
		_spec.ClearField(authaccount.FieldLastFailedLoginAt, field.TypeTime)
	}
	if value, ok := aau.mutation.FailedLoginAttempts(); ok {
		_spec.SetField(authaccount.FieldFailedLoginAttempts, field.TypeInt, value)
	}
	if value, ok := aau.mutation.AddedFailedLoginAttempts(); ok {
		_spec.AddField(authaccount.FieldFailedLoginAttempts, field.TypeInt, value)
	}
	if aau.mutation.LocalAuthsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authaccount.LocalAuthsTable,
			Columns: []string{authaccount.LocalAuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localauth.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aau.mutation.RemovedLocalAuthsIDs(); len(nodes) > 0 && !aau.mutation.LocalAuthsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authaccount.LocalAuthsTable,
			Columns: []string{authaccount.LocalAuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localauth.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aau.mutation.LocalAuthsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authaccount.LocalAuthsTable,
			Columns: []string{authaccount.LocalAuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localauth.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aau.mutation.OauthAuthsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authaccount.OauthAuthsTable,
			Columns: []string{authaccount.OauthAuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauth.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aau.mutation.RemovedOauthAuthsIDs(); len(nodes) > 0 && !aau.mutation.OauthAuthsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authaccount.OauthAuthsTable,
			Columns: []string{authaccount.OauthAuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauth.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aau.mutation.OauthAuthsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authaccount.OauthAuthsTable,
			Columns: []string{authaccount.OauthAuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauth.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aau.mutation.done = true
	return n, nil
}

// AuthAccountUpdateOne is the builder for updating a single AuthAccount entity.
type AuthAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthAccountMutation
}

// SetUserID sets the "user_id" field.
func (aauo *AuthAccountUpdateOne) SetUserID(u uuid.UUID) *AuthAccountUpdateOne {
	aauo.mutation.SetUserID(u)
	return aauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aauo *AuthAccountUpdateOne) SetNillableUserID(u *uuid.UUID) *AuthAccountUpdateOne {
	if u != nil {
		aauo.SetUserID(*u)
	}
	return aauo
}

// SetIsActive sets the "is_active" field.
func (aauo *AuthAccountUpdateOne) SetIsActive(b bool) *AuthAccountUpdateOne {
	aauo.mutation.SetIsActive(b)
	return aauo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (aauo *AuthAccountUpdateOne) SetNillableIsActive(b *bool) *AuthAccountUpdateOne {
	if b != nil {
		aauo.SetIsActive(*b)
	}
	return aauo
}

// SetUpdatedAt sets the "updated_at" field.
func (aauo *AuthAccountUpdateOne) SetUpdatedAt(t time.Time) *AuthAccountUpdateOne {
	aauo.mutation.SetUpdatedAt(t)
	return aauo
}

// SetLastLoginAt sets the "last_login_at" field.
func (aauo *AuthAccountUpdateOne) SetLastLoginAt(t time.Time) *AuthAccountUpdateOne {
	aauo.mutation.SetLastLoginAt(t)
	return aauo
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (aauo *AuthAccountUpdateOne) SetNillableLastLoginAt(t *time.Time) *AuthAccountUpdateOne {
	if t != nil {
		aauo.SetLastLoginAt(*t)
	}
	return aauo
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (aauo *AuthAccountUpdateOne) ClearLastLoginAt() *AuthAccountUpdateOne {
	aauo.mutation.ClearLastLoginAt()
	return aauo
}

// SetLastFailedLoginAt sets the "last_failed_login_at" field.
func (aauo *AuthAccountUpdateOne) SetLastFailedLoginAt(t time.Time) *AuthAccountUpdateOne {
	aauo.mutation.SetLastFailedLoginAt(t)
	return aauo
}

// SetNillableLastFailedLoginAt sets the "last_failed_login_at" field if the given value is not nil.
func (aauo *AuthAccountUpdateOne) SetNillableLastFailedLoginAt(t *time.Time) *AuthAccountUpdateOne {
	if t != nil {
		aauo.SetLastFailedLoginAt(*t)
	}
	return aauo
}

// ClearLastFailedLoginAt clears the value of the "last_failed_login_at" field.
func (aauo *AuthAccountUpdateOne) ClearLastFailedLoginAt() *AuthAccountUpdateOne {
	aauo.mutation.ClearLastFailedLoginAt()
	return aauo
}

// SetFailedLoginAttempts sets the "failed_login_attempts" field.
func (aauo *AuthAccountUpdateOne) SetFailedLoginAttempts(i int) *AuthAccountUpdateOne {
	aauo.mutation.ResetFailedLoginAttempts()
	aauo.mutation.SetFailedLoginAttempts(i)
	return aauo
}

// SetNillableFailedLoginAttempts sets the "failed_login_attempts" field if the given value is not nil.
func (aauo *AuthAccountUpdateOne) SetNillableFailedLoginAttempts(i *int) *AuthAccountUpdateOne {
	if i != nil {
		aauo.SetFailedLoginAttempts(*i)
	}
	return aauo
}

// AddFailedLoginAttempts adds i to the "failed_login_attempts" field.
func (aauo *AuthAccountUpdateOne) AddFailedLoginAttempts(i int) *AuthAccountUpdateOne {
	aauo.mutation.AddFailedLoginAttempts(i)
	return aauo
}

// AddLocalAuthIDs adds the "local_auths" edge to the LocalAuth entity by IDs.
func (aauo *AuthAccountUpdateOne) AddLocalAuthIDs(ids ...uuid.UUID) *AuthAccountUpdateOne {
	aauo.mutation.AddLocalAuthIDs(ids...)
	return aauo
}

// AddLocalAuths adds the "local_auths" edges to the LocalAuth entity.
func (aauo *AuthAccountUpdateOne) AddLocalAuths(l ...*LocalAuth) *AuthAccountUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return aauo.AddLocalAuthIDs(ids...)
}

// AddOauthAuthIDs adds the "oauth_auths" edge to the OAuthAuth entity by IDs.
func (aauo *AuthAccountUpdateOne) AddOauthAuthIDs(ids ...uuid.UUID) *AuthAccountUpdateOne {
	aauo.mutation.AddOauthAuthIDs(ids...)
	return aauo
}

// AddOauthAuths adds the "oauth_auths" edges to the OAuthAuth entity.
func (aauo *AuthAccountUpdateOne) AddOauthAuths(o ...*OAuthAuth) *AuthAccountUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return aauo.AddOauthAuthIDs(ids...)
}

// Mutation returns the AuthAccountMutation object of the builder.
func (aauo *AuthAccountUpdateOne) Mutation() *AuthAccountMutation {
	return aauo.mutation
}

// ClearLocalAuths clears all "local_auths" edges to the LocalAuth entity.
func (aauo *AuthAccountUpdateOne) ClearLocalAuths() *AuthAccountUpdateOne {
	aauo.mutation.ClearLocalAuths()
	return aauo
}

// RemoveLocalAuthIDs removes the "local_auths" edge to LocalAuth entities by IDs.
func (aauo *AuthAccountUpdateOne) RemoveLocalAuthIDs(ids ...uuid.UUID) *AuthAccountUpdateOne {
	aauo.mutation.RemoveLocalAuthIDs(ids...)
	return aauo
}

// RemoveLocalAuths removes "local_auths" edges to LocalAuth entities.
func (aauo *AuthAccountUpdateOne) RemoveLocalAuths(l ...*LocalAuth) *AuthAccountUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return aauo.RemoveLocalAuthIDs(ids...)
}

// ClearOauthAuths clears all "oauth_auths" edges to the OAuthAuth entity.
func (aauo *AuthAccountUpdateOne) ClearOauthAuths() *AuthAccountUpdateOne {
	aauo.mutation.ClearOauthAuths()
	return aauo
}

// RemoveOauthAuthIDs removes the "oauth_auths" edge to OAuthAuth entities by IDs.
func (aauo *AuthAccountUpdateOne) RemoveOauthAuthIDs(ids ...uuid.UUID) *AuthAccountUpdateOne {
	aauo.mutation.RemoveOauthAuthIDs(ids...)
	return aauo
}

// RemoveOauthAuths removes "oauth_auths" edges to OAuthAuth entities.
func (aauo *AuthAccountUpdateOne) RemoveOauthAuths(o ...*OAuthAuth) *AuthAccountUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return aauo.RemoveOauthAuthIDs(ids...)
}

// Where appends a list predicates to the AuthAccountUpdate builder.
func (aauo *AuthAccountUpdateOne) Where(ps ...predicate.AuthAccount) *AuthAccountUpdateOne {
	aauo.mutation.Where(ps...)
	return aauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aauo *AuthAccountUpdateOne) Select(field string, fields ...string) *AuthAccountUpdateOne {
	aauo.fields = append([]string{field}, fields...)
	return aauo
}

// Save executes the query and returns the updated AuthAccount entity.
func (aauo *AuthAccountUpdateOne) Save(ctx context.Context) (*AuthAccount, error) {
	aauo.defaults()
	return withHooks(ctx, aauo.sqlSave, aauo.mutation, aauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aauo *AuthAccountUpdateOne) SaveX(ctx context.Context) *AuthAccount {
	node, err := aauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aauo *AuthAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := aauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aauo *AuthAccountUpdateOne) ExecX(ctx context.Context) {
	if err := aauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aauo *AuthAccountUpdateOne) defaults() {
	if _, ok := aauo.mutation.UpdatedAt(); !ok {
		v := authaccount.UpdateDefaultUpdatedAt()
		aauo.mutation.SetUpdatedAt(v)
	}
}

func (aauo *AuthAccountUpdateOne) sqlSave(ctx context.Context) (_node *AuthAccount, err error) {
	_spec := sqlgraph.NewUpdateSpec(authaccount.Table, authaccount.Columns, sqlgraph.NewFieldSpec(authaccount.FieldID, field.TypeUUID))
	id, ok := aauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authaccount.FieldID)
		for _, f := range fields {
			if !authaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aauo.mutation.UserID(); ok {
		_spec.SetField(authaccount.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := aauo.mutation.IsActive(); ok {
		_spec.SetField(authaccount.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := aauo.mutation.UpdatedAt(); ok {
		_spec.SetField(authaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aauo.mutation.LastLoginAt(); ok {
		_spec.SetField(authaccount.FieldLastLoginAt, field.TypeTime, value)
	}
	if aauo.mutation.LastLoginAtCleared() {
		_spec.ClearField(authaccount.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := aauo.mutation.LastFailedLoginAt(); ok {
		_spec.SetField(authaccount.FieldLastFailedLoginAt, field.TypeTime, value)
	}
	if aauo.mutation.LastFailedLoginAtCleared() {
		_spec.ClearField(authaccount.FieldLastFailedLoginAt, field.TypeTime)
	}
	if value, ok := aauo.mutation.FailedLoginAttempts(); ok {
		_spec.SetField(authaccount.FieldFailedLoginAttempts, field.TypeInt, value)
	}
	if value, ok := aauo.mutation.AddedFailedLoginAttempts(); ok {
		_spec.AddField(authaccount.FieldFailedLoginAttempts, field.TypeInt, value)
	}
	if aauo.mutation.LocalAuthsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authaccount.LocalAuthsTable,
			Columns: []string{authaccount.LocalAuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localauth.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aauo.mutation.RemovedLocalAuthsIDs(); len(nodes) > 0 && !aauo.mutation.LocalAuthsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authaccount.LocalAuthsTable,
			Columns: []string{authaccount.LocalAuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localauth.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aauo.mutation.LocalAuthsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authaccount.LocalAuthsTable,
			Columns: []string{authaccount.LocalAuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localauth.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aauo.mutation.OauthAuthsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authaccount.OauthAuthsTable,
			Columns: []string{authaccount.OauthAuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauth.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aauo.mutation.RemovedOauthAuthsIDs(); len(nodes) > 0 && !aauo.mutation.OauthAuthsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authaccount.OauthAuthsTable,
			Columns: []string{authaccount.OauthAuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauth.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aauo.mutation.OauthAuthsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authaccount.OauthAuthsTable,
			Columns: []string{authaccount.OauthAuthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthauth.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AuthAccount{config: aauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aauo.mutation.done = true
	return _node, nil
}
