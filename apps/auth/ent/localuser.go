// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"mandacode.com/accounts/auth/ent/localuser"
)

// LocalUser is the model entity for the LocalUser schema.
type LocalUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// IsVerified holds the value of the "is_verified" field.
	IsVerified   bool `json:"is_verified,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LocalUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case localuser.FieldIsActive, localuser.FieldIsVerified:
			values[i] = new(sql.NullBool)
		case localuser.FieldEmail, localuser.FieldPassword:
			values[i] = new(sql.NullString)
		case localuser.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LocalUser fields.
func (lu *LocalUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case localuser.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				lu.ID = *value
			}
		case localuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				lu.Email = value.String
			}
		case localuser.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				lu.Password = value.String
			}
		case localuser.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				lu.IsActive = value.Bool
			}
		case localuser.FieldIsVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_verified", values[i])
			} else if value.Valid {
				lu.IsVerified = value.Bool
			}
		default:
			lu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LocalUser.
// This includes values selected through modifiers, order, etc.
func (lu *LocalUser) Value(name string) (ent.Value, error) {
	return lu.selectValues.Get(name)
}

// Update returns a builder for updating this LocalUser.
// Note that you need to call LocalUser.Unwrap() before calling this method if this LocalUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (lu *LocalUser) Update() *LocalUserUpdateOne {
	return NewLocalUserClient(lu.config).UpdateOne(lu)
}

// Unwrap unwraps the LocalUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lu *LocalUser) Unwrap() *LocalUser {
	_tx, ok := lu.config.driver.(*txDriver)
	if !ok {
		panic("ent: LocalUser is not a transactional entity")
	}
	lu.config.driver = _tx.drv
	return lu
}

// String implements the fmt.Stringer.
func (lu *LocalUser) String() string {
	var builder strings.Builder
	builder.WriteString("LocalUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lu.ID))
	builder.WriteString("email=")
	builder.WriteString(lu.Email)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(lu.Password)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", lu.IsActive))
	builder.WriteString(", ")
	builder.WriteString("is_verified=")
	builder.WriteString(fmt.Sprintf("%v", lu.IsVerified))
	builder.WriteByte(')')
	return builder.String()
}

// LocalUsers is a parsable slice of LocalUser.
type LocalUsers []*LocalUser
