// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"mandacode.com/accounts/profile/ent/predicate"
	"mandacode.com/accounts/profile/ent/profile"
)

// ProfileUpdate is the builder for updating Profile entities.
type ProfileUpdate struct {
	config
	hooks    []Hook
	mutation *ProfileMutation
}

// Where appends a list predicates to the ProfileUpdate builder.
func (pu *ProfileUpdate) Where(ps ...predicate.Profile) *ProfileUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetAvatar sets the "avatar" field.
func (pu *ProfileUpdate) SetAvatar(s string) *ProfileUpdate {
	pu.mutation.SetAvatar(s)
	return pu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableAvatar(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetAvatar(*s)
	}
	return pu
}

// ClearAvatar clears the value of the "avatar" field.
func (pu *ProfileUpdate) ClearAvatar() *ProfileUpdate {
	pu.mutation.ClearAvatar()
	return pu
}

// SetBio sets the "bio" field.
func (pu *ProfileUpdate) SetBio(s string) *ProfileUpdate {
	pu.mutation.SetBio(s)
	return pu
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableBio(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetBio(*s)
	}
	return pu
}

// ClearBio clears the value of the "bio" field.
func (pu *ProfileUpdate) ClearBio() *ProfileUpdate {
	pu.mutation.ClearBio()
	return pu
}

// SetLocation sets the "location" field.
func (pu *ProfileUpdate) SetLocation(s string) *ProfileUpdate {
	pu.mutation.SetLocation(s)
	return pu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableLocation(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetLocation(*s)
	}
	return pu
}

// ClearLocation clears the value of the "location" field.
func (pu *ProfileUpdate) ClearLocation() *ProfileUpdate {
	pu.mutation.ClearLocation()
	return pu
}

// SetNickname sets the "nickname" field.
func (pu *ProfileUpdate) SetNickname(s string) *ProfileUpdate {
	pu.mutation.SetNickname(s)
	return pu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableNickname(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetNickname(*s)
	}
	return pu
}

// SetEmail sets the "email" field.
func (pu *ProfileUpdate) SetEmail(s string) *ProfileUpdate {
	pu.mutation.SetEmail(s)
	return pu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableEmail(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetEmail(*s)
	}
	return pu
}

// ClearEmail clears the value of the "email" field.
func (pu *ProfileUpdate) ClearEmail() *ProfileUpdate {
	pu.mutation.ClearEmail()
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProfileUpdate) SetUpdatedAt(t time.Time) *ProfileUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetIsArchived sets the "is_archived" field.
func (pu *ProfileUpdate) SetIsArchived(b bool) *ProfileUpdate {
	pu.mutation.SetIsArchived(b)
	return pu
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableIsArchived(b *bool) *ProfileUpdate {
	if b != nil {
		pu.SetIsArchived(*b)
	}
	return pu
}

// ClearIsArchived clears the value of the "is_archived" field.
func (pu *ProfileUpdate) ClearIsArchived() *ProfileUpdate {
	pu.mutation.ClearIsArchived()
	return pu
}

// SetArchivedAt sets the "archived_at" field.
func (pu *ProfileUpdate) SetArchivedAt(t time.Time) *ProfileUpdate {
	pu.mutation.SetArchivedAt(t)
	return pu
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableArchivedAt(t *time.Time) *ProfileUpdate {
	if t != nil {
		pu.SetArchivedAt(*t)
	}
	return pu
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (pu *ProfileUpdate) ClearArchivedAt() *ProfileUpdate {
	pu.mutation.ClearArchivedAt()
	return pu
}

// Mutation returns the ProfileMutation object of the builder.
func (pu *ProfileUpdate) Mutation() *ProfileMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProfileUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProfileUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProfileUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProfileUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := profile.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

func (pu *ProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Avatar(); ok {
		_spec.SetField(profile.FieldAvatar, field.TypeString, value)
	}
	if pu.mutation.AvatarCleared() {
		_spec.ClearField(profile.FieldAvatar, field.TypeString)
	}
	if value, ok := pu.mutation.Bio(); ok {
		_spec.SetField(profile.FieldBio, field.TypeString, value)
	}
	if pu.mutation.BioCleared() {
		_spec.ClearField(profile.FieldBio, field.TypeString)
	}
	if value, ok := pu.mutation.Location(); ok {
		_spec.SetField(profile.FieldLocation, field.TypeString, value)
	}
	if pu.mutation.LocationCleared() {
		_spec.ClearField(profile.FieldLocation, field.TypeString)
	}
	if value, ok := pu.mutation.Nickname(); ok {
		_spec.SetField(profile.FieldNickname, field.TypeString, value)
	}
	if value, ok := pu.mutation.Email(); ok {
		_spec.SetField(profile.FieldEmail, field.TypeString, value)
	}
	if pu.mutation.EmailCleared() {
		_spec.ClearField(profile.FieldEmail, field.TypeString)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(profile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.IsArchived(); ok {
		_spec.SetField(profile.FieldIsArchived, field.TypeBool, value)
	}
	if pu.mutation.IsArchivedCleared() {
		_spec.ClearField(profile.FieldIsArchived, field.TypeBool)
	}
	if value, ok := pu.mutation.ArchivedAt(); ok {
		_spec.SetField(profile.FieldArchivedAt, field.TypeTime, value)
	}
	if pu.mutation.ArchivedAtCleared() {
		_spec.ClearField(profile.FieldArchivedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProfileUpdateOne is the builder for updating a single Profile entity.
type ProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfileMutation
}

// SetAvatar sets the "avatar" field.
func (puo *ProfileUpdateOne) SetAvatar(s string) *ProfileUpdateOne {
	puo.mutation.SetAvatar(s)
	return puo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableAvatar(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetAvatar(*s)
	}
	return puo
}

// ClearAvatar clears the value of the "avatar" field.
func (puo *ProfileUpdateOne) ClearAvatar() *ProfileUpdateOne {
	puo.mutation.ClearAvatar()
	return puo
}

// SetBio sets the "bio" field.
func (puo *ProfileUpdateOne) SetBio(s string) *ProfileUpdateOne {
	puo.mutation.SetBio(s)
	return puo
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableBio(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetBio(*s)
	}
	return puo
}

// ClearBio clears the value of the "bio" field.
func (puo *ProfileUpdateOne) ClearBio() *ProfileUpdateOne {
	puo.mutation.ClearBio()
	return puo
}

// SetLocation sets the "location" field.
func (puo *ProfileUpdateOne) SetLocation(s string) *ProfileUpdateOne {
	puo.mutation.SetLocation(s)
	return puo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableLocation(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetLocation(*s)
	}
	return puo
}

// ClearLocation clears the value of the "location" field.
func (puo *ProfileUpdateOne) ClearLocation() *ProfileUpdateOne {
	puo.mutation.ClearLocation()
	return puo
}

// SetNickname sets the "nickname" field.
func (puo *ProfileUpdateOne) SetNickname(s string) *ProfileUpdateOne {
	puo.mutation.SetNickname(s)
	return puo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableNickname(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetNickname(*s)
	}
	return puo
}

// SetEmail sets the "email" field.
func (puo *ProfileUpdateOne) SetEmail(s string) *ProfileUpdateOne {
	puo.mutation.SetEmail(s)
	return puo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableEmail(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetEmail(*s)
	}
	return puo
}

// ClearEmail clears the value of the "email" field.
func (puo *ProfileUpdateOne) ClearEmail() *ProfileUpdateOne {
	puo.mutation.ClearEmail()
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProfileUpdateOne) SetUpdatedAt(t time.Time) *ProfileUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetIsArchived sets the "is_archived" field.
func (puo *ProfileUpdateOne) SetIsArchived(b bool) *ProfileUpdateOne {
	puo.mutation.SetIsArchived(b)
	return puo
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableIsArchived(b *bool) *ProfileUpdateOne {
	if b != nil {
		puo.SetIsArchived(*b)
	}
	return puo
}

// ClearIsArchived clears the value of the "is_archived" field.
func (puo *ProfileUpdateOne) ClearIsArchived() *ProfileUpdateOne {
	puo.mutation.ClearIsArchived()
	return puo
}

// SetArchivedAt sets the "archived_at" field.
func (puo *ProfileUpdateOne) SetArchivedAt(t time.Time) *ProfileUpdateOne {
	puo.mutation.SetArchivedAt(t)
	return puo
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableArchivedAt(t *time.Time) *ProfileUpdateOne {
	if t != nil {
		puo.SetArchivedAt(*t)
	}
	return puo
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (puo *ProfileUpdateOne) ClearArchivedAt() *ProfileUpdateOne {
	puo.mutation.ClearArchivedAt()
	return puo
}

// Mutation returns the ProfileMutation object of the builder.
func (puo *ProfileUpdateOne) Mutation() *ProfileMutation {
	return puo.mutation
}

// Where appends a list predicates to the ProfileUpdate builder.
func (puo *ProfileUpdateOne) Where(ps ...predicate.Profile) *ProfileUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProfileUpdateOne) Select(field string, fields ...string) *ProfileUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Profile entity.
func (puo *ProfileUpdateOne) Save(ctx context.Context) (*Profile, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProfileUpdateOne) SaveX(ctx context.Context) *Profile {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProfileUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProfileUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := profile.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

func (puo *ProfileUpdateOne) sqlSave(ctx context.Context) (_node *Profile, err error) {
	_spec := sqlgraph.NewUpdateSpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Profile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profile.FieldID)
		for _, f := range fields {
			if !profile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != profile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Avatar(); ok {
		_spec.SetField(profile.FieldAvatar, field.TypeString, value)
	}
	if puo.mutation.AvatarCleared() {
		_spec.ClearField(profile.FieldAvatar, field.TypeString)
	}
	if value, ok := puo.mutation.Bio(); ok {
		_spec.SetField(profile.FieldBio, field.TypeString, value)
	}
	if puo.mutation.BioCleared() {
		_spec.ClearField(profile.FieldBio, field.TypeString)
	}
	if value, ok := puo.mutation.Location(); ok {
		_spec.SetField(profile.FieldLocation, field.TypeString, value)
	}
	if puo.mutation.LocationCleared() {
		_spec.ClearField(profile.FieldLocation, field.TypeString)
	}
	if value, ok := puo.mutation.Nickname(); ok {
		_spec.SetField(profile.FieldNickname, field.TypeString, value)
	}
	if value, ok := puo.mutation.Email(); ok {
		_spec.SetField(profile.FieldEmail, field.TypeString, value)
	}
	if puo.mutation.EmailCleared() {
		_spec.ClearField(profile.FieldEmail, field.TypeString)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(profile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.IsArchived(); ok {
		_spec.SetField(profile.FieldIsArchived, field.TypeBool, value)
	}
	if puo.mutation.IsArchivedCleared() {
		_spec.ClearField(profile.FieldIsArchived, field.TypeBool)
	}
	if value, ok := puo.mutation.ArchivedAt(); ok {
		_spec.SetField(profile.FieldArchivedAt, field.TypeTime, value)
	}
	if puo.mutation.ArchivedAtCleared() {
		_spec.ClearField(profile.FieldArchivedAt, field.TypeTime)
	}
	_node = &Profile{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
