// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"mandacode.com/accounts/profile/ent/profile"
)

// Profile is the model entity for the Profile schema.
type Profile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// The ID of the user this profile belongs to. This is immutable and should not change.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// The URL of the user's avatar image. This is optional and can be updated.
	Avatar string `json:"avatar,omitempty"`
	// A short biography of the user. This is optional and can be updated.
	Bio string `json:"bio,omitempty"`
	// The user's location. This is optional and can be updated.
	Location string `json:"location,omitempty"`
	// The user's nickname. This is optional and can be updated.
	Nickname string `json:"nickname,omitempty"`
	// The user's email address. This is optional and can be updated.
	Email string `json:"email,omitempty"`
	// The timestamp when the profile was created. This is immutable and should not change.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The timestamp when the profile was last updated. This is automatically set to the current time on update.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The timestamp when the profile was archived. This is optional and can be set to indicate when the profile was archived.
	IsArchived bool `json:"is_archived,omitempty"`
	// The timestamp when the profile was archived. This is optional and can be set to indicate when the profile was archived.
	ArchivedAt   *time.Time `json:"archived_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Profile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case profile.FieldIsArchived:
			values[i] = new(sql.NullBool)
		case profile.FieldID:
			values[i] = new(sql.NullInt64)
		case profile.FieldAvatar, profile.FieldBio, profile.FieldLocation, profile.FieldNickname, profile.FieldEmail:
			values[i] = new(sql.NullString)
		case profile.FieldCreatedAt, profile.FieldUpdatedAt, profile.FieldArchivedAt:
			values[i] = new(sql.NullTime)
		case profile.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Profile fields.
func (pr *Profile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case profile.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				pr.UserID = *value
			}
		case profile.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				pr.Avatar = value.String
			}
		case profile.FieldBio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bio", values[i])
			} else if value.Valid {
				pr.Bio = value.String
			}
		case profile.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				pr.Location = value.String
			}
		case profile.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				pr.Nickname = value.String
			}
		case profile.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				pr.Email = value.String
			}
		case profile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case profile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case profile.FieldIsArchived:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_archived", values[i])
			} else if value.Valid {
				pr.IsArchived = value.Bool
			}
		case profile.FieldArchivedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field archived_at", values[i])
			} else if value.Valid {
				pr.ArchivedAt = new(time.Time)
				*pr.ArchivedAt = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Profile.
// This includes values selected through modifiers, order, etc.
func (pr *Profile) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// Update returns a builder for updating this Profile.
// Note that you need to call Profile.Unwrap() before calling this method if this Profile
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Profile) Update() *ProfileUpdateOne {
	return NewProfileClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Profile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Profile) Unwrap() *Profile {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Profile is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Profile) String() string {
	var builder strings.Builder
	builder.WriteString("Profile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.UserID))
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(pr.Avatar)
	builder.WriteString(", ")
	builder.WriteString("bio=")
	builder.WriteString(pr.Bio)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(pr.Location)
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(pr.Nickname)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(pr.Email)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_archived=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsArchived))
	builder.WriteString(", ")
	if v := pr.ArchivedAt; v != nil {
		builder.WriteString("archived_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Profiles is a parsable slice of Profile.
type Profiles []*Profile
