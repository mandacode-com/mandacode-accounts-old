// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"mandacode.com/accounts/role/ent/clientaccess"
	"mandacode.com/accounts/role/ent/service"
)

// ClientAccess is the model entity for the ClientAccess schema.
type ClientAccess struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ServiceID holds the value of the "service_id" field.
	ServiceID uuid.UUID `json:"service_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID string `json:"client_id,omitempty"`
	// ClientSecret holds the value of the "client_secret" field.
	ClientSecret string `json:"client_secret,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClientAccessQuery when eager-loading is set.
	Edges        ClientAccessEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ClientAccessEdges holds the relations/edges for other nodes in the graph.
type ClientAccessEdges struct {
	// Service holds the value of the service edge.
	Service *Service `json:"service,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClientAccessEdges) ServiceOrErr() (*Service, error) {
	if e.Service != nil {
		return e.Service, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: service.Label}
	}
	return nil, &NotLoadedError{edge: "service"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ClientAccess) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case clientaccess.FieldIsActive:
			values[i] = new(sql.NullBool)
		case clientaccess.FieldName, clientaccess.FieldClientID, clientaccess.FieldClientSecret, clientaccess.FieldDescription:
			values[i] = new(sql.NullString)
		case clientaccess.FieldCreatedAt, clientaccess.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case clientaccess.FieldID, clientaccess.FieldServiceID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ClientAccess fields.
func (ca *ClientAccess) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case clientaccess.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ca.ID = *value
			}
		case clientaccess.FieldServiceID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field service_id", values[i])
			} else if value != nil {
				ca.ServiceID = *value
			}
		case clientaccess.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ca.Name = value.String
			}
		case clientaccess.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				ca.ClientID = value.String
			}
		case clientaccess.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value.Valid {
				ca.ClientSecret = value.String
			}
		case clientaccess.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ca.Description = value.String
			}
		case clientaccess.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				ca.IsActive = value.Bool
			}
		case clientaccess.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ca.CreatedAt = value.Time
			}
		case clientaccess.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ca.UpdatedAt = value.Time
			}
		default:
			ca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ClientAccess.
// This includes values selected through modifiers, order, etc.
func (ca *ClientAccess) Value(name string) (ent.Value, error) {
	return ca.selectValues.Get(name)
}

// QueryService queries the "service" edge of the ClientAccess entity.
func (ca *ClientAccess) QueryService() *ServiceQuery {
	return NewClientAccessClient(ca.config).QueryService(ca)
}

// Update returns a builder for updating this ClientAccess.
// Note that you need to call ClientAccess.Unwrap() before calling this method if this ClientAccess
// was returned from a transaction, and the transaction was committed or rolled back.
func (ca *ClientAccess) Update() *ClientAccessUpdateOne {
	return NewClientAccessClient(ca.config).UpdateOne(ca)
}

// Unwrap unwraps the ClientAccess entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ca *ClientAccess) Unwrap() *ClientAccess {
	_tx, ok := ca.config.driver.(*txDriver)
	if !ok {
		panic("ent: ClientAccess is not a transactional entity")
	}
	ca.config.driver = _tx.drv
	return ca
}

// String implements the fmt.Stringer.
func (ca *ClientAccess) String() string {
	var builder strings.Builder
	builder.WriteString("ClientAccess(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ca.ID))
	builder.WriteString("service_id=")
	builder.WriteString(fmt.Sprintf("%v", ca.ServiceID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ca.Name)
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(ca.ClientID)
	builder.WriteString(", ")
	builder.WriteString("client_secret=")
	builder.WriteString(ca.ClientSecret)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ca.Description)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", ca.IsActive))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ca.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ca.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ClientAccesses is a parsable slice of ClientAccess.
type ClientAccesses []*ClientAccess
