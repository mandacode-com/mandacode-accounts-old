// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"mandacode.com/accounts/user/ent/predicate"
	"mandacode.com/accounts/user/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetIsActive sets the "is_active" field.
func (uu *UserUpdate) SetIsActive(b bool) *UserUpdate {
	uu.mutation.SetIsActive(b)
	return uu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsActive(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsActive(*b)
	}
	return uu
}

// SetIsBlocked sets the "is_blocked" field.
func (uu *UserUpdate) SetIsBlocked(b bool) *UserUpdate {
	uu.mutation.SetIsBlocked(b)
	return uu
}

// SetNillableIsBlocked sets the "is_blocked" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsBlocked(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsBlocked(*b)
	}
	return uu
}

// SetSyncCode sets the "sync_code" field.
func (uu *UserUpdate) SetSyncCode(s string) *UserUpdate {
	uu.mutation.SetSyncCode(s)
	return uu
}

// SetNillableSyncCode sets the "sync_code" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSyncCode(s *string) *UserUpdate {
	if s != nil {
		uu.SetSyncCode(*s)
	}
	return uu
}

// ClearSyncCode clears the value of the "sync_code" field.
func (uu *UserUpdate) ClearSyncCode() *UserUpdate {
	uu.mutation.ClearSyncCode()
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetIsArchived sets the "is_archived" field.
func (uu *UserUpdate) SetIsArchived(b bool) *UserUpdate {
	uu.mutation.SetIsArchived(b)
	return uu
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsArchived(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsArchived(*b)
	}
	return uu
}

// SetArchivedAt sets the "archived_at" field.
func (uu *UserUpdate) SetArchivedAt(t time.Time) *UserUpdate {
	uu.mutation.SetArchivedAt(t)
	return uu
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableArchivedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetArchivedAt(*t)
	}
	return uu
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (uu *UserUpdate) ClearArchivedAt() *UserUpdate {
	uu.mutation.ClearArchivedAt()
	return uu
}

// SetDeleteAfter sets the "delete_after" field.
func (uu *UserUpdate) SetDeleteAfter(t time.Time) *UserUpdate {
	uu.mutation.SetDeleteAfter(t)
	return uu
}

// SetNillableDeleteAfter sets the "delete_after" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeleteAfter(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDeleteAfter(*t)
	}
	return uu
}

// ClearDeleteAfter clears the value of the "delete_after" field.
func (uu *UserUpdate) ClearDeleteAfter() *UserUpdate {
	uu.mutation.ClearDeleteAfter()
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := uu.mutation.IsBlocked(); ok {
		_spec.SetField(user.FieldIsBlocked, field.TypeBool, value)
	}
	if value, ok := uu.mutation.SyncCode(); ok {
		_spec.SetField(user.FieldSyncCode, field.TypeString, value)
	}
	if uu.mutation.SyncCodeCleared() {
		_spec.ClearField(user.FieldSyncCode, field.TypeString)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.IsArchived(); ok {
		_spec.SetField(user.FieldIsArchived, field.TypeBool, value)
	}
	if value, ok := uu.mutation.ArchivedAt(); ok {
		_spec.SetField(user.FieldArchivedAt, field.TypeTime, value)
	}
	if uu.mutation.ArchivedAtCleared() {
		_spec.ClearField(user.FieldArchivedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.DeleteAfter(); ok {
		_spec.SetField(user.FieldDeleteAfter, field.TypeTime, value)
	}
	if uu.mutation.DeleteAfterCleared() {
		_spec.ClearField(user.FieldDeleteAfter, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetIsActive sets the "is_active" field.
func (uuo *UserUpdateOne) SetIsActive(b bool) *UserUpdateOne {
	uuo.mutation.SetIsActive(b)
	return uuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsActive(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsActive(*b)
	}
	return uuo
}

// SetIsBlocked sets the "is_blocked" field.
func (uuo *UserUpdateOne) SetIsBlocked(b bool) *UserUpdateOne {
	uuo.mutation.SetIsBlocked(b)
	return uuo
}

// SetNillableIsBlocked sets the "is_blocked" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsBlocked(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsBlocked(*b)
	}
	return uuo
}

// SetSyncCode sets the "sync_code" field.
func (uuo *UserUpdateOne) SetSyncCode(s string) *UserUpdateOne {
	uuo.mutation.SetSyncCode(s)
	return uuo
}

// SetNillableSyncCode sets the "sync_code" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSyncCode(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetSyncCode(*s)
	}
	return uuo
}

// ClearSyncCode clears the value of the "sync_code" field.
func (uuo *UserUpdateOne) ClearSyncCode() *UserUpdateOne {
	uuo.mutation.ClearSyncCode()
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetIsArchived sets the "is_archived" field.
func (uuo *UserUpdateOne) SetIsArchived(b bool) *UserUpdateOne {
	uuo.mutation.SetIsArchived(b)
	return uuo
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsArchived(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsArchived(*b)
	}
	return uuo
}

// SetArchivedAt sets the "archived_at" field.
func (uuo *UserUpdateOne) SetArchivedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetArchivedAt(t)
	return uuo
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableArchivedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetArchivedAt(*t)
	}
	return uuo
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (uuo *UserUpdateOne) ClearArchivedAt() *UserUpdateOne {
	uuo.mutation.ClearArchivedAt()
	return uuo
}

// SetDeleteAfter sets the "delete_after" field.
func (uuo *UserUpdateOne) SetDeleteAfter(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDeleteAfter(t)
	return uuo
}

// SetNillableDeleteAfter sets the "delete_after" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeleteAfter(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDeleteAfter(*t)
	}
	return uuo
}

// ClearDeleteAfter clears the value of the "delete_after" field.
func (uuo *UserUpdateOne) ClearDeleteAfter() *UserUpdateOne {
	uuo.mutation.ClearDeleteAfter()
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.IsBlocked(); ok {
		_spec.SetField(user.FieldIsBlocked, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.SyncCode(); ok {
		_spec.SetField(user.FieldSyncCode, field.TypeString, value)
	}
	if uuo.mutation.SyncCodeCleared() {
		_spec.ClearField(user.FieldSyncCode, field.TypeString)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.IsArchived(); ok {
		_spec.SetField(user.FieldIsArchived, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.ArchivedAt(); ok {
		_spec.SetField(user.FieldArchivedAt, field.TypeTime, value)
	}
	if uuo.mutation.ArchivedAtCleared() {
		_spec.ClearField(user.FieldArchivedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.DeleteAfter(); ok {
		_spec.SetField(user.FieldDeleteAfter, field.TypeTime, value)
	}
	if uuo.mutation.DeleteAfterCleared() {
		_spec.ClearField(user.FieldDeleteAfter, field.TypeTime)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
