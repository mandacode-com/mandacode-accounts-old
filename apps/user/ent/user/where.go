// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"mandacode.com/accounts/user/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsActive, v))
}

// IsBlocked applies equality check predicate on the "is_blocked" field. It's identical to IsBlockedEQ.
func IsBlocked(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsBlocked, v))
}

// SyncCode applies equality check predicate on the "sync_code" field. It's identical to SyncCodeEQ.
func SyncCode(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSyncCode, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// IsArchived applies equality check predicate on the "is_archived" field. It's identical to IsArchivedEQ.
func IsArchived(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsArchived, v))
}

// ArchivedAt applies equality check predicate on the "archived_at" field. It's identical to ArchivedAtEQ.
func ArchivedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldArchivedAt, v))
}

// DeleteAfter applies equality check predicate on the "delete_after" field. It's identical to DeleteAfterEQ.
func DeleteAfter(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeleteAfter, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsActive, v))
}

// IsBlockedEQ applies the EQ predicate on the "is_blocked" field.
func IsBlockedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsBlocked, v))
}

// IsBlockedNEQ applies the NEQ predicate on the "is_blocked" field.
func IsBlockedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsBlocked, v))
}

// SyncCodeEQ applies the EQ predicate on the "sync_code" field.
func SyncCodeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSyncCode, v))
}

// SyncCodeNEQ applies the NEQ predicate on the "sync_code" field.
func SyncCodeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSyncCode, v))
}

// SyncCodeIn applies the In predicate on the "sync_code" field.
func SyncCodeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSyncCode, vs...))
}

// SyncCodeNotIn applies the NotIn predicate on the "sync_code" field.
func SyncCodeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSyncCode, vs...))
}

// SyncCodeGT applies the GT predicate on the "sync_code" field.
func SyncCodeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSyncCode, v))
}

// SyncCodeGTE applies the GTE predicate on the "sync_code" field.
func SyncCodeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSyncCode, v))
}

// SyncCodeLT applies the LT predicate on the "sync_code" field.
func SyncCodeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSyncCode, v))
}

// SyncCodeLTE applies the LTE predicate on the "sync_code" field.
func SyncCodeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSyncCode, v))
}

// SyncCodeContains applies the Contains predicate on the "sync_code" field.
func SyncCodeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSyncCode, v))
}

// SyncCodeHasPrefix applies the HasPrefix predicate on the "sync_code" field.
func SyncCodeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSyncCode, v))
}

// SyncCodeHasSuffix applies the HasSuffix predicate on the "sync_code" field.
func SyncCodeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSyncCode, v))
}

// SyncCodeIsNil applies the IsNil predicate on the "sync_code" field.
func SyncCodeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldSyncCode))
}

// SyncCodeNotNil applies the NotNil predicate on the "sync_code" field.
func SyncCodeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldSyncCode))
}

// SyncCodeEqualFold applies the EqualFold predicate on the "sync_code" field.
func SyncCodeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSyncCode, v))
}

// SyncCodeContainsFold applies the ContainsFold predicate on the "sync_code" field.
func SyncCodeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSyncCode, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// IsArchivedEQ applies the EQ predicate on the "is_archived" field.
func IsArchivedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsArchived, v))
}

// IsArchivedNEQ applies the NEQ predicate on the "is_archived" field.
func IsArchivedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsArchived, v))
}

// ArchivedAtEQ applies the EQ predicate on the "archived_at" field.
func ArchivedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldArchivedAt, v))
}

// ArchivedAtNEQ applies the NEQ predicate on the "archived_at" field.
func ArchivedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldArchivedAt, v))
}

// ArchivedAtIn applies the In predicate on the "archived_at" field.
func ArchivedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldArchivedAt, vs...))
}

// ArchivedAtNotIn applies the NotIn predicate on the "archived_at" field.
func ArchivedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldArchivedAt, vs...))
}

// ArchivedAtGT applies the GT predicate on the "archived_at" field.
func ArchivedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldArchivedAt, v))
}

// ArchivedAtGTE applies the GTE predicate on the "archived_at" field.
func ArchivedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldArchivedAt, v))
}

// ArchivedAtLT applies the LT predicate on the "archived_at" field.
func ArchivedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldArchivedAt, v))
}

// ArchivedAtLTE applies the LTE predicate on the "archived_at" field.
func ArchivedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldArchivedAt, v))
}

// ArchivedAtIsNil applies the IsNil predicate on the "archived_at" field.
func ArchivedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldArchivedAt))
}

// ArchivedAtNotNil applies the NotNil predicate on the "archived_at" field.
func ArchivedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldArchivedAt))
}

// DeleteAfterEQ applies the EQ predicate on the "delete_after" field.
func DeleteAfterEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeleteAfter, v))
}

// DeleteAfterNEQ applies the NEQ predicate on the "delete_after" field.
func DeleteAfterNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDeleteAfter, v))
}

// DeleteAfterIn applies the In predicate on the "delete_after" field.
func DeleteAfterIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldDeleteAfter, vs...))
}

// DeleteAfterNotIn applies the NotIn predicate on the "delete_after" field.
func DeleteAfterNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDeleteAfter, vs...))
}

// DeleteAfterGT applies the GT predicate on the "delete_after" field.
func DeleteAfterGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldDeleteAfter, v))
}

// DeleteAfterGTE applies the GTE predicate on the "delete_after" field.
func DeleteAfterGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDeleteAfter, v))
}

// DeleteAfterLT applies the LT predicate on the "delete_after" field.
func DeleteAfterLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldDeleteAfter, v))
}

// DeleteAfterLTE applies the LTE predicate on the "delete_after" field.
func DeleteAfterLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDeleteAfter, v))
}

// DeleteAfterIsNil applies the IsNil predicate on the "delete_after" field.
func DeleteAfterIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDeleteAfter))
}

// DeleteAfterNotNil applies the NotNil predicate on the "delete_after" field.
func DeleteAfterNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDeleteAfter))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
