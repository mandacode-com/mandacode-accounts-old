// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: token/v1/token.proto

package tokenv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _token_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GenerateAccessTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateAccessTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateAccessTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateAccessTokenRequestMultiError, or nil if none found.
func (m *GenerateAccessTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateAccessTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GenerateAccessTokenRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenerateAccessTokenRequestMultiError(errors)
	}

	return nil
}

func (m *GenerateAccessTokenRequest) _validateUuid(uuid string) error {
	if matched := _token_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GenerateAccessTokenRequestMultiError is an error wrapping multiple
// validation errors returned by GenerateAccessTokenRequest.ValidateAll() if
// the designated constraints aren't met.
type GenerateAccessTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateAccessTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateAccessTokenRequestMultiError) AllErrors() []error { return m }

// GenerateAccessTokenRequestValidationError is the validation error returned
// by GenerateAccessTokenRequest.Validate if the designated constraints aren't met.
type GenerateAccessTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateAccessTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateAccessTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateAccessTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateAccessTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateAccessTokenRequestValidationError) ErrorName() string {
	return "GenerateAccessTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateAccessTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateAccessTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateAccessTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateAccessTokenRequestValidationError{}

// Validate checks the field values on GenerateAccessTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateAccessTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateAccessTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateAccessTokenResponseMultiError, or nil if none found.
func (m *GenerateAccessTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateAccessTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := GenerateAccessTokenResponseValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExpiresAt() <= 0 {
		err := GenerateAccessTokenResponseValidationError{
			field:  "ExpiresAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenerateAccessTokenResponseMultiError(errors)
	}

	return nil
}

// GenerateAccessTokenResponseMultiError is an error wrapping multiple
// validation errors returned by GenerateAccessTokenResponse.ValidateAll() if
// the designated constraints aren't met.
type GenerateAccessTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateAccessTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateAccessTokenResponseMultiError) AllErrors() []error { return m }

// GenerateAccessTokenResponseValidationError is the validation error returned
// by GenerateAccessTokenResponse.Validate if the designated constraints
// aren't met.
type GenerateAccessTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateAccessTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateAccessTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateAccessTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateAccessTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateAccessTokenResponseValidationError) ErrorName() string {
	return "GenerateAccessTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateAccessTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateAccessTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateAccessTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateAccessTokenResponseValidationError{}

// Validate checks the field values on VerifyAccessTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyAccessTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyAccessTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyAccessTokenRequestMultiError, or nil if none found.
func (m *VerifyAccessTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyAccessTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := VerifyAccessTokenRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerifyAccessTokenRequestMultiError(errors)
	}

	return nil
}

// VerifyAccessTokenRequestMultiError is an error wrapping multiple validation
// errors returned by VerifyAccessTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type VerifyAccessTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyAccessTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyAccessTokenRequestMultiError) AllErrors() []error { return m }

// VerifyAccessTokenRequestValidationError is the validation error returned by
// VerifyAccessTokenRequest.Validate if the designated constraints aren't met.
type VerifyAccessTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyAccessTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyAccessTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyAccessTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyAccessTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyAccessTokenRequestValidationError) ErrorName() string {
	return "VerifyAccessTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyAccessTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyAccessTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyAccessTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyAccessTokenRequestValidationError{}

// Validate checks the field values on VerifyAccessTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyAccessTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyAccessTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyAccessTokenResponseMultiError, or nil if none found.
func (m *VerifyAccessTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyAccessTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Valid

	if m.UserId != nil {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = VerifyAccessTokenResponseValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return VerifyAccessTokenResponseMultiError(errors)
	}

	return nil
}

func (m *VerifyAccessTokenResponse) _validateUuid(uuid string) error {
	if matched := _token_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// VerifyAccessTokenResponseMultiError is an error wrapping multiple validation
// errors returned by VerifyAccessTokenResponse.ValidateAll() if the
// designated constraints aren't met.
type VerifyAccessTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyAccessTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyAccessTokenResponseMultiError) AllErrors() []error { return m }

// VerifyAccessTokenResponseValidationError is the validation error returned by
// VerifyAccessTokenResponse.Validate if the designated constraints aren't met.
type VerifyAccessTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyAccessTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyAccessTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyAccessTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyAccessTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyAccessTokenResponseValidationError) ErrorName() string {
	return "VerifyAccessTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyAccessTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyAccessTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyAccessTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyAccessTokenResponseValidationError{}

// Validate checks the field values on GenerateRefreshTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateRefreshTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateRefreshTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateRefreshTokenRequestMultiError, or nil if none found.
func (m *GenerateRefreshTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateRefreshTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GenerateRefreshTokenRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenerateRefreshTokenRequestMultiError(errors)
	}

	return nil
}

func (m *GenerateRefreshTokenRequest) _validateUuid(uuid string) error {
	if matched := _token_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GenerateRefreshTokenRequestMultiError is an error wrapping multiple
// validation errors returned by GenerateRefreshTokenRequest.ValidateAll() if
// the designated constraints aren't met.
type GenerateRefreshTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateRefreshTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateRefreshTokenRequestMultiError) AllErrors() []error { return m }

// GenerateRefreshTokenRequestValidationError is the validation error returned
// by GenerateRefreshTokenRequest.Validate if the designated constraints
// aren't met.
type GenerateRefreshTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateRefreshTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateRefreshTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateRefreshTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateRefreshTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateRefreshTokenRequestValidationError) ErrorName() string {
	return "GenerateRefreshTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateRefreshTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateRefreshTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateRefreshTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateRefreshTokenRequestValidationError{}

// Validate checks the field values on GenerateRefreshTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateRefreshTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateRefreshTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateRefreshTokenResponseMultiError, or nil if none found.
func (m *GenerateRefreshTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateRefreshTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := GenerateRefreshTokenResponseValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExpiresAt() <= 0 {
		err := GenerateRefreshTokenResponseValidationError{
			field:  "ExpiresAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenerateRefreshTokenResponseMultiError(errors)
	}

	return nil
}

// GenerateRefreshTokenResponseMultiError is an error wrapping multiple
// validation errors returned by GenerateRefreshTokenResponse.ValidateAll() if
// the designated constraints aren't met.
type GenerateRefreshTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateRefreshTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateRefreshTokenResponseMultiError) AllErrors() []error { return m }

// GenerateRefreshTokenResponseValidationError is the validation error returned
// by GenerateRefreshTokenResponse.Validate if the designated constraints
// aren't met.
type GenerateRefreshTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateRefreshTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateRefreshTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateRefreshTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateRefreshTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateRefreshTokenResponseValidationError) ErrorName() string {
	return "GenerateRefreshTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateRefreshTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateRefreshTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateRefreshTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateRefreshTokenResponseValidationError{}

// Validate checks the field values on VerifyRefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyRefreshTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyRefreshTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyRefreshTokenRequestMultiError, or nil if none found.
func (m *VerifyRefreshTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyRefreshTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := VerifyRefreshTokenRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerifyRefreshTokenRequestMultiError(errors)
	}

	return nil
}

// VerifyRefreshTokenRequestMultiError is an error wrapping multiple validation
// errors returned by VerifyRefreshTokenRequest.ValidateAll() if the
// designated constraints aren't met.
type VerifyRefreshTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyRefreshTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyRefreshTokenRequestMultiError) AllErrors() []error { return m }

// VerifyRefreshTokenRequestValidationError is the validation error returned by
// VerifyRefreshTokenRequest.Validate if the designated constraints aren't met.
type VerifyRefreshTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyRefreshTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyRefreshTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyRefreshTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyRefreshTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyRefreshTokenRequestValidationError) ErrorName() string {
	return "VerifyRefreshTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyRefreshTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyRefreshTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyRefreshTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyRefreshTokenRequestValidationError{}

// Validate checks the field values on VerifyRefreshTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyRefreshTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyRefreshTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyRefreshTokenResponseMultiError, or nil if none found.
func (m *VerifyRefreshTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyRefreshTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Valid

	if m.UserId != nil {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = VerifyRefreshTokenResponseValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return VerifyRefreshTokenResponseMultiError(errors)
	}

	return nil
}

func (m *VerifyRefreshTokenResponse) _validateUuid(uuid string) error {
	if matched := _token_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// VerifyRefreshTokenResponseMultiError is an error wrapping multiple
// validation errors returned by VerifyRefreshTokenResponse.ValidateAll() if
// the designated constraints aren't met.
type VerifyRefreshTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyRefreshTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyRefreshTokenResponseMultiError) AllErrors() []error { return m }

// VerifyRefreshTokenResponseValidationError is the validation error returned
// by VerifyRefreshTokenResponse.Validate if the designated constraints aren't met.
type VerifyRefreshTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyRefreshTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyRefreshTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyRefreshTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyRefreshTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyRefreshTokenResponseValidationError) ErrorName() string {
	return "VerifyRefreshTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyRefreshTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyRefreshTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyRefreshTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyRefreshTokenResponseValidationError{}

// Validate checks the field values on GenerateEmailVerificationTokenRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GenerateEmailVerificationTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateEmailVerificationTokenRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GenerateEmailVerificationTokenRequestMultiError, or nil if none found.
func (m *GenerateEmailVerificationTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateEmailVerificationTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GenerateEmailVerificationTokenRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = GenerateEmailVerificationTokenRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := GenerateEmailVerificationTokenRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenerateEmailVerificationTokenRequestMultiError(errors)
	}

	return nil
}

func (m *GenerateEmailVerificationTokenRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *GenerateEmailVerificationTokenRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

func (m *GenerateEmailVerificationTokenRequest) _validateUuid(uuid string) error {
	if matched := _token_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GenerateEmailVerificationTokenRequestMultiError is an error wrapping
// multiple validation errors returned by
// GenerateEmailVerificationTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type GenerateEmailVerificationTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateEmailVerificationTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateEmailVerificationTokenRequestMultiError) AllErrors() []error { return m }

// GenerateEmailVerificationTokenRequestValidationError is the validation error
// returned by GenerateEmailVerificationTokenRequest.Validate if the
// designated constraints aren't met.
type GenerateEmailVerificationTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateEmailVerificationTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateEmailVerificationTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateEmailVerificationTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateEmailVerificationTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateEmailVerificationTokenRequestValidationError) ErrorName() string {
	return "GenerateEmailVerificationTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateEmailVerificationTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateEmailVerificationTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateEmailVerificationTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateEmailVerificationTokenRequestValidationError{}

// Validate checks the field values on GenerateEmailVerificationTokenResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GenerateEmailVerificationTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GenerateEmailVerificationTokenResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GenerateEmailVerificationTokenResponseMultiError, or nil if none found.
func (m *GenerateEmailVerificationTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateEmailVerificationTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := GenerateEmailVerificationTokenResponseValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExpiresAt() <= 0 {
		err := GenerateEmailVerificationTokenResponseValidationError{
			field:  "ExpiresAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenerateEmailVerificationTokenResponseMultiError(errors)
	}

	return nil
}

// GenerateEmailVerificationTokenResponseMultiError is an error wrapping
// multiple validation errors returned by
// GenerateEmailVerificationTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type GenerateEmailVerificationTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateEmailVerificationTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateEmailVerificationTokenResponseMultiError) AllErrors() []error { return m }

// GenerateEmailVerificationTokenResponseValidationError is the validation
// error returned by GenerateEmailVerificationTokenResponse.Validate if the
// designated constraints aren't met.
type GenerateEmailVerificationTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateEmailVerificationTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateEmailVerificationTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateEmailVerificationTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateEmailVerificationTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateEmailVerificationTokenResponseValidationError) ErrorName() string {
	return "GenerateEmailVerificationTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateEmailVerificationTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateEmailVerificationTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateEmailVerificationTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateEmailVerificationTokenResponseValidationError{}

// Validate checks the field values on VerifyEmailVerificationTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *VerifyEmailVerificationTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyEmailVerificationTokenRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// VerifyEmailVerificationTokenRequestMultiError, or nil if none found.
func (m *VerifyEmailVerificationTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyEmailVerificationTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := VerifyEmailVerificationTokenRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerifyEmailVerificationTokenRequestMultiError(errors)
	}

	return nil
}

// VerifyEmailVerificationTokenRequestMultiError is an error wrapping multiple
// validation errors returned by
// VerifyEmailVerificationTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type VerifyEmailVerificationTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyEmailVerificationTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyEmailVerificationTokenRequestMultiError) AllErrors() []error { return m }

// VerifyEmailVerificationTokenRequestValidationError is the validation error
// returned by VerifyEmailVerificationTokenRequest.Validate if the designated
// constraints aren't met.
type VerifyEmailVerificationTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyEmailVerificationTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyEmailVerificationTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyEmailVerificationTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyEmailVerificationTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyEmailVerificationTokenRequestValidationError) ErrorName() string {
	return "VerifyEmailVerificationTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyEmailVerificationTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyEmailVerificationTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyEmailVerificationTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyEmailVerificationTokenRequestValidationError{}

// Validate checks the field values on VerifyEmailVerificationTokenResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *VerifyEmailVerificationTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyEmailVerificationTokenResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// VerifyEmailVerificationTokenResponseMultiError, or nil if none found.
func (m *VerifyEmailVerificationTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyEmailVerificationTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Valid

	if m.UserId != nil {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = VerifyEmailVerificationTokenResponseValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Email != nil {

		if err := m._validateEmail(m.GetEmail()); err != nil {
			err = VerifyEmailVerificationTokenResponseValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Code != nil {

		if utf8.RuneCountInString(m.GetCode()) < 1 {
			err := VerifyEmailVerificationTokenResponseValidationError{
				field:  "Code",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return VerifyEmailVerificationTokenResponseMultiError(errors)
	}

	return nil
}

func (m *VerifyEmailVerificationTokenResponse) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *VerifyEmailVerificationTokenResponse) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

func (m *VerifyEmailVerificationTokenResponse) _validateUuid(uuid string) error {
	if matched := _token_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// VerifyEmailVerificationTokenResponseMultiError is an error wrapping multiple
// validation errors returned by
// VerifyEmailVerificationTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type VerifyEmailVerificationTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyEmailVerificationTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyEmailVerificationTokenResponseMultiError) AllErrors() []error { return m }

// VerifyEmailVerificationTokenResponseValidationError is the validation error
// returned by VerifyEmailVerificationTokenResponse.Validate if the designated
// constraints aren't met.
type VerifyEmailVerificationTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyEmailVerificationTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyEmailVerificationTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyEmailVerificationTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyEmailVerificationTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyEmailVerificationTokenResponseValidationError) ErrorName() string {
	return "VerifyEmailVerificationTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyEmailVerificationTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyEmailVerificationTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyEmailVerificationTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyEmailVerificationTokenResponseValidationError{}
