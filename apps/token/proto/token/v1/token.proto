syntax = "proto3";

package token.v1;

import "validate/validate.proto";

option go_package = "mandacode.com/accounts/token/proto/token/v1;tokenv1";

service TokenService {
  // Generates an access token for a user
  rpc GenerateAccessToken(GenerateAccessTokenRequest)
      returns (GenerateAccessTokenResponse);

  // Verifies an access token
  rpc VerifyAccessToken(VerifyAccessTokenRequest)
      returns (VerifyAccessTokenResponse);

  // Generates a refresh token for a user
  rpc GenerateRefreshToken(GenerateRefreshTokenRequest)
      returns (GenerateRefreshTokenResponse);

  // Verifies a refresh token
  rpc VerifyRefreshToken(VerifyRefreshTokenRequest)
      returns (VerifyRefreshTokenResponse);

  // Generates an email verification token
  rpc GenerateEmailVerificationToken(GenerateEmailVerificationTokenRequest)
      returns (GenerateEmailVerificationTokenResponse);

  // Verifies an email verification token
  rpc VerifyEmailVerificationToken(VerifyEmailVerificationTokenRequest)
      returns (VerifyEmailVerificationTokenResponse);
}

message GenerateAccessTokenRequest {
  string user_id = 1 [ (validate.rules).string = {uuid : true} ];
}

message GenerateAccessTokenResponse {
  string token = 1;
  int64 expires_at = 2; // Expiration time in Unix timestamp format
}

message VerifyAccessTokenRequest {
  string token = 1
      [ (validate.rules).string = {min_len : 1} ]; // The access token to verify
}

message VerifyAccessTokenResponse {
  bool valid = 1; // Indicates if the token is valid
  optional string user_id = 2 [
    (validate.rules).string = {uuid : true}
  ]; // User ID associated with the token, if valid
}

message GenerateRefreshTokenRequest {
  // string user_id = 1; // User ID for whom the refresh token is generated
  string user_id = 1 [ (validate.rules).string = {uuid : true} ];
}

message GenerateRefreshTokenResponse {
  string token = 1;
  int64 expires_at = 2; // Expiration time in Unix timestamp format
}

message VerifyRefreshTokenRequest {
  // string token = 1; // The refresh token to verify
  string token = 1 [
    (validate.rules).string = {min_len : 1}
  ]; // The refresh token to verify
}

message VerifyRefreshTokenResponse {
  bool valid = 1; // Indicates if the token is valid
  optional string user_id = 2 [
    (validate.rules).string = {uuid : true}
  ]; // User ID associated with the token, if valid
}

message GenerateEmailVerificationTokenRequest {
  string email = 1 [
    (validate.rules).string = {email : true}
  ]; // Email address for which the verification token is generated
  string code = 2 [
    (validate.rules).string = {min_len : 1}
  ]; // Optional code to include in the token
}

message GenerateEmailVerificationTokenResponse {
  string token = 1;
  int64 expires_at = 2; // Expiration time in Unix timestamp format
}

message VerifyEmailVerificationTokenRequest {
  string token = 1 [
    (validate.rules).string = {min_len : 1}
  ]; // The email verification token to verify
}

message VerifyEmailVerificationTokenResponse {
  bool valid = 1;   // Indicates if the token is valid
  string email = 2; // Email address associated with the token, if valid
}
