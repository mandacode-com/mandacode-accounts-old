// Code generated by MockGen. DO NOT EDIT.
// Source: mandacode.com/accounts/auth/internal/domain/repository (interfaces: OAuthUserRepository)
//
// Generated by this command:
//
//	mockgen mandacode.com/accounts/auth/internal/domain/repository OAuthUserRepository
//

// Package mock_repodomain is a generated GoMock package.
package mock_repodomain

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	ent "mandacode.com/accounts/auth/ent"
	oauthuser "mandacode.com/accounts/auth/ent/oauthuser"
)

// MockOAuthUserRepository is a mock of OAuthUserRepository interface.
type MockOAuthUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthUserRepositoryMockRecorder
	isgomock struct{}
}

// MockOAuthUserRepositoryMockRecorder is the mock recorder for MockOAuthUserRepository.
type MockOAuthUserRepositoryMockRecorder struct {
	mock *MockOAuthUserRepository
}

// NewMockOAuthUserRepository creates a new mock instance.
func NewMockOAuthUserRepository(ctrl *gomock.Controller) *MockOAuthUserRepository {
	mock := &MockOAuthUserRepository{ctrl: ctrl}
	mock.recorder = &MockOAuthUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthUserRepository) EXPECT() *MockOAuthUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockOAuthUserRepository) CreateUser(userID uuid.UUID, provider oauthuser.Provider, providerID, email string, isActive, isVerified *bool) (*ent.OAuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", userID, provider, providerID, email, isActive, isVerified)
	ret0, _ := ret[0].(*ent.OAuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockOAuthUserRepositoryMockRecorder) CreateUser(userID, provider, providerID, email, isActive, isVerified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockOAuthUserRepository)(nil).CreateUser), userID, provider, providerID, email, isActive, isVerified)
}

// DeleteUser mocks base method.
func (m *MockOAuthUserRepository) DeleteUser(userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockOAuthUserRepositoryMockRecorder) DeleteUser(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockOAuthUserRepository)(nil).DeleteUser), userID)
}

// DeleteUserByProvider mocks base method.
func (m *MockOAuthUserRepository) DeleteUserByProvider(userID uuid.UUID, provider oauthuser.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByProvider", userID, provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByProvider indicates an expected call of DeleteUserByProvider.
func (mr *MockOAuthUserRepositoryMockRecorder) DeleteUserByProvider(userID, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByProvider", reflect.TypeOf((*MockOAuthUserRepository)(nil).DeleteUserByProvider), userID, provider)
}

// GetUserByProvider mocks base method.
func (m *MockOAuthUserRepository) GetUserByProvider(provider oauthuser.Provider, providerID string) (*ent.OAuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByProvider", provider, providerID)
	ret0, _ := ret[0].(*ent.OAuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByProvider indicates an expected call of GetUserByProvider.
func (mr *MockOAuthUserRepositoryMockRecorder) GetUserByProvider(provider, providerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByProvider", reflect.TypeOf((*MockOAuthUserRepository)(nil).GetUserByProvider), provider, providerID)
}

// GetUserByUserID mocks base method.
func (m *MockOAuthUserRepository) GetUserByUserID(userID uuid.UUID, provider oauthuser.Provider) (*ent.OAuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserID", userID, provider)
	ret0, _ := ret[0].(*ent.OAuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserID indicates an expected call of GetUserByUserID.
func (mr *MockOAuthUserRepositoryMockRecorder) GetUserByUserID(userID, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserID", reflect.TypeOf((*MockOAuthUserRepository)(nil).GetUserByUserID), userID, provider)
}

// UpdateUser mocks base method.
func (m *MockOAuthUserRepository) UpdateUser(userID uuid.UUID, provider oauthuser.Provider, providerID, email *string, isActive, isVerified *bool) (*ent.OAuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", userID, provider, providerID, email, isActive, isVerified)
	ret0, _ := ret[0].(*ent.OAuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockOAuthUserRepositoryMockRecorder) UpdateUser(userID, provider, providerID, email, isActive, isVerified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockOAuthUserRepository)(nil).UpdateUser), userID, provider, providerID, email, isActive, isVerified)
}
