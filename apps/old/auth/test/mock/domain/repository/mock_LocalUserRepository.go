// Code generated by MockGen. DO NOT EDIT.
// Source: mandacode.com/accounts/auth/internal/domain/repository (interfaces: LocalUserRepository)
//
// Generated by this command:
//
//	mockgen mandacode.com/accounts/auth/internal/domain/repository LocalUserRepository
//

// Package mock_repodomain is a generated GoMock package.
package mock_repodomain

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	ent "mandacode.com/accounts/auth/ent"
)

// MockLocalUserRepository is a mock of LocalUserRepository interface.
type MockLocalUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLocalUserRepositoryMockRecorder
	isgomock struct{}
}

// MockLocalUserRepositoryMockRecorder is the mock recorder for MockLocalUserRepository.
type MockLocalUserRepositoryMockRecorder struct {
	mock *MockLocalUserRepository
}

// NewMockLocalUserRepository creates a new mock instance.
func NewMockLocalUserRepository(ctrl *gomock.Controller) *MockLocalUserRepository {
	mock := &MockLocalUserRepository{ctrl: ctrl}
	mock.recorder = &MockLocalUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalUserRepository) EXPECT() *MockLocalUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockLocalUserRepository) CreateUser(userID uuid.UUID, email, password string, isActive, isVerified *bool) (*ent.LocalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", userID, email, password, isActive, isVerified)
	ret0, _ := ret[0].(*ent.LocalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockLocalUserRepositoryMockRecorder) CreateUser(userID, email, password, isActive, isVerified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockLocalUserRepository)(nil).CreateUser), userID, email, password, isActive, isVerified)
}

// DeleteUser mocks base method.
func (m *MockLocalUserRepository) DeleteUser(userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockLocalUserRepositoryMockRecorder) DeleteUser(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockLocalUserRepository)(nil).DeleteUser), userID)
}

// GetUserByEmail mocks base method.
func (m *MockLocalUserRepository) GetUserByEmail(email string) (*ent.LocalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*ent.LocalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockLocalUserRepositoryMockRecorder) GetUserByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockLocalUserRepository)(nil).GetUserByEmail), email)
}

// GetUserByID mocks base method.
func (m *MockLocalUserRepository) GetUserByID(userID uuid.UUID) (*ent.LocalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(*ent.LocalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockLocalUserRepositoryMockRecorder) GetUserByID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockLocalUserRepository)(nil).GetUserByID), userID)
}

// UpdateUser mocks base method.
func (m *MockLocalUserRepository) UpdateUser(userID uuid.UUID, email, password *string, isActive, isVerified *bool) (*ent.LocalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", userID, email, password, isActive, isVerified)
	ret0, _ := ret[0].(*ent.LocalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockLocalUserRepositoryMockRecorder) UpdateUser(userID, email, password, isActive, isVerified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockLocalUserRepository)(nil).UpdateUser), userID, email, password, isActive, isVerified)
}
