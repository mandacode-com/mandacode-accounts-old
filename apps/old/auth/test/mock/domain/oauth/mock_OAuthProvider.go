// Code generated by MockGen. DO NOT EDIT.
// Source: mandacode.com/accounts/auth/internal/domain/oauth (interfaces: OAuthProvider)
//
// Generated by this command:
//
//	mockgen mandacode.com/accounts/auth/internal/domain/oauth OAuthProvider
//

// Package mock_oauthdomain is a generated GoMock package.
package mock_oauthdomain

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	oauthdto "mandacode.com/accounts/auth/internal/infra/oauth/dto"
)

// MockOAuthProvider is a mock of OAuthProvider interface.
type MockOAuthProvider struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthProviderMockRecorder
	isgomock struct{}
}

// MockOAuthProviderMockRecorder is the mock recorder for MockOAuthProvider.
type MockOAuthProviderMockRecorder struct {
	mock *MockOAuthProvider
}

// NewMockOAuthProvider creates a new mock instance.
func NewMockOAuthProvider(ctrl *gomock.Controller) *MockOAuthProvider {
	mock := &MockOAuthProvider{ctrl: ctrl}
	mock.recorder = &MockOAuthProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthProvider) EXPECT() *MockOAuthProviderMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *MockOAuthProvider) GetUserInfo(accessToken string) (*oauthdto.OAuthUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", accessToken)
	ret0, _ := ret[0].(*oauthdto.OAuthUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockOAuthProviderMockRecorder) GetUserInfo(accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockOAuthProvider)(nil).GetUserInfo), accessToken)
}
