// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"mandacode.com/accounts/auth/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"mandacode.com/accounts/auth/ent/localuser"
	"mandacode.com/accounts/auth/ent/oauthuser"

	"mandacode.com/accounts/auth/ent/internal"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// LocalUser is the client for interacting with the LocalUser builders.
	LocalUser *LocalUserClient
	// OAuthUser is the client for interacting with the OAuthUser builders.
	OAuthUser *OAuthUserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.LocalUser = NewLocalUserClient(c.config)
	c.OAuthUser = NewOAuthUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
		// schemaConfig contains alternative names for all tables.
		schemaConfig SchemaConfig
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.schemaConfig = DefaultSchemaConfig
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		LocalUser: NewLocalUserClient(cfg),
		OAuthUser: NewOAuthUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		LocalUser: NewLocalUserClient(cfg),
		OAuthUser: NewOAuthUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		LocalUser.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.LocalUser.Use(hooks...)
	c.OAuthUser.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.LocalUser.Intercept(interceptors...)
	c.OAuthUser.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *LocalUserMutation:
		return c.LocalUser.mutate(ctx, m)
	case *OAuthUserMutation:
		return c.OAuthUser.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// LocalUserClient is a client for the LocalUser schema.
type LocalUserClient struct {
	config
}

// NewLocalUserClient returns a client for the LocalUser from the given config.
func NewLocalUserClient(c config) *LocalUserClient {
	return &LocalUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `localuser.Hooks(f(g(h())))`.
func (c *LocalUserClient) Use(hooks ...Hook) {
	c.hooks.LocalUser = append(c.hooks.LocalUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `localuser.Intercept(f(g(h())))`.
func (c *LocalUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.LocalUser = append(c.inters.LocalUser, interceptors...)
}

// Create returns a builder for creating a LocalUser entity.
func (c *LocalUserClient) Create() *LocalUserCreate {
	mutation := newLocalUserMutation(c.config, OpCreate)
	return &LocalUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LocalUser entities.
func (c *LocalUserClient) CreateBulk(builders ...*LocalUserCreate) *LocalUserCreateBulk {
	return &LocalUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LocalUserClient) MapCreateBulk(slice any, setFunc func(*LocalUserCreate, int)) *LocalUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LocalUserCreateBulk{err: fmt.Errorf("calling to LocalUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LocalUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LocalUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LocalUser.
func (c *LocalUserClient) Update() *LocalUserUpdate {
	mutation := newLocalUserMutation(c.config, OpUpdate)
	return &LocalUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LocalUserClient) UpdateOne(lu *LocalUser) *LocalUserUpdateOne {
	mutation := newLocalUserMutation(c.config, OpUpdateOne, withLocalUser(lu))
	return &LocalUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LocalUserClient) UpdateOneID(id uuid.UUID) *LocalUserUpdateOne {
	mutation := newLocalUserMutation(c.config, OpUpdateOne, withLocalUserID(id))
	return &LocalUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LocalUser.
func (c *LocalUserClient) Delete() *LocalUserDelete {
	mutation := newLocalUserMutation(c.config, OpDelete)
	return &LocalUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LocalUserClient) DeleteOne(lu *LocalUser) *LocalUserDeleteOne {
	return c.DeleteOneID(lu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LocalUserClient) DeleteOneID(id uuid.UUID) *LocalUserDeleteOne {
	builder := c.Delete().Where(localuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LocalUserDeleteOne{builder}
}

// Query returns a query builder for LocalUser.
func (c *LocalUserClient) Query() *LocalUserQuery {
	return &LocalUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLocalUser},
		inters: c.Interceptors(),
	}
}

// Get returns a LocalUser entity by its id.
func (c *LocalUserClient) Get(ctx context.Context, id uuid.UUID) (*LocalUser, error) {
	return c.Query().Where(localuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LocalUserClient) GetX(ctx context.Context, id uuid.UUID) *LocalUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LocalUserClient) Hooks() []Hook {
	return c.hooks.LocalUser
}

// Interceptors returns the client interceptors.
func (c *LocalUserClient) Interceptors() []Interceptor {
	return c.inters.LocalUser
}

func (c *LocalUserClient) mutate(ctx context.Context, m *LocalUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LocalUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LocalUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LocalUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LocalUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LocalUser mutation op: %q", m.Op())
	}
}

// OAuthUserClient is a client for the OAuthUser schema.
type OAuthUserClient struct {
	config
}

// NewOAuthUserClient returns a client for the OAuthUser from the given config.
func NewOAuthUserClient(c config) *OAuthUserClient {
	return &OAuthUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthuser.Hooks(f(g(h())))`.
func (c *OAuthUserClient) Use(hooks ...Hook) {
	c.hooks.OAuthUser = append(c.hooks.OAuthUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oauthuser.Intercept(f(g(h())))`.
func (c *OAuthUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.OAuthUser = append(c.inters.OAuthUser, interceptors...)
}

// Create returns a builder for creating a OAuthUser entity.
func (c *OAuthUserClient) Create() *OAuthUserCreate {
	mutation := newOAuthUserMutation(c.config, OpCreate)
	return &OAuthUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuthUser entities.
func (c *OAuthUserClient) CreateBulk(builders ...*OAuthUserCreate) *OAuthUserCreateBulk {
	return &OAuthUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OAuthUserClient) MapCreateBulk(slice any, setFunc func(*OAuthUserCreate, int)) *OAuthUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OAuthUserCreateBulk{err: fmt.Errorf("calling to OAuthUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OAuthUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OAuthUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuthUser.
func (c *OAuthUserClient) Update() *OAuthUserUpdate {
	mutation := newOAuthUserMutation(c.config, OpUpdate)
	return &OAuthUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuthUserClient) UpdateOne(ou *OAuthUser) *OAuthUserUpdateOne {
	mutation := newOAuthUserMutation(c.config, OpUpdateOne, withOAuthUser(ou))
	return &OAuthUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuthUserClient) UpdateOneID(id uuid.UUID) *OAuthUserUpdateOne {
	mutation := newOAuthUserMutation(c.config, OpUpdateOne, withOAuthUserID(id))
	return &OAuthUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuthUser.
func (c *OAuthUserClient) Delete() *OAuthUserDelete {
	mutation := newOAuthUserMutation(c.config, OpDelete)
	return &OAuthUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OAuthUserClient) DeleteOne(ou *OAuthUser) *OAuthUserDeleteOne {
	return c.DeleteOneID(ou.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OAuthUserClient) DeleteOneID(id uuid.UUID) *OAuthUserDeleteOne {
	builder := c.Delete().Where(oauthuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuthUserDeleteOne{builder}
}

// Query returns a query builder for OAuthUser.
func (c *OAuthUserClient) Query() *OAuthUserQuery {
	return &OAuthUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOAuthUser},
		inters: c.Interceptors(),
	}
}

// Get returns a OAuthUser entity by its id.
func (c *OAuthUserClient) Get(ctx context.Context, id uuid.UUID) (*OAuthUser, error) {
	return c.Query().Where(oauthuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuthUserClient) GetX(ctx context.Context, id uuid.UUID) *OAuthUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OAuthUserClient) Hooks() []Hook {
	return c.hooks.OAuthUser
}

// Interceptors returns the client interceptors.
func (c *OAuthUserClient) Interceptors() []Interceptor {
	return c.inters.OAuthUser
}

func (c *OAuthUserClient) mutate(ctx context.Context, m *OAuthUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OAuthUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OAuthUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OAuthUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OAuthUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OAuthUser mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		LocalUser, OAuthUser []ent.Hook
	}
	inters struct {
		LocalUser, OAuthUser []ent.Interceptor
	}
)

var (
	// DefaultSchemaConfig represents the default schema names for all tables as defined in ent/schema.
	DefaultSchemaConfig = SchemaConfig{
		LocalUser: tableSchemas[0],
		OAuthUser: tableSchemas[0],
	}
	tableSchemas = [...]string{"public"}
)

// SchemaConfig represents alternative schema names for all tables
// that can be passed at runtime.
type SchemaConfig = internal.SchemaConfig

// AlternateSchemas allows alternate schema names to be
// passed into ent operations.
func AlternateSchema(schemaConfig SchemaConfig) Option {
	return func(c *config) {
		c.schemaConfig = schemaConfig
	}
}
