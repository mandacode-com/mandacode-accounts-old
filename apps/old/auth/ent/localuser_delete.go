// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"mandacode.com/accounts/auth/ent/internal"
	"mandacode.com/accounts/auth/ent/localuser"
	"mandacode.com/accounts/auth/ent/predicate"
)

// LocalUserDelete is the builder for deleting a LocalUser entity.
type LocalUserDelete struct {
	config
	hooks    []Hook
	mutation *LocalUserMutation
}

// Where appends a list predicates to the LocalUserDelete builder.
func (lud *LocalUserDelete) Where(ps ...predicate.LocalUser) *LocalUserDelete {
	lud.mutation.Where(ps...)
	return lud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lud *LocalUserDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lud.sqlExec, lud.mutation, lud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lud *LocalUserDelete) ExecX(ctx context.Context) int {
	n, err := lud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lud *LocalUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(localuser.Table, sqlgraph.NewFieldSpec(localuser.FieldID, field.TypeUUID))
	_spec.Node.Schema = lud.schemaConfig.LocalUser
	ctx = internal.NewSchemaConfigContext(ctx, lud.schemaConfig)
	if ps := lud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lud.mutation.done = true
	return affected, err
}

// LocalUserDeleteOne is the builder for deleting a single LocalUser entity.
type LocalUserDeleteOne struct {
	lud *LocalUserDelete
}

// Where appends a list predicates to the LocalUserDelete builder.
func (ludo *LocalUserDeleteOne) Where(ps ...predicate.LocalUser) *LocalUserDeleteOne {
	ludo.lud.mutation.Where(ps...)
	return ludo
}

// Exec executes the deletion query.
func (ludo *LocalUserDeleteOne) Exec(ctx context.Context) error {
	n, err := ludo.lud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{localuser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ludo *LocalUserDeleteOne) ExecX(ctx context.Context) {
	if err := ludo.Exec(ctx); err != nil {
		panic(err)
	}
}
