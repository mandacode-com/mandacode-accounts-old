// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"mandacode.com/accounts/role/ent/clientaccess"
	"mandacode.com/accounts/role/ent/service"
)

// ClientAccessCreate is the builder for creating a ClientAccess entity.
type ClientAccessCreate struct {
	config
	mutation *ClientAccessMutation
	hooks    []Hook
}

// SetServiceID sets the "service_id" field.
func (cac *ClientAccessCreate) SetServiceID(u uuid.UUID) *ClientAccessCreate {
	cac.mutation.SetServiceID(u)
	return cac
}

// SetName sets the "name" field.
func (cac *ClientAccessCreate) SetName(s string) *ClientAccessCreate {
	cac.mutation.SetName(s)
	return cac
}

// SetClientID sets the "client_id" field.
func (cac *ClientAccessCreate) SetClientID(s string) *ClientAccessCreate {
	cac.mutation.SetClientID(s)
	return cac
}

// SetClientSecret sets the "client_secret" field.
func (cac *ClientAccessCreate) SetClientSecret(s string) *ClientAccessCreate {
	cac.mutation.SetClientSecret(s)
	return cac
}

// SetDescription sets the "description" field.
func (cac *ClientAccessCreate) SetDescription(s string) *ClientAccessCreate {
	cac.mutation.SetDescription(s)
	return cac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cac *ClientAccessCreate) SetNillableDescription(s *string) *ClientAccessCreate {
	if s != nil {
		cac.SetDescription(*s)
	}
	return cac
}

// SetIsActive sets the "is_active" field.
func (cac *ClientAccessCreate) SetIsActive(b bool) *ClientAccessCreate {
	cac.mutation.SetIsActive(b)
	return cac
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (cac *ClientAccessCreate) SetNillableIsActive(b *bool) *ClientAccessCreate {
	if b != nil {
		cac.SetIsActive(*b)
	}
	return cac
}

// SetCreatedAt sets the "created_at" field.
func (cac *ClientAccessCreate) SetCreatedAt(t time.Time) *ClientAccessCreate {
	cac.mutation.SetCreatedAt(t)
	return cac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cac *ClientAccessCreate) SetNillableCreatedAt(t *time.Time) *ClientAccessCreate {
	if t != nil {
		cac.SetCreatedAt(*t)
	}
	return cac
}

// SetUpdatedAt sets the "updated_at" field.
func (cac *ClientAccessCreate) SetUpdatedAt(t time.Time) *ClientAccessCreate {
	cac.mutation.SetUpdatedAt(t)
	return cac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cac *ClientAccessCreate) SetNillableUpdatedAt(t *time.Time) *ClientAccessCreate {
	if t != nil {
		cac.SetUpdatedAt(*t)
	}
	return cac
}

// SetID sets the "id" field.
func (cac *ClientAccessCreate) SetID(u uuid.UUID) *ClientAccessCreate {
	cac.mutation.SetID(u)
	return cac
}

// SetService sets the "service" edge to the Service entity.
func (cac *ClientAccessCreate) SetService(s *Service) *ClientAccessCreate {
	return cac.SetServiceID(s.ID)
}

// Mutation returns the ClientAccessMutation object of the builder.
func (cac *ClientAccessCreate) Mutation() *ClientAccessMutation {
	return cac.mutation
}

// Save creates the ClientAccess in the database.
func (cac *ClientAccessCreate) Save(ctx context.Context) (*ClientAccess, error) {
	cac.defaults()
	return withHooks(ctx, cac.sqlSave, cac.mutation, cac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cac *ClientAccessCreate) SaveX(ctx context.Context) *ClientAccess {
	v, err := cac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cac *ClientAccessCreate) Exec(ctx context.Context) error {
	_, err := cac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cac *ClientAccessCreate) ExecX(ctx context.Context) {
	if err := cac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cac *ClientAccessCreate) defaults() {
	if _, ok := cac.mutation.IsActive(); !ok {
		v := clientaccess.DefaultIsActive
		cac.mutation.SetIsActive(v)
	}
	if _, ok := cac.mutation.CreatedAt(); !ok {
		v := clientaccess.DefaultCreatedAt()
		cac.mutation.SetCreatedAt(v)
	}
	if _, ok := cac.mutation.UpdatedAt(); !ok {
		v := clientaccess.DefaultUpdatedAt()
		cac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cac *ClientAccessCreate) check() error {
	if _, ok := cac.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service_id", err: errors.New(`ent: missing required field "ClientAccess.service_id"`)}
	}
	if _, ok := cac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ClientAccess.name"`)}
	}
	if v, ok := cac.mutation.Name(); ok {
		if err := clientaccess.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ClientAccess.name": %w`, err)}
		}
	}
	if _, ok := cac.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "ClientAccess.client_id"`)}
	}
	if v, ok := cac.mutation.ClientID(); ok {
		if err := clientaccess.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "ClientAccess.client_id": %w`, err)}
		}
	}
	if _, ok := cac.mutation.ClientSecret(); !ok {
		return &ValidationError{Name: "client_secret", err: errors.New(`ent: missing required field "ClientAccess.client_secret"`)}
	}
	if v, ok := cac.mutation.ClientSecret(); ok {
		if err := clientaccess.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "ClientAccess.client_secret": %w`, err)}
		}
	}
	if _, ok := cac.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "ClientAccess.is_active"`)}
	}
	if _, ok := cac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ClientAccess.created_at"`)}
	}
	if _, ok := cac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ClientAccess.updated_at"`)}
	}
	if len(cac.mutation.ServiceIDs()) == 0 {
		return &ValidationError{Name: "service", err: errors.New(`ent: missing required edge "ClientAccess.service"`)}
	}
	return nil
}

func (cac *ClientAccessCreate) sqlSave(ctx context.Context) (*ClientAccess, error) {
	if err := cac.check(); err != nil {
		return nil, err
	}
	_node, _spec := cac.createSpec()
	if err := sqlgraph.CreateNode(ctx, cac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cac.mutation.id = &_node.ID
	cac.mutation.done = true
	return _node, nil
}

func (cac *ClientAccessCreate) createSpec() (*ClientAccess, *sqlgraph.CreateSpec) {
	var (
		_node = &ClientAccess{config: cac.config}
		_spec = sqlgraph.NewCreateSpec(clientaccess.Table, sqlgraph.NewFieldSpec(clientaccess.FieldID, field.TypeUUID))
	)
	if id, ok := cac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cac.mutation.Name(); ok {
		_spec.SetField(clientaccess.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cac.mutation.ClientID(); ok {
		_spec.SetField(clientaccess.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := cac.mutation.ClientSecret(); ok {
		_spec.SetField(clientaccess.FieldClientSecret, field.TypeString, value)
		_node.ClientSecret = value
	}
	if value, ok := cac.mutation.Description(); ok {
		_spec.SetField(clientaccess.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cac.mutation.IsActive(); ok {
		_spec.SetField(clientaccess.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := cac.mutation.CreatedAt(); ok {
		_spec.SetField(clientaccess.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cac.mutation.UpdatedAt(); ok {
		_spec.SetField(clientaccess.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cac.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clientaccess.ServiceTable,
			Columns: []string{clientaccess.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ServiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClientAccessCreateBulk is the builder for creating many ClientAccess entities in bulk.
type ClientAccessCreateBulk struct {
	config
	err      error
	builders []*ClientAccessCreate
}

// Save creates the ClientAccess entities in the database.
func (cacb *ClientAccessCreateBulk) Save(ctx context.Context) ([]*ClientAccess, error) {
	if cacb.err != nil {
		return nil, cacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cacb.builders))
	nodes := make([]*ClientAccess, len(cacb.builders))
	mutators := make([]Mutator, len(cacb.builders))
	for i := range cacb.builders {
		func(i int, root context.Context) {
			builder := cacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClientAccessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cacb *ClientAccessCreateBulk) SaveX(ctx context.Context) []*ClientAccess {
	v, err := cacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cacb *ClientAccessCreateBulk) Exec(ctx context.Context) error {
	_, err := cacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cacb *ClientAccessCreateBulk) ExecX(ctx context.Context) {
	if err := cacb.Exec(ctx); err != nil {
		panic(err)
	}
}
