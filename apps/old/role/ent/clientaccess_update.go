// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"mandacode.com/accounts/role/ent/clientaccess"
	"mandacode.com/accounts/role/ent/predicate"
	"mandacode.com/accounts/role/ent/service"
)

// ClientAccessUpdate is the builder for updating ClientAccess entities.
type ClientAccessUpdate struct {
	config
	hooks    []Hook
	mutation *ClientAccessMutation
}

// Where appends a list predicates to the ClientAccessUpdate builder.
func (cau *ClientAccessUpdate) Where(ps ...predicate.ClientAccess) *ClientAccessUpdate {
	cau.mutation.Where(ps...)
	return cau
}

// SetServiceID sets the "service_id" field.
func (cau *ClientAccessUpdate) SetServiceID(u uuid.UUID) *ClientAccessUpdate {
	cau.mutation.SetServiceID(u)
	return cau
}

// SetNillableServiceID sets the "service_id" field if the given value is not nil.
func (cau *ClientAccessUpdate) SetNillableServiceID(u *uuid.UUID) *ClientAccessUpdate {
	if u != nil {
		cau.SetServiceID(*u)
	}
	return cau
}

// SetName sets the "name" field.
func (cau *ClientAccessUpdate) SetName(s string) *ClientAccessUpdate {
	cau.mutation.SetName(s)
	return cau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cau *ClientAccessUpdate) SetNillableName(s *string) *ClientAccessUpdate {
	if s != nil {
		cau.SetName(*s)
	}
	return cau
}

// SetClientID sets the "client_id" field.
func (cau *ClientAccessUpdate) SetClientID(s string) *ClientAccessUpdate {
	cau.mutation.SetClientID(s)
	return cau
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (cau *ClientAccessUpdate) SetNillableClientID(s *string) *ClientAccessUpdate {
	if s != nil {
		cau.SetClientID(*s)
	}
	return cau
}

// SetClientSecret sets the "client_secret" field.
func (cau *ClientAccessUpdate) SetClientSecret(s string) *ClientAccessUpdate {
	cau.mutation.SetClientSecret(s)
	return cau
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (cau *ClientAccessUpdate) SetNillableClientSecret(s *string) *ClientAccessUpdate {
	if s != nil {
		cau.SetClientSecret(*s)
	}
	return cau
}

// SetDescription sets the "description" field.
func (cau *ClientAccessUpdate) SetDescription(s string) *ClientAccessUpdate {
	cau.mutation.SetDescription(s)
	return cau
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cau *ClientAccessUpdate) SetNillableDescription(s *string) *ClientAccessUpdate {
	if s != nil {
		cau.SetDescription(*s)
	}
	return cau
}

// ClearDescription clears the value of the "description" field.
func (cau *ClientAccessUpdate) ClearDescription() *ClientAccessUpdate {
	cau.mutation.ClearDescription()
	return cau
}

// SetIsActive sets the "is_active" field.
func (cau *ClientAccessUpdate) SetIsActive(b bool) *ClientAccessUpdate {
	cau.mutation.SetIsActive(b)
	return cau
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (cau *ClientAccessUpdate) SetNillableIsActive(b *bool) *ClientAccessUpdate {
	if b != nil {
		cau.SetIsActive(*b)
	}
	return cau
}

// SetUpdatedAt sets the "updated_at" field.
func (cau *ClientAccessUpdate) SetUpdatedAt(t time.Time) *ClientAccessUpdate {
	cau.mutation.SetUpdatedAt(t)
	return cau
}

// SetService sets the "service" edge to the Service entity.
func (cau *ClientAccessUpdate) SetService(s *Service) *ClientAccessUpdate {
	return cau.SetServiceID(s.ID)
}

// Mutation returns the ClientAccessMutation object of the builder.
func (cau *ClientAccessUpdate) Mutation() *ClientAccessMutation {
	return cau.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (cau *ClientAccessUpdate) ClearService() *ClientAccessUpdate {
	cau.mutation.ClearService()
	return cau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cau *ClientAccessUpdate) Save(ctx context.Context) (int, error) {
	cau.defaults()
	return withHooks(ctx, cau.sqlSave, cau.mutation, cau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cau *ClientAccessUpdate) SaveX(ctx context.Context) int {
	affected, err := cau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cau *ClientAccessUpdate) Exec(ctx context.Context) error {
	_, err := cau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cau *ClientAccessUpdate) ExecX(ctx context.Context) {
	if err := cau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cau *ClientAccessUpdate) defaults() {
	if _, ok := cau.mutation.UpdatedAt(); !ok {
		v := clientaccess.UpdateDefaultUpdatedAt()
		cau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cau *ClientAccessUpdate) check() error {
	if v, ok := cau.mutation.Name(); ok {
		if err := clientaccess.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ClientAccess.name": %w`, err)}
		}
	}
	if v, ok := cau.mutation.ClientID(); ok {
		if err := clientaccess.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "ClientAccess.client_id": %w`, err)}
		}
	}
	if v, ok := cau.mutation.ClientSecret(); ok {
		if err := clientaccess.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "ClientAccess.client_secret": %w`, err)}
		}
	}
	if cau.mutation.ServiceCleared() && len(cau.mutation.ServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ClientAccess.service"`)
	}
	return nil
}

func (cau *ClientAccessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(clientaccess.Table, clientaccess.Columns, sqlgraph.NewFieldSpec(clientaccess.FieldID, field.TypeUUID))
	if ps := cau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cau.mutation.Name(); ok {
		_spec.SetField(clientaccess.FieldName, field.TypeString, value)
	}
	if value, ok := cau.mutation.ClientID(); ok {
		_spec.SetField(clientaccess.FieldClientID, field.TypeString, value)
	}
	if value, ok := cau.mutation.ClientSecret(); ok {
		_spec.SetField(clientaccess.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := cau.mutation.Description(); ok {
		_spec.SetField(clientaccess.FieldDescription, field.TypeString, value)
	}
	if cau.mutation.DescriptionCleared() {
		_spec.ClearField(clientaccess.FieldDescription, field.TypeString)
	}
	if value, ok := cau.mutation.IsActive(); ok {
		_spec.SetField(clientaccess.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := cau.mutation.UpdatedAt(); ok {
		_spec.SetField(clientaccess.FieldUpdatedAt, field.TypeTime, value)
	}
	if cau.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clientaccess.ServiceTable,
			Columns: []string{clientaccess.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cau.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clientaccess.ServiceTable,
			Columns: []string{clientaccess.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clientaccess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cau.mutation.done = true
	return n, nil
}

// ClientAccessUpdateOne is the builder for updating a single ClientAccess entity.
type ClientAccessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClientAccessMutation
}

// SetServiceID sets the "service_id" field.
func (cauo *ClientAccessUpdateOne) SetServiceID(u uuid.UUID) *ClientAccessUpdateOne {
	cauo.mutation.SetServiceID(u)
	return cauo
}

// SetNillableServiceID sets the "service_id" field if the given value is not nil.
func (cauo *ClientAccessUpdateOne) SetNillableServiceID(u *uuid.UUID) *ClientAccessUpdateOne {
	if u != nil {
		cauo.SetServiceID(*u)
	}
	return cauo
}

// SetName sets the "name" field.
func (cauo *ClientAccessUpdateOne) SetName(s string) *ClientAccessUpdateOne {
	cauo.mutation.SetName(s)
	return cauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cauo *ClientAccessUpdateOne) SetNillableName(s *string) *ClientAccessUpdateOne {
	if s != nil {
		cauo.SetName(*s)
	}
	return cauo
}

// SetClientID sets the "client_id" field.
func (cauo *ClientAccessUpdateOne) SetClientID(s string) *ClientAccessUpdateOne {
	cauo.mutation.SetClientID(s)
	return cauo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (cauo *ClientAccessUpdateOne) SetNillableClientID(s *string) *ClientAccessUpdateOne {
	if s != nil {
		cauo.SetClientID(*s)
	}
	return cauo
}

// SetClientSecret sets the "client_secret" field.
func (cauo *ClientAccessUpdateOne) SetClientSecret(s string) *ClientAccessUpdateOne {
	cauo.mutation.SetClientSecret(s)
	return cauo
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (cauo *ClientAccessUpdateOne) SetNillableClientSecret(s *string) *ClientAccessUpdateOne {
	if s != nil {
		cauo.SetClientSecret(*s)
	}
	return cauo
}

// SetDescription sets the "description" field.
func (cauo *ClientAccessUpdateOne) SetDescription(s string) *ClientAccessUpdateOne {
	cauo.mutation.SetDescription(s)
	return cauo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cauo *ClientAccessUpdateOne) SetNillableDescription(s *string) *ClientAccessUpdateOne {
	if s != nil {
		cauo.SetDescription(*s)
	}
	return cauo
}

// ClearDescription clears the value of the "description" field.
func (cauo *ClientAccessUpdateOne) ClearDescription() *ClientAccessUpdateOne {
	cauo.mutation.ClearDescription()
	return cauo
}

// SetIsActive sets the "is_active" field.
func (cauo *ClientAccessUpdateOne) SetIsActive(b bool) *ClientAccessUpdateOne {
	cauo.mutation.SetIsActive(b)
	return cauo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (cauo *ClientAccessUpdateOne) SetNillableIsActive(b *bool) *ClientAccessUpdateOne {
	if b != nil {
		cauo.SetIsActive(*b)
	}
	return cauo
}

// SetUpdatedAt sets the "updated_at" field.
func (cauo *ClientAccessUpdateOne) SetUpdatedAt(t time.Time) *ClientAccessUpdateOne {
	cauo.mutation.SetUpdatedAt(t)
	return cauo
}

// SetService sets the "service" edge to the Service entity.
func (cauo *ClientAccessUpdateOne) SetService(s *Service) *ClientAccessUpdateOne {
	return cauo.SetServiceID(s.ID)
}

// Mutation returns the ClientAccessMutation object of the builder.
func (cauo *ClientAccessUpdateOne) Mutation() *ClientAccessMutation {
	return cauo.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (cauo *ClientAccessUpdateOne) ClearService() *ClientAccessUpdateOne {
	cauo.mutation.ClearService()
	return cauo
}

// Where appends a list predicates to the ClientAccessUpdate builder.
func (cauo *ClientAccessUpdateOne) Where(ps ...predicate.ClientAccess) *ClientAccessUpdateOne {
	cauo.mutation.Where(ps...)
	return cauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cauo *ClientAccessUpdateOne) Select(field string, fields ...string) *ClientAccessUpdateOne {
	cauo.fields = append([]string{field}, fields...)
	return cauo
}

// Save executes the query and returns the updated ClientAccess entity.
func (cauo *ClientAccessUpdateOne) Save(ctx context.Context) (*ClientAccess, error) {
	cauo.defaults()
	return withHooks(ctx, cauo.sqlSave, cauo.mutation, cauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cauo *ClientAccessUpdateOne) SaveX(ctx context.Context) *ClientAccess {
	node, err := cauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cauo *ClientAccessUpdateOne) Exec(ctx context.Context) error {
	_, err := cauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cauo *ClientAccessUpdateOne) ExecX(ctx context.Context) {
	if err := cauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cauo *ClientAccessUpdateOne) defaults() {
	if _, ok := cauo.mutation.UpdatedAt(); !ok {
		v := clientaccess.UpdateDefaultUpdatedAt()
		cauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cauo *ClientAccessUpdateOne) check() error {
	if v, ok := cauo.mutation.Name(); ok {
		if err := clientaccess.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ClientAccess.name": %w`, err)}
		}
	}
	if v, ok := cauo.mutation.ClientID(); ok {
		if err := clientaccess.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "ClientAccess.client_id": %w`, err)}
		}
	}
	if v, ok := cauo.mutation.ClientSecret(); ok {
		if err := clientaccess.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "ClientAccess.client_secret": %w`, err)}
		}
	}
	if cauo.mutation.ServiceCleared() && len(cauo.mutation.ServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ClientAccess.service"`)
	}
	return nil
}

func (cauo *ClientAccessUpdateOne) sqlSave(ctx context.Context) (_node *ClientAccess, err error) {
	if err := cauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(clientaccess.Table, clientaccess.Columns, sqlgraph.NewFieldSpec(clientaccess.FieldID, field.TypeUUID))
	id, ok := cauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ClientAccess.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clientaccess.FieldID)
		for _, f := range fields {
			if !clientaccess.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != clientaccess.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cauo.mutation.Name(); ok {
		_spec.SetField(clientaccess.FieldName, field.TypeString, value)
	}
	if value, ok := cauo.mutation.ClientID(); ok {
		_spec.SetField(clientaccess.FieldClientID, field.TypeString, value)
	}
	if value, ok := cauo.mutation.ClientSecret(); ok {
		_spec.SetField(clientaccess.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := cauo.mutation.Description(); ok {
		_spec.SetField(clientaccess.FieldDescription, field.TypeString, value)
	}
	if cauo.mutation.DescriptionCleared() {
		_spec.ClearField(clientaccess.FieldDescription, field.TypeString)
	}
	if value, ok := cauo.mutation.IsActive(); ok {
		_spec.SetField(clientaccess.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := cauo.mutation.UpdatedAt(); ok {
		_spec.SetField(clientaccess.FieldUpdatedAt, field.TypeTime, value)
	}
	if cauo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clientaccess.ServiceTable,
			Columns: []string{clientaccess.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cauo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clientaccess.ServiceTable,
			Columns: []string{clientaccess.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ClientAccess{config: cauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clientaccess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cauo.mutation.done = true
	return _node, nil
}
