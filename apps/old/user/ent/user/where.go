// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"mandacode.com/accounts/user/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// SyncCode applies equality check predicate on the "sync_code" field. It's identical to SyncCodeEQ.
func SyncCode(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSyncCode, v))
}

// EmailVerificationCode applies equality check predicate on the "email_verification_code" field. It's identical to EmailVerificationCodeEQ.
func EmailVerificationCode(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailVerificationCode, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDeletedAt))
}

// SyncCodeEQ applies the EQ predicate on the "sync_code" field.
func SyncCodeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSyncCode, v))
}

// SyncCodeNEQ applies the NEQ predicate on the "sync_code" field.
func SyncCodeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSyncCode, v))
}

// SyncCodeIn applies the In predicate on the "sync_code" field.
func SyncCodeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSyncCode, vs...))
}

// SyncCodeNotIn applies the NotIn predicate on the "sync_code" field.
func SyncCodeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSyncCode, vs...))
}

// SyncCodeGT applies the GT predicate on the "sync_code" field.
func SyncCodeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSyncCode, v))
}

// SyncCodeGTE applies the GTE predicate on the "sync_code" field.
func SyncCodeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSyncCode, v))
}

// SyncCodeLT applies the LT predicate on the "sync_code" field.
func SyncCodeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSyncCode, v))
}

// SyncCodeLTE applies the LTE predicate on the "sync_code" field.
func SyncCodeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSyncCode, v))
}

// SyncCodeContains applies the Contains predicate on the "sync_code" field.
func SyncCodeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSyncCode, v))
}

// SyncCodeHasPrefix applies the HasPrefix predicate on the "sync_code" field.
func SyncCodeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSyncCode, v))
}

// SyncCodeHasSuffix applies the HasSuffix predicate on the "sync_code" field.
func SyncCodeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSyncCode, v))
}

// SyncCodeEqualFold applies the EqualFold predicate on the "sync_code" field.
func SyncCodeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSyncCode, v))
}

// SyncCodeContainsFold applies the ContainsFold predicate on the "sync_code" field.
func SyncCodeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSyncCode, v))
}

// EmailVerificationCodeEQ applies the EQ predicate on the "email_verification_code" field.
func EmailVerificationCodeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailVerificationCode, v))
}

// EmailVerificationCodeNEQ applies the NEQ predicate on the "email_verification_code" field.
func EmailVerificationCodeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmailVerificationCode, v))
}

// EmailVerificationCodeIn applies the In predicate on the "email_verification_code" field.
func EmailVerificationCodeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmailVerificationCode, vs...))
}

// EmailVerificationCodeNotIn applies the NotIn predicate on the "email_verification_code" field.
func EmailVerificationCodeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmailVerificationCode, vs...))
}

// EmailVerificationCodeGT applies the GT predicate on the "email_verification_code" field.
func EmailVerificationCodeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmailVerificationCode, v))
}

// EmailVerificationCodeGTE applies the GTE predicate on the "email_verification_code" field.
func EmailVerificationCodeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmailVerificationCode, v))
}

// EmailVerificationCodeLT applies the LT predicate on the "email_verification_code" field.
func EmailVerificationCodeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmailVerificationCode, v))
}

// EmailVerificationCodeLTE applies the LTE predicate on the "email_verification_code" field.
func EmailVerificationCodeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmailVerificationCode, v))
}

// EmailVerificationCodeContains applies the Contains predicate on the "email_verification_code" field.
func EmailVerificationCodeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmailVerificationCode, v))
}

// EmailVerificationCodeHasPrefix applies the HasPrefix predicate on the "email_verification_code" field.
func EmailVerificationCodeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmailVerificationCode, v))
}

// EmailVerificationCodeHasSuffix applies the HasSuffix predicate on the "email_verification_code" field.
func EmailVerificationCodeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmailVerificationCode, v))
}

// EmailVerificationCodeEqualFold applies the EqualFold predicate on the "email_verification_code" field.
func EmailVerificationCodeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmailVerificationCode, v))
}

// EmailVerificationCodeContainsFold applies the ContainsFold predicate on the "email_verification_code" field.
func EmailVerificationCodeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmailVerificationCode, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
